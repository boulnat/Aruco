
ILD6150-PCA9685.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ca8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08006e38  08006e38  00016e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f3c  08006f3c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006f3c  08006f3c  00016f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f44  08006f44  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f44  08006f44  00016f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f48  08006f48  00016f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006f4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a50  20000074  08006fc0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ac4  08006fc0  00021ac4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f11f  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000036b3  00000000  00000000  0003f1c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001918  00000000  00000000  00042878  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001780  00000000  00000000  00044190  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000039d7  00000000  00000000  00045910  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000141bc  00000000  00000000  000492e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d529c  00000000  00000000  0005d4a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013273f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d28  00000000  00000000  001327bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006e20 	.word	0x08006e20

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006e20 	.word	0x08006e20

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 fc19 	bl	8000daa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f828 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 f908 	bl	8000790 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000580:	f000 f896 	bl	80006b0 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000584:	f000 f8d2 	bl	800072c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000588:	f003 fad2 	bl	8003b30 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800058c:	4a09      	ldr	r2, [pc, #36]	; (80005b4 <main+0x44>)
 800058e:	2100      	movs	r1, #0
 8000590:	4809      	ldr	r0, [pc, #36]	; (80005b8 <main+0x48>)
 8000592:	f003 fb37 	bl	8003c04 <osThreadNew>
 8000596:	4602      	mov	r2, r0
 8000598:	4b08      	ldr	r3, [pc, #32]	; (80005bc <main+0x4c>)
 800059a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  comUsartTaskHandle = osThreadNew(ComUsartTask, NULL, &comUsartTask_attributes);
 800059c:	4a08      	ldr	r2, [pc, #32]	; (80005c0 <main+0x50>)
 800059e:	2100      	movs	r1, #0
 80005a0:	4808      	ldr	r0, [pc, #32]	; (80005c4 <main+0x54>)
 80005a2:	f003 fb2f 	bl	8003c04 <osThreadNew>
 80005a6:	4602      	mov	r2, r0
 80005a8:	4b07      	ldr	r3, [pc, #28]	; (80005c8 <main+0x58>)
 80005aa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005ac:	f003 faf4 	bl	8003b98 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b0:	e7fe      	b.n	80005b0 <main+0x40>
 80005b2:	bf00      	nop
 80005b4:	08006e78 	.word	0x08006e78
 80005b8:	08000995 	.word	0x08000995
 80005bc:	2000195c 	.word	0x2000195c
 80005c0:	08006e9c 	.word	0x08006e9c
 80005c4:	08000939 	.word	0x08000939
 80005c8:	20001a2c 	.word	0x20001a2c

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b0ac      	sub	sp, #176	; 0xb0
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80005d6:	2244      	movs	r2, #68	; 0x44
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f006 f81b 	bl	8006616 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	2254      	movs	r2, #84	; 0x54
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f006 f80d 	bl	8006616 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005fc:	f001 fa02 	bl	8001a04 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000600:	4b2a      	ldr	r3, [pc, #168]	; (80006ac <SystemClock_Config+0xe0>)
 8000602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000606:	4a29      	ldr	r2, [pc, #164]	; (80006ac <SystemClock_Config+0xe0>)
 8000608:	f023 0318 	bic.w	r3, r3, #24
 800060c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000610:	2314      	movs	r3, #20
 8000612:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000614:	2301      	movs	r3, #1
 8000616:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000618:	2301      	movs	r3, #1
 800061a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000624:	2360      	movs	r3, #96	; 0x60
 8000626:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800062a:	2300      	movs	r3, #0
 800062c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000630:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000634:	4618      	mov	r0, r3
 8000636:	f001 fa59 	bl	8001aec <HAL_RCC_OscConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000640:	f000 f9f6 	bl	8000a30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000644:	230f      	movs	r3, #15
 8000646:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000648:	2300      	movs	r3, #0
 800064a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000658:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f001 fe64 	bl	800232c <HAL_RCC_ClockConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800066a:	f000 f9e1 	bl	8000a30 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800066e:	2342      	movs	r3, #66	; 0x42
 8000670:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8000672:	2304      	movs	r3, #4
 8000674:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000676:	2300      	movs	r3, #0
 8000678:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	4618      	mov	r0, r3
 800067e:	f002 f889 	bl	8002794 <HAL_RCCEx_PeriphCLKConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000688:	f000 f9d2 	bl	8000a30 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800068c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000690:	f001 f9d6 	bl	8001a40 <HAL_PWREx_ControlVoltageScaling>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800069a:	f000 f9c9 	bl	8000a30 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800069e:	f002 fa6b 	bl	8002b78 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006a2:	bf00      	nop
 80006a4:	37b0      	adds	r7, #176	; 0xb0
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40021000 	.word	0x40021000

080006b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006b4:	4b1b      	ldr	r3, [pc, #108]	; (8000724 <MX_I2C1_Init+0x74>)
 80006b6:	4a1c      	ldr	r2, [pc, #112]	; (8000728 <MX_I2C1_Init+0x78>)
 80006b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 80006ba:	4b1a      	ldr	r3, [pc, #104]	; (8000724 <MX_I2C1_Init+0x74>)
 80006bc:	f640 6214 	movw	r2, #3604	; 0xe14
 80006c0:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006c2:	4b18      	ldr	r3, [pc, #96]	; (8000724 <MX_I2C1_Init+0x74>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006c8:	4b16      	ldr	r3, [pc, #88]	; (8000724 <MX_I2C1_Init+0x74>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006ce:	4b15      	ldr	r3, [pc, #84]	; (8000724 <MX_I2C1_Init+0x74>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006d4:	4b13      	ldr	r3, [pc, #76]	; (8000724 <MX_I2C1_Init+0x74>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006da:	4b12      	ldr	r3, [pc, #72]	; (8000724 <MX_I2C1_Init+0x74>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006e0:	4b10      	ldr	r3, [pc, #64]	; (8000724 <MX_I2C1_Init+0x74>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006e6:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <MX_I2C1_Init+0x74>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006ec:	480d      	ldr	r0, [pc, #52]	; (8000724 <MX_I2C1_Init+0x74>)
 80006ee:	f000 fdf9 	bl	80012e4 <HAL_I2C_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006f8:	f000 f99a 	bl	8000a30 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006fc:	2100      	movs	r1, #0
 80006fe:	4809      	ldr	r0, [pc, #36]	; (8000724 <MX_I2C1_Init+0x74>)
 8000700:	f001 f8e8 	bl	80018d4 <HAL_I2CEx_ConfigAnalogFilter>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800070a:	f000 f991 	bl	8000a30 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800070e:	2100      	movs	r1, #0
 8000710:	4804      	ldr	r0, [pc, #16]	; (8000724 <MX_I2C1_Init+0x74>)
 8000712:	f001 f92a 	bl	800196a <HAL_I2CEx_ConfigDigitalFilter>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800071c:	f000 f988 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20001960 	.word	0x20001960
 8000728:	40005400 	.word	0x40005400

0800072c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <MX_USART2_UART_Init+0x5c>)
 8000732:	4a16      	ldr	r2, [pc, #88]	; (800078c <MX_USART2_UART_Init+0x60>)
 8000734:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <MX_USART2_UART_Init+0x5c>)
 8000738:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800073c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800073e:	4b12      	ldr	r3, [pc, #72]	; (8000788 <MX_USART2_UART_Init+0x5c>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8000744:	4b10      	ldr	r3, [pc, #64]	; (8000788 <MX_USART2_UART_Init+0x5c>)
 8000746:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800074a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 800074c:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_USART2_UART_Init+0x5c>)
 800074e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000752:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <MX_USART2_UART_Init+0x5c>)
 8000756:	220c      	movs	r2, #12
 8000758:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <MX_USART2_UART_Init+0x5c>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_USART2_UART_Init+0x5c>)
 8000762:	2200      	movs	r2, #0
 8000764:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <MX_USART2_UART_Init+0x5c>)
 8000768:	2200      	movs	r2, #0
 800076a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_USART2_UART_Init+0x5c>)
 800076e:	2200      	movs	r2, #0
 8000770:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <MX_USART2_UART_Init+0x5c>)
 8000774:	f002 fd80 	bl	8003278 <HAL_UART_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 800077e:	f000 f957 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200019ac 	.word	0x200019ac
 800078c:	40004400 	.word	0x40004400

08000790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b088      	sub	sp, #32
 8000794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	f107 030c 	add.w	r3, r7, #12
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a6:	4b1d      	ldr	r3, [pc, #116]	; (800081c <MX_GPIO_Init+0x8c>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007aa:	4a1c      	ldr	r2, [pc, #112]	; (800081c <MX_GPIO_Init+0x8c>)
 80007ac:	f043 0304 	orr.w	r3, r3, #4
 80007b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b2:	4b1a      	ldr	r3, [pc, #104]	; (800081c <MX_GPIO_Init+0x8c>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	f003 0304 	and.w	r3, r3, #4
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	4b17      	ldr	r3, [pc, #92]	; (800081c <MX_GPIO_Init+0x8c>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c2:	4a16      	ldr	r2, [pc, #88]	; (800081c <MX_GPIO_Init+0x8c>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ca:	4b14      	ldr	r3, [pc, #80]	; (800081c <MX_GPIO_Init+0x8c>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_GPIO_Init+0x8c>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007da:	4a10      	ldr	r2, [pc, #64]	; (800081c <MX_GPIO_Init+0x8c>)
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_GPIO_Init+0x8c>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2108      	movs	r1, #8
 80007f2:	480b      	ldr	r0, [pc, #44]	; (8000820 <MX_GPIO_Init+0x90>)
 80007f4:	f000 fd5e 	bl	80012b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80007f8:	2308      	movs	r3, #8
 80007fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fc:	2301      	movs	r3, #1
 80007fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000804:	2300      	movs	r3, #0
 8000806:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000808:	f107 030c 	add.w	r3, r7, #12
 800080c:	4619      	mov	r1, r3
 800080e:	4804      	ldr	r0, [pc, #16]	; (8000820 <MX_GPIO_Init+0x90>)
 8000810:	f000 fbe6 	bl	8000fe0 <HAL_GPIO_Init>

}
 8000814:	bf00      	nop
 8000816:	3720      	adds	r7, #32
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40021000 	.word	0x40021000
 8000820:	48000400 	.word	0x48000400

08000824 <pca9685_init>:
	HAL_I2C_Master_Receive(hi2c,address,res,1,1);
	return res;
}

void pca9685_init(I2C_HandleTypeDef *hi2c, uint8_t address)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af02      	add	r7, sp, #8
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	460b      	mov	r3, r1
 800082e:	70fb      	strb	r3, [r7, #3]
 #define PCA9685_MODE1 0x00
 uint8_t initStruct[2];
 uint8_t prescale = 0x03; // hardcoded
 8000830:	2303      	movs	r3, #3
 8000832:	73fb      	strb	r3, [r7, #15]
 HAL_I2C_Master_Transmit(hi2c, address, PCA9685_MODE1, 1, 1);
 8000834:	78fb      	ldrb	r3, [r7, #3]
 8000836:	b299      	uxth	r1, r3
 8000838:	2301      	movs	r3, #1
 800083a:	9300      	str	r3, [sp, #0]
 800083c:	2301      	movs	r3, #1
 800083e:	2200      	movs	r2, #0
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f000 fddf 	bl	8001404 <HAL_I2C_Master_Transmit>
 uint8_t oldmode = 0x00; // hardcoded
 8000846:	2300      	movs	r3, #0
 8000848:	73bb      	strb	r3, [r7, #14]
 //uint8_t oldmode = PCA9685_read(hi2c,address,PCA9685_MODE1);
 // HAL_I2C_Master_Receive(hi2c, address, &oldmode, 1, 1);
 uint8_t newmode = ((oldmode & 0x7F) | 0x10);
 800084a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800084e:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 8000852:	b25b      	sxtb	r3, r3
 8000854:	f043 0310 	orr.w	r3, r3, #16
 8000858:	b25b      	sxtb	r3, r3
 800085a:	737b      	strb	r3, [r7, #13]
 initStruct[0] = PCA9685_MODE1;
 800085c:	2300      	movs	r3, #0
 800085e:	723b      	strb	r3, [r7, #8]
 initStruct[1] = newmode;
 8000860:	7b7b      	ldrb	r3, [r7, #13]
 8000862:	727b      	strb	r3, [r7, #9]
 HAL_I2C_Master_Transmit(hi2c, address, initStruct, 2, 1);
 8000864:	78fb      	ldrb	r3, [r7, #3]
 8000866:	b299      	uxth	r1, r3
 8000868:	f107 0208 	add.w	r2, r7, #8
 800086c:	2301      	movs	r3, #1
 800086e:	9300      	str	r3, [sp, #0]
 8000870:	2302      	movs	r3, #2
 8000872:	6878      	ldr	r0, [r7, #4]
 8000874:	f000 fdc6 	bl	8001404 <HAL_I2C_Master_Transmit>
 //initStruct[0] = 0xFE;
 initStruct[1] = prescale;
 8000878:	7bfb      	ldrb	r3, [r7, #15]
 800087a:	727b      	strb	r3, [r7, #9]
 HAL_I2C_Master_Transmit(hi2c, address, initStruct, 2, 1);
 800087c:	78fb      	ldrb	r3, [r7, #3]
 800087e:	b299      	uxth	r1, r3
 8000880:	f107 0208 	add.w	r2, r7, #8
 8000884:	2301      	movs	r3, #1
 8000886:	9300      	str	r3, [sp, #0]
 8000888:	2302      	movs	r3, #2
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f000 fdba 	bl	8001404 <HAL_I2C_Master_Transmit>
 //initStruct[0] = PCA9685_MODE1;
 initStruct[1] = oldmode;
 8000890:	7bbb      	ldrb	r3, [r7, #14]
 8000892:	727b      	strb	r3, [r7, #9]
 HAL_I2C_Master_Transmit(hi2c, address, initStruct, 2, 1);
 8000894:	78fb      	ldrb	r3, [r7, #3]
 8000896:	b299      	uxth	r1, r3
 8000898:	f107 0208 	add.w	r2, r7, #8
 800089c:	2301      	movs	r3, #1
 800089e:	9300      	str	r3, [sp, #0]
 80008a0:	2302      	movs	r3, #2
 80008a2:	6878      	ldr	r0, [r7, #4]
 80008a4:	f000 fdae 	bl	8001404 <HAL_I2C_Master_Transmit>
 osDelay(5);
 80008a8:	2005      	movs	r0, #5
 80008aa:	f003 fa51 	bl	8003d50 <osDelay>
 initStruct[1] = (oldmode | 0xA1);
 80008ae:	7bbb      	ldrb	r3, [r7, #14]
 80008b0:	f063 035e 	orn	r3, r3, #94	; 0x5e
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	727b      	strb	r3, [r7, #9]
 HAL_I2C_Master_Transmit(hi2c, address, initStruct, 2, 1);
 80008b8:	78fb      	ldrb	r3, [r7, #3]
 80008ba:	b299      	uxth	r1, r3
 80008bc:	f107 0208 	add.w	r2, r7, #8
 80008c0:	2301      	movs	r3, #1
 80008c2:	9300      	str	r3, [sp, #0]
 80008c4:	2302      	movs	r3, #2
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	f000 fd9c 	bl	8001404 <HAL_I2C_Master_Transmit>

}
 80008cc:	bf00      	nop
 80008ce:	3710      	adds	r7, #16
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <pca9685_all_pwm>:
	uint8_t outputBuffer[] = {0x06 + 4*num, on, (on >> 8), off, (off >> 8)};
	HAL_I2C_Master_Transmit(hi2c, address, outputBuffer, sizeof(outputBuffer), 1);
}

HAL_StatusTypeDef pca9685_all_pwm(I2C_HandleTypeDef *hi2c, uint8_t address, uint16_t on, uint16_t off)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b088      	sub	sp, #32
 80008d8:	af02      	add	r7, sp, #8
 80008da:	60f8      	str	r0, [r7, #12]
 80008dc:	4608      	mov	r0, r1
 80008de:	4611      	mov	r1, r2
 80008e0:	461a      	mov	r2, r3
 80008e2:	4603      	mov	r3, r0
 80008e4:	72fb      	strb	r3, [r7, #11]
 80008e6:	460b      	mov	r3, r1
 80008e8:	813b      	strh	r3, [r7, #8]
 80008ea:	4613      	mov	r3, r2
 80008ec:	80fb      	strh	r3, [r7, #6]
	uint8_t ALL_LED_ON = 0xFA;
 80008ee:	23fa      	movs	r3, #250	; 0xfa
 80008f0:	75fb      	strb	r3, [r7, #23]
	uint8_t outputBuffer[] = {ALL_LED_ON, on, (on >> 8), off, (off >> 8)};
 80008f2:	7dfb      	ldrb	r3, [r7, #23]
 80008f4:	743b      	strb	r3, [r7, #16]
 80008f6:	893b      	ldrh	r3, [r7, #8]
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	747b      	strb	r3, [r7, #17]
 80008fc:	893b      	ldrh	r3, [r7, #8]
 80008fe:	0a1b      	lsrs	r3, r3, #8
 8000900:	b29b      	uxth	r3, r3
 8000902:	b2db      	uxtb	r3, r3
 8000904:	74bb      	strb	r3, [r7, #18]
 8000906:	88fb      	ldrh	r3, [r7, #6]
 8000908:	b2db      	uxtb	r3, r3
 800090a:	74fb      	strb	r3, [r7, #19]
 800090c:	88fb      	ldrh	r3, [r7, #6]
 800090e:	0a1b      	lsrs	r3, r3, #8
 8000910:	b29b      	uxth	r3, r3
 8000912:	b2db      	uxtb	r3, r3
 8000914:	753b      	strb	r3, [r7, #20]
	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(hi2c, address, outputBuffer, sizeof(outputBuffer), 1);
 8000916:	7afb      	ldrb	r3, [r7, #11]
 8000918:	b299      	uxth	r1, r3
 800091a:	f107 0210 	add.w	r2, r7, #16
 800091e:	2301      	movs	r3, #1
 8000920:	9300      	str	r3, [sp, #0]
 8000922:	2305      	movs	r3, #5
 8000924:	68f8      	ldr	r0, [r7, #12]
 8000926:	f000 fd6d 	bl	8001404 <HAL_I2C_Master_Transmit>
 800092a:	4603      	mov	r3, r0
 800092c:	75bb      	strb	r3, [r7, #22]
	return status;
 800092e:	7dbb      	ldrb	r3, [r7, #22]
}
 8000930:	4618      	mov	r0, r3
 8000932:	3718      	adds	r7, #24
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <ComUsartTask>:

void ComUsartTask(void *argument){
 8000938:	b580      	push	{r7, lr}
 800093a:	b0a0      	sub	sp, #128	; 0x80
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
	char buffer[100];
	int a=15;
 8000940:	230f      	movs	r3, #15
 8000942:	67fb      	str	r3, [r7, #124]	; 0x7c
	sprintf(buffer, '%d', a);
 8000944:	f107 0318 	add.w	r3, r7, #24
 8000948:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800094a:	f242 5164 	movw	r1, #9572	; 0x2564
 800094e:	4618      	mov	r0, r3
 8000950:	f005 fe6a 	bl	8006628 <siprintf>

	uint8_t outputBuffer[] = {'M','D','M','m','1','Q','1','4','P','r'};
 8000954:	4a0d      	ldr	r2, [pc, #52]	; (800098c <ComUsartTask+0x54>)
 8000956:	f107 030c 	add.w	r3, r7, #12
 800095a:	ca07      	ldmia	r2, {r0, r1, r2}
 800095c:	c303      	stmia	r3!, {r0, r1}
 800095e:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, &outputBuffer[0], 1,500);
		HAL_UART_Transmit(&huart2, &outputBuffer[1], 1,500);
		HAL_UART_Transmit(&huart2, &outputBuffer[2], 1,500);
		HAL_UART_Transmit(&huart2, &outputBuffer[3], 1,500);
		*/
		HAL_UART_Transmit(&huart2, outputBuffer, sizeof(outputBuffer),500);
 8000960:	f107 010c 	add.w	r1, r7, #12
 8000964:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000968:	220a      	movs	r2, #10
 800096a:	4809      	ldr	r0, [pc, #36]	; (8000990 <ComUsartTask+0x58>)
 800096c:	f002 fcd2 	bl	8003314 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, buffer, 2,500);
 8000970:	f107 0118 	add.w	r1, r7, #24
 8000974:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000978:	2202      	movs	r2, #2
 800097a:	4805      	ldr	r0, [pc, #20]	; (8000990 <ComUsartTask+0x58>)
 800097c:	f002 fcca 	bl	8003314 <HAL_UART_Transmit>
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
		osDelay(500);
 8000980:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000984:	f003 f9e4 	bl	8003d50 <osDelay>
		HAL_UART_Transmit(&huart2, outputBuffer, sizeof(outputBuffer),500);
 8000988:	e7ea      	b.n	8000960 <ComUsartTask+0x28>
 800098a:	bf00      	nop
 800098c:	08006e54 	.word	0x08006e54
 8000990:	200019ac 	.word	0x200019ac

08000994 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	 uint8_t I2C_address = 0x80;
 800099c:	2380      	movs	r3, #128	; 0x80
 800099e:	73fb      	strb	r3, [r7, #15]
	 pca9685_init(&hi2c1, I2C_address);
 80009a0:	7bfb      	ldrb	r3, [r7, #15]
 80009a2:	4619      	mov	r1, r3
 80009a4:	4818      	ldr	r0, [pc, #96]	; (8000a08 <StartDefaultTask+0x74>)
 80009a6:	f7ff ff3d 	bl	8000824 <pca9685_init>
	 //pca9685_pwm(&hi2c1, I2C_address, 0, 0, 4095);
	 /* Infinite loop */
	 for(;;)
	 {
		 for(int i=0; i<255; i++){
 80009aa:	2300      	movs	r3, #0
 80009ac:	617b      	str	r3, [r7, #20]
 80009ae:	e012      	b.n	80009d6 <StartDefaultTask+0x42>
			pca9685_all_pwm(&hi2c1, I2C_address, 0, 4095-(16*i));
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	011b      	lsls	r3, r3, #4
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 80009bc:	330f      	adds	r3, #15
 80009be:	b29b      	uxth	r3, r3
 80009c0:	7bf9      	ldrb	r1, [r7, #15]
 80009c2:	2200      	movs	r2, #0
 80009c4:	4810      	ldr	r0, [pc, #64]	; (8000a08 <StartDefaultTask+0x74>)
 80009c6:	f7ff ff85 	bl	80008d4 <pca9685_all_pwm>
			osDelay(5);
 80009ca:	2005      	movs	r0, #5
 80009cc:	f003 f9c0 	bl	8003d50 <osDelay>
		 for(int i=0; i<255; i++){
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	3301      	adds	r3, #1
 80009d4:	617b      	str	r3, [r7, #20]
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	2bfe      	cmp	r3, #254	; 0xfe
 80009da:	dde9      	ble.n	80009b0 <StartDefaultTask+0x1c>
		 }

	 	 for(int i=0; i<255; i++){
 80009dc:	2300      	movs	r3, #0
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	e00e      	b.n	8000a00 <StartDefaultTask+0x6c>
	 		 pca9685_all_pwm(&hi2c1, I2C_address, 0, (16*i));
 80009e2:	693b      	ldr	r3, [r7, #16]
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	011b      	lsls	r3, r3, #4
 80009e8:	b29b      	uxth	r3, r3
 80009ea:	7bf9      	ldrb	r1, [r7, #15]
 80009ec:	2200      	movs	r2, #0
 80009ee:	4806      	ldr	r0, [pc, #24]	; (8000a08 <StartDefaultTask+0x74>)
 80009f0:	f7ff ff70 	bl	80008d4 <pca9685_all_pwm>
	 		 osDelay(5);
 80009f4:	2005      	movs	r0, #5
 80009f6:	f003 f9ab 	bl	8003d50 <osDelay>
	 	 for(int i=0; i<255; i++){
 80009fa:	693b      	ldr	r3, [r7, #16]
 80009fc:	3301      	adds	r3, #1
 80009fe:	613b      	str	r3, [r7, #16]
 8000a00:	693b      	ldr	r3, [r7, #16]
 8000a02:	2bfe      	cmp	r3, #254	; 0xfe
 8000a04:	dded      	ble.n	80009e2 <StartDefaultTask+0x4e>
		 for(int i=0; i<255; i++){
 8000a06:	e7d0      	b.n	80009aa <StartDefaultTask+0x16>
 8000a08:	20001960 	.word	0x20001960

08000a0c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a04      	ldr	r2, [pc, #16]	; (8000a2c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d101      	bne.n	8000a22 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a1e:	f000 f9dd 	bl	8000ddc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40001000 	.word	0x40001000

08000a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a34:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a36:	e7fe      	b.n	8000a36 <Error_Handler+0x6>

08000a38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3e:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <HAL_MspInit+0x4c>)
 8000a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a42:	4a10      	ldr	r2, [pc, #64]	; (8000a84 <HAL_MspInit+0x4c>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6613      	str	r3, [r2, #96]	; 0x60
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <HAL_MspInit+0x4c>)
 8000a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a56:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <HAL_MspInit+0x4c>)
 8000a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a5a:	4a0a      	ldr	r2, [pc, #40]	; (8000a84 <HAL_MspInit+0x4c>)
 8000a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a60:	6593      	str	r3, [r2, #88]	; 0x58
 8000a62:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <HAL_MspInit+0x4c>)
 8000a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	210f      	movs	r1, #15
 8000a72:	f06f 0001 	mvn.w	r0, #1
 8000a76:	f000 fa89 	bl	8000f8c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40021000 	.word	0x40021000

08000a88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08a      	sub	sp, #40	; 0x28
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a17      	ldr	r2, [pc, #92]	; (8000b04 <HAL_I2C_MspInit+0x7c>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d127      	bne.n	8000afa <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aaa:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <HAL_I2C_MspInit+0x80>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aae:	4a16      	ldr	r2, [pc, #88]	; (8000b08 <HAL_I2C_MspInit+0x80>)
 8000ab0:	f043 0302 	orr.w	r3, r3, #2
 8000ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab6:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <HAL_I2C_MspInit+0x80>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aba:	f003 0302 	and.w	r3, r3, #2
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ac2:	23c0      	movs	r3, #192	; 0xc0
 8000ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ac6:	2312      	movs	r3, #18
 8000ac8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aca:	2301      	movs	r3, #1
 8000acc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ad2:	2304      	movs	r3, #4
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	4619      	mov	r1, r3
 8000adc:	480b      	ldr	r0, [pc, #44]	; (8000b0c <HAL_I2C_MspInit+0x84>)
 8000ade:	f000 fa7f 	bl	8000fe0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <HAL_I2C_MspInit+0x80>)
 8000ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ae6:	4a08      	ldr	r2, [pc, #32]	; (8000b08 <HAL_I2C_MspInit+0x80>)
 8000ae8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000aec:	6593      	str	r3, [r2, #88]	; 0x58
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <HAL_I2C_MspInit+0x80>)
 8000af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000af2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000afa:	bf00      	nop
 8000afc:	3728      	adds	r7, #40	; 0x28
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40005400 	.word	0x40005400
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	48000400 	.word	0x48000400

08000b10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08a      	sub	sp, #40	; 0x28
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a17      	ldr	r2, [pc, #92]	; (8000b8c <HAL_UART_MspInit+0x7c>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d128      	bne.n	8000b84 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b32:	4b17      	ldr	r3, [pc, #92]	; (8000b90 <HAL_UART_MspInit+0x80>)
 8000b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b36:	4a16      	ldr	r2, [pc, #88]	; (8000b90 <HAL_UART_MspInit+0x80>)
 8000b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b3c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b3e:	4b14      	ldr	r3, [pc, #80]	; (8000b90 <HAL_UART_MspInit+0x80>)
 8000b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <HAL_UART_MspInit+0x80>)
 8000b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4e:	4a10      	ldr	r2, [pc, #64]	; (8000b90 <HAL_UART_MspInit+0x80>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b56:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <HAL_UART_MspInit+0x80>)
 8000b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b62:	230c      	movs	r3, #12
 8000b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b66:	2302      	movs	r3, #2
 8000b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b72:	2307      	movs	r3, #7
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b76:	f107 0314 	add.w	r3, r7, #20
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b80:	f000 fa2e 	bl	8000fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b84:	bf00      	nop
 8000b86:	3728      	adds	r7, #40	; 0x28
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40004400 	.word	0x40004400
 8000b90:	40021000 	.word	0x40021000

08000b94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	; 0x30
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	6879      	ldr	r1, [r7, #4]
 8000ba8:	2036      	movs	r0, #54	; 0x36
 8000baa:	f000 f9ef 	bl	8000f8c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bae:	2036      	movs	r0, #54	; 0x36
 8000bb0:	f000 fa08 	bl	8000fc4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000bb4:	4b1e      	ldr	r3, [pc, #120]	; (8000c30 <HAL_InitTick+0x9c>)
 8000bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bb8:	4a1d      	ldr	r2, [pc, #116]	; (8000c30 <HAL_InitTick+0x9c>)
 8000bba:	f043 0310 	orr.w	r3, r3, #16
 8000bbe:	6593      	str	r3, [r2, #88]	; 0x58
 8000bc0:	4b1b      	ldr	r3, [pc, #108]	; (8000c30 <HAL_InitTick+0x9c>)
 8000bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bc4:	f003 0310 	and.w	r3, r3, #16
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bcc:	f107 0210 	add.w	r2, r7, #16
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4611      	mov	r1, r2
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f001 fd4a 	bl	8002670 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000bdc:	f001 fd1c 	bl	8002618 <HAL_RCC_GetPCLK1Freq>
 8000be0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000be4:	4a13      	ldr	r2, [pc, #76]	; (8000c34 <HAL_InitTick+0xa0>)
 8000be6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bea:	0c9b      	lsrs	r3, r3, #18
 8000bec:	3b01      	subs	r3, #1
 8000bee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000bf0:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <HAL_InitTick+0xa4>)
 8000bf2:	4a12      	ldr	r2, [pc, #72]	; (8000c3c <HAL_InitTick+0xa8>)
 8000bf4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000bf6:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <HAL_InitTick+0xa4>)
 8000bf8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bfc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bfe:	4a0e      	ldr	r2, [pc, #56]	; (8000c38 <HAL_InitTick+0xa4>)
 8000c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c02:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c04:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <HAL_InitTick+0xa4>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <HAL_InitTick+0xa4>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000c10:	4809      	ldr	r0, [pc, #36]	; (8000c38 <HAL_InitTick+0xa4>)
 8000c12:	f002 f8b1 	bl	8002d78 <HAL_TIM_Base_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d104      	bne.n	8000c26 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000c1c:	4806      	ldr	r0, [pc, #24]	; (8000c38 <HAL_InitTick+0xa4>)
 8000c1e:	f002 f90d 	bl	8002e3c <HAL_TIM_Base_Start_IT>
 8000c22:	4603      	mov	r3, r0
 8000c24:	e000      	b.n	8000c28 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3730      	adds	r7, #48	; 0x30
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40021000 	.word	0x40021000
 8000c34:	431bde83 	.word	0x431bde83
 8000c38:	20001a30 	.word	0x20001a30
 8000c3c:	40001000 	.word	0x40001000

08000c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <NMI_Handler+0x4>

08000c46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4a:	e7fe      	b.n	8000c4a <HardFault_Handler+0x4>

08000c4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <MemManage_Handler+0x4>

08000c52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c56:	e7fe      	b.n	8000c56 <BusFault_Handler+0x4>

08000c58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <UsageFault_Handler+0x4>

08000c5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c70:	4802      	ldr	r0, [pc, #8]	; (8000c7c <TIM6_DAC_IRQHandler+0x10>)
 8000c72:	f002 f937 	bl	8002ee4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20001a30 	.word	0x20001a30

08000c80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c88:	4a14      	ldr	r2, [pc, #80]	; (8000cdc <_sbrk+0x5c>)
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <_sbrk+0x60>)
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c94:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <_sbrk+0x64>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d102      	bne.n	8000ca2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c9c:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <_sbrk+0x64>)
 8000c9e:	4a12      	ldr	r2, [pc, #72]	; (8000ce8 <_sbrk+0x68>)
 8000ca0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ca2:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <_sbrk+0x64>)
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4413      	add	r3, r2
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d207      	bcs.n	8000cc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cb0:	f005 fc7c 	bl	80065ac <__errno>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	230c      	movs	r3, #12
 8000cb8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000cba:	f04f 33ff 	mov.w	r3, #4294967295
 8000cbe:	e009      	b.n	8000cd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cc0:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <_sbrk+0x64>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cc6:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <_sbrk+0x64>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4413      	add	r3, r2
 8000cce:	4a05      	ldr	r2, [pc, #20]	; (8000ce4 <_sbrk+0x64>)
 8000cd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3718      	adds	r7, #24
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20010000 	.word	0x20010000
 8000ce0:	00000400 	.word	0x00000400
 8000ce4:	20000090 	.word	0x20000090
 8000ce8:	20001ac8 	.word	0x20001ac8

08000cec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cf0:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <SystemInit+0x64>)
 8000cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cf6:	4a16      	ldr	r2, [pc, #88]	; (8000d50 <SystemInit+0x64>)
 8000cf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000d00:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <SystemInit+0x68>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a13      	ldr	r2, [pc, #76]	; (8000d54 <SystemInit+0x68>)
 8000d06:	f043 0301 	orr.w	r3, r3, #1
 8000d0a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000d0c:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <SystemInit+0x68>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000d12:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <SystemInit+0x68>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a0f      	ldr	r2, [pc, #60]	; (8000d54 <SystemInit+0x68>)
 8000d18:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000d1c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000d20:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000d22:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <SystemInit+0x68>)
 8000d24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d28:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d2a:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <SystemInit+0x68>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a09      	ldr	r2, [pc, #36]	; (8000d54 <SystemInit+0x68>)
 8000d30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d34:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000d36:	4b07      	ldr	r3, [pc, #28]	; (8000d54 <SystemInit+0x68>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d3c:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <SystemInit+0x64>)
 8000d3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d42:	609a      	str	r2, [r3, #8]
#endif
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	e000ed00 	.word	0xe000ed00
 8000d54:	40021000 	.word	0x40021000

08000d58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d90 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d5c:	f7ff ffc6 	bl	8000cec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000d60:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000d62:	e003      	b.n	8000d6c <LoopCopyDataInit>

08000d64 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000d64:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000d66:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000d68:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000d6a:	3104      	adds	r1, #4

08000d6c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000d6c:	480a      	ldr	r0, [pc, #40]	; (8000d98 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000d70:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000d72:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000d74:	d3f6      	bcc.n	8000d64 <CopyDataInit>
	ldr	r2, =_sbss
 8000d76:	4a0a      	ldr	r2, [pc, #40]	; (8000da0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000d78:	e002      	b.n	8000d80 <LoopFillZerobss>

08000d7a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000d7a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000d7c:	f842 3b04 	str.w	r3, [r2], #4

08000d80 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000d80:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <LoopForever+0x16>)
	cmp	r2, r3
 8000d82:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000d84:	d3f9      	bcc.n	8000d7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d86:	f005 fc17 	bl	80065b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d8a:	f7ff fbf1 	bl	8000570 <main>

08000d8e <LoopForever>:

LoopForever:
    b LoopForever
 8000d8e:	e7fe      	b.n	8000d8e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d90:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000d94:	08006f4c 	.word	0x08006f4c
	ldr	r0, =_sdata
 8000d98:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000d9c:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8000da0:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8000da4:	20001ac4 	.word	0x20001ac4

08000da8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000da8:	e7fe      	b.n	8000da8 <ADC1_IRQHandler>

08000daa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000db0:	2300      	movs	r3, #0
 8000db2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db4:	2003      	movs	r0, #3
 8000db6:	f000 f8de 	bl	8000f76 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f7ff feea 	bl	8000b94 <HAL_InitTick>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d002      	beq.n	8000dcc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	71fb      	strb	r3, [r7, #7]
 8000dca:	e001      	b.n	8000dd0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dcc:	f7ff fe34 	bl	8000a38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <HAL_IncTick+0x20>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	461a      	mov	r2, r3
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <HAL_IncTick+0x24>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4413      	add	r3, r2
 8000dec:	4a04      	ldr	r2, [pc, #16]	; (8000e00 <HAL_IncTick+0x24>)
 8000dee:	6013      	str	r3, [r2, #0]
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	20000008 	.word	0x20000008
 8000e00:	20001a7c 	.word	0x20001a7c

08000e04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return uwTick;
 8000e08:	4b03      	ldr	r3, [pc, #12]	; (8000e18 <HAL_GetTick+0x14>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	20001a7c 	.word	0x20001a7c

08000e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <__NVIC_SetPriorityGrouping+0x44>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e38:	4013      	ands	r3, r2
 8000e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e4e:	4a04      	ldr	r2, [pc, #16]	; (8000e60 <__NVIC_SetPriorityGrouping+0x44>)
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	60d3      	str	r3, [r2, #12]
}
 8000e54:	bf00      	nop
 8000e56:	3714      	adds	r7, #20
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <__NVIC_GetPriorityGrouping+0x18>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	0a1b      	lsrs	r3, r3, #8
 8000e6e:	f003 0307 	and.w	r3, r3, #7
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	db0b      	blt.n	8000eaa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	f003 021f 	and.w	r2, r3, #31
 8000e98:	4907      	ldr	r1, [pc, #28]	; (8000eb8 <__NVIC_EnableIRQ+0x38>)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	095b      	lsrs	r3, r3, #5
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	e000e100 	.word	0xe000e100

08000ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	6039      	str	r1, [r7, #0]
 8000ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	db0a      	blt.n	8000ee6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	490c      	ldr	r1, [pc, #48]	; (8000f08 <__NVIC_SetPriority+0x4c>)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	0112      	lsls	r2, r2, #4
 8000edc:	b2d2      	uxtb	r2, r2
 8000ede:	440b      	add	r3, r1
 8000ee0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee4:	e00a      	b.n	8000efc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	4908      	ldr	r1, [pc, #32]	; (8000f0c <__NVIC_SetPriority+0x50>)
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	f003 030f 	and.w	r3, r3, #15
 8000ef2:	3b04      	subs	r3, #4
 8000ef4:	0112      	lsls	r2, r2, #4
 8000ef6:	b2d2      	uxtb	r2, r2
 8000ef8:	440b      	add	r3, r1
 8000efa:	761a      	strb	r2, [r3, #24]
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000e100 	.word	0xe000e100
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b089      	sub	sp, #36	; 0x24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	f1c3 0307 	rsb	r3, r3, #7
 8000f2a:	2b04      	cmp	r3, #4
 8000f2c:	bf28      	it	cs
 8000f2e:	2304      	movcs	r3, #4
 8000f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	3304      	adds	r3, #4
 8000f36:	2b06      	cmp	r3, #6
 8000f38:	d902      	bls.n	8000f40 <NVIC_EncodePriority+0x30>
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3b03      	subs	r3, #3
 8000f3e:	e000      	b.n	8000f42 <NVIC_EncodePriority+0x32>
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f44:	f04f 32ff 	mov.w	r2, #4294967295
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43da      	mvns	r2, r3
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	401a      	ands	r2, r3
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f58:	f04f 31ff 	mov.w	r1, #4294967295
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f62:	43d9      	mvns	r1, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f68:	4313      	orrs	r3, r2
         );
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3724      	adds	r7, #36	; 0x24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f7ff ff4c 	bl	8000e1c <__NVIC_SetPriorityGrouping>
}
 8000f84:	bf00      	nop
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
 8000f98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f9e:	f7ff ff61 	bl	8000e64 <__NVIC_GetPriorityGrouping>
 8000fa2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	68b9      	ldr	r1, [r7, #8]
 8000fa8:	6978      	ldr	r0, [r7, #20]
 8000faa:	f7ff ffb1 	bl	8000f10 <NVIC_EncodePriority>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb4:	4611      	mov	r1, r2
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff ff80 	bl	8000ebc <__NVIC_SetPriority>
}
 8000fbc:	bf00      	nop
 8000fbe:	3718      	adds	r7, #24
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff ff54 	bl	8000e80 <__NVIC_EnableIRQ>
}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b087      	sub	sp, #28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fee:	e148      	b.n	8001282 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	2b00      	cmp	r3, #0
 8001004:	f000 813a 	beq.w	800127c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d00b      	beq.n	8001028 <HAL_GPIO_Init+0x48>
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	2b02      	cmp	r3, #2
 8001016:	d007      	beq.n	8001028 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800101c:	2b11      	cmp	r3, #17
 800101e:	d003      	beq.n	8001028 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	2b12      	cmp	r3, #18
 8001026:	d130      	bne.n	800108a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	2203      	movs	r2, #3
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	68da      	ldr	r2, [r3, #12]
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	4313      	orrs	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800105e:	2201      	movs	r2, #1
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43db      	mvns	r3, r3
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	4013      	ands	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	091b      	lsrs	r3, r3, #4
 8001074:	f003 0201 	and.w	r2, r3, #1
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	4313      	orrs	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	2203      	movs	r2, #3
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43db      	mvns	r3, r3
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	4013      	ands	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	689a      	ldr	r2, [r3, #8]
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d003      	beq.n	80010ca <HAL_GPIO_Init+0xea>
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	2b12      	cmp	r3, #18
 80010c8:	d123      	bne.n	8001112 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	08da      	lsrs	r2, r3, #3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	3208      	adds	r2, #8
 80010d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	220f      	movs	r2, #15
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43db      	mvns	r3, r3
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	4013      	ands	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	691a      	ldr	r2, [r3, #16]
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	f003 0307 	and.w	r3, r3, #7
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4313      	orrs	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	08da      	lsrs	r2, r3, #3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3208      	adds	r2, #8
 800110c:	6939      	ldr	r1, [r7, #16]
 800110e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	2203      	movs	r2, #3
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43db      	mvns	r3, r3
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	4013      	ands	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f003 0203 	and.w	r2, r3, #3
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4313      	orrs	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114e:	2b00      	cmp	r3, #0
 8001150:	f000 8094 	beq.w	800127c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001154:	4b52      	ldr	r3, [pc, #328]	; (80012a0 <HAL_GPIO_Init+0x2c0>)
 8001156:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001158:	4a51      	ldr	r2, [pc, #324]	; (80012a0 <HAL_GPIO_Init+0x2c0>)
 800115a:	f043 0301 	orr.w	r3, r3, #1
 800115e:	6613      	str	r3, [r2, #96]	; 0x60
 8001160:	4b4f      	ldr	r3, [pc, #316]	; (80012a0 <HAL_GPIO_Init+0x2c0>)
 8001162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800116c:	4a4d      	ldr	r2, [pc, #308]	; (80012a4 <HAL_GPIO_Init+0x2c4>)
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	089b      	lsrs	r3, r3, #2
 8001172:	3302      	adds	r3, #2
 8001174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001178:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	f003 0303 	and.w	r3, r3, #3
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	220f      	movs	r2, #15
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4013      	ands	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001196:	d00d      	beq.n	80011b4 <HAL_GPIO_Init+0x1d4>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4a43      	ldr	r2, [pc, #268]	; (80012a8 <HAL_GPIO_Init+0x2c8>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d007      	beq.n	80011b0 <HAL_GPIO_Init+0x1d0>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a42      	ldr	r2, [pc, #264]	; (80012ac <HAL_GPIO_Init+0x2cc>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d101      	bne.n	80011ac <HAL_GPIO_Init+0x1cc>
 80011a8:	2302      	movs	r3, #2
 80011aa:	e004      	b.n	80011b6 <HAL_GPIO_Init+0x1d6>
 80011ac:	2307      	movs	r3, #7
 80011ae:	e002      	b.n	80011b6 <HAL_GPIO_Init+0x1d6>
 80011b0:	2301      	movs	r3, #1
 80011b2:	e000      	b.n	80011b6 <HAL_GPIO_Init+0x1d6>
 80011b4:	2300      	movs	r3, #0
 80011b6:	697a      	ldr	r2, [r7, #20]
 80011b8:	f002 0203 	and.w	r2, r2, #3
 80011bc:	0092      	lsls	r2, r2, #2
 80011be:	4093      	lsls	r3, r2
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011c6:	4937      	ldr	r1, [pc, #220]	; (80012a4 <HAL_GPIO_Init+0x2c4>)
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	089b      	lsrs	r3, r3, #2
 80011cc:	3302      	adds	r3, #2
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80011d4:	4b36      	ldr	r3, [pc, #216]	; (80012b0 <HAL_GPIO_Init+0x2d0>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	43db      	mvns	r3, r3
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	4013      	ands	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d003      	beq.n	80011f8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011f8:	4a2d      	ldr	r2, [pc, #180]	; (80012b0 <HAL_GPIO_Init+0x2d0>)
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80011fe:	4b2c      	ldr	r3, [pc, #176]	; (80012b0 <HAL_GPIO_Init+0x2d0>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	43db      	mvns	r3, r3
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	4013      	ands	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	4313      	orrs	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001222:	4a23      	ldr	r2, [pc, #140]	; (80012b0 <HAL_GPIO_Init+0x2d0>)
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001228:	4b21      	ldr	r3, [pc, #132]	; (80012b0 <HAL_GPIO_Init+0x2d0>)
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	43db      	mvns	r3, r3
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	4013      	ands	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d003      	beq.n	800124c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4313      	orrs	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800124c:	4a18      	ldr	r2, [pc, #96]	; (80012b0 <HAL_GPIO_Init+0x2d0>)
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001252:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <HAL_GPIO_Init+0x2d0>)
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	43db      	mvns	r3, r3
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	4013      	ands	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4313      	orrs	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001276:	4a0e      	ldr	r2, [pc, #56]	; (80012b0 <HAL_GPIO_Init+0x2d0>)
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	3301      	adds	r3, #1
 8001280:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	fa22 f303 	lsr.w	r3, r2, r3
 800128c:	2b00      	cmp	r3, #0
 800128e:	f47f aeaf 	bne.w	8000ff0 <HAL_GPIO_Init+0x10>
  }
}
 8001292:	bf00      	nop
 8001294:	371c      	adds	r7, #28
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	40021000 	.word	0x40021000
 80012a4:	40010000 	.word	0x40010000
 80012a8:	48000400 	.word	0x48000400
 80012ac:	48000800 	.word	0x48000800
 80012b0:	40010400 	.word	0x40010400

080012b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	460b      	mov	r3, r1
 80012be:	807b      	strh	r3, [r7, #2]
 80012c0:	4613      	mov	r3, r2
 80012c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012c4:	787b      	ldrb	r3, [r7, #1]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012ca:	887a      	ldrh	r2, [r7, #2]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012d0:	e002      	b.n	80012d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012d2:	887a      	ldrh	r2, [r7, #2]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d101      	bne.n	80012f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e081      	b.n	80013fa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d106      	bne.n	8001310 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff fbbc 	bl	8000a88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2224      	movs	r2, #36	; 0x24
 8001314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f022 0201 	bic.w	r2, r2, #1
 8001326:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685a      	ldr	r2, [r3, #4]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001334:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	689a      	ldr	r2, [r3, #8]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001344:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d107      	bne.n	800135e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	689a      	ldr	r2, [r3, #8]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	e006      	b.n	800136c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	689a      	ldr	r2, [r3, #8]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800136a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	2b02      	cmp	r3, #2
 8001372:	d104      	bne.n	800137e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800137c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	6812      	ldr	r2, [r2, #0]
 8001388:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800138c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001390:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	68da      	ldr	r2, [r3, #12]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	691a      	ldr	r2, [r3, #16]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	695b      	ldr	r3, [r3, #20]
 80013aa:	ea42 0103 	orr.w	r1, r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	021a      	lsls	r2, r3, #8
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	430a      	orrs	r2, r1
 80013ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	69d9      	ldr	r1, [r3, #28]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a1a      	ldr	r2, [r3, #32]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	430a      	orrs	r2, r1
 80013ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f042 0201 	orr.w	r2, r2, #1
 80013da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2220      	movs	r2, #32
 80013e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
	...

08001404 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b088      	sub	sp, #32
 8001408:	af02      	add	r7, sp, #8
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	607a      	str	r2, [r7, #4]
 800140e:	461a      	mov	r2, r3
 8001410:	460b      	mov	r3, r1
 8001412:	817b      	strh	r3, [r7, #10]
 8001414:	4613      	mov	r3, r2
 8001416:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800141e:	b2db      	uxtb	r3, r3
 8001420:	2b20      	cmp	r3, #32
 8001422:	f040 80da 	bne.w	80015da <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800142c:	2b01      	cmp	r3, #1
 800142e:	d101      	bne.n	8001434 <HAL_I2C_Master_Transmit+0x30>
 8001430:	2302      	movs	r3, #2
 8001432:	e0d3      	b.n	80015dc <HAL_I2C_Master_Transmit+0x1d8>
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	2201      	movs	r2, #1
 8001438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800143c:	f7ff fce2 	bl	8000e04 <HAL_GetTick>
 8001440:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	2319      	movs	r3, #25
 8001448:	2201      	movs	r2, #1
 800144a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800144e:	68f8      	ldr	r0, [r7, #12]
 8001450:	f000 f8f0 	bl	8001634 <I2C_WaitOnFlagUntilTimeout>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e0be      	b.n	80015dc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2221      	movs	r2, #33	; 0x21
 8001462:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2210      	movs	r2, #16
 800146a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2200      	movs	r2, #0
 8001472:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	893a      	ldrh	r2, [r7, #8]
 800147e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2200      	movs	r2, #0
 8001484:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800148a:	b29b      	uxth	r3, r3
 800148c:	2bff      	cmp	r3, #255	; 0xff
 800148e:	d90e      	bls.n	80014ae <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	22ff      	movs	r2, #255	; 0xff
 8001494:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800149a:	b2da      	uxtb	r2, r3
 800149c:	8979      	ldrh	r1, [r7, #10]
 800149e:	4b51      	ldr	r3, [pc, #324]	; (80015e4 <HAL_I2C_Master_Transmit+0x1e0>)
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014a6:	68f8      	ldr	r0, [r7, #12]
 80014a8:	f000 f9e6 	bl	8001878 <I2C_TransferConfig>
 80014ac:	e06c      	b.n	8001588 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	8979      	ldrh	r1, [r7, #10]
 80014c0:	4b48      	ldr	r3, [pc, #288]	; (80015e4 <HAL_I2C_Master_Transmit+0x1e0>)
 80014c2:	9300      	str	r3, [sp, #0]
 80014c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014c8:	68f8      	ldr	r0, [r7, #12]
 80014ca:	f000 f9d5 	bl	8001878 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80014ce:	e05b      	b.n	8001588 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014d0:	697a      	ldr	r2, [r7, #20]
 80014d2:	6a39      	ldr	r1, [r7, #32]
 80014d4:	68f8      	ldr	r0, [r7, #12]
 80014d6:	f000 f8ed 	bl	80016b4 <I2C_WaitOnTXISFlagUntilTimeout>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e07b      	b.n	80015dc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e8:	781a      	ldrb	r2, [r3, #0]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f4:	1c5a      	adds	r2, r3, #1
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014fe:	b29b      	uxth	r3, r3
 8001500:	3b01      	subs	r3, #1
 8001502:	b29a      	uxth	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800150c:	3b01      	subs	r3, #1
 800150e:	b29a      	uxth	r2, r3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001518:	b29b      	uxth	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d034      	beq.n	8001588 <HAL_I2C_Master_Transmit+0x184>
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001522:	2b00      	cmp	r3, #0
 8001524:	d130      	bne.n	8001588 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	6a3b      	ldr	r3, [r7, #32]
 800152c:	2200      	movs	r2, #0
 800152e:	2180      	movs	r1, #128	; 0x80
 8001530:	68f8      	ldr	r0, [r7, #12]
 8001532:	f000 f87f 	bl	8001634 <I2C_WaitOnFlagUntilTimeout>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e04d      	b.n	80015dc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001544:	b29b      	uxth	r3, r3
 8001546:	2bff      	cmp	r3, #255	; 0xff
 8001548:	d90e      	bls.n	8001568 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	22ff      	movs	r2, #255	; 0xff
 800154e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001554:	b2da      	uxtb	r2, r3
 8001556:	8979      	ldrh	r1, [r7, #10]
 8001558:	2300      	movs	r3, #0
 800155a:	9300      	str	r3, [sp, #0]
 800155c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001560:	68f8      	ldr	r0, [r7, #12]
 8001562:	f000 f989 	bl	8001878 <I2C_TransferConfig>
 8001566:	e00f      	b.n	8001588 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800156c:	b29a      	uxth	r2, r3
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001576:	b2da      	uxtb	r2, r3
 8001578:	8979      	ldrh	r1, [r7, #10]
 800157a:	2300      	movs	r3, #0
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001582:	68f8      	ldr	r0, [r7, #12]
 8001584:	f000 f978 	bl	8001878 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800158c:	b29b      	uxth	r3, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	d19e      	bne.n	80014d0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001592:	697a      	ldr	r2, [r7, #20]
 8001594:	6a39      	ldr	r1, [r7, #32]
 8001596:	68f8      	ldr	r0, [r7, #12]
 8001598:	f000 f8cc 	bl	8001734 <I2C_WaitOnSTOPFlagUntilTimeout>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e01a      	b.n	80015dc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2220      	movs	r2, #32
 80015ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	6859      	ldr	r1, [r3, #4]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <HAL_I2C_Master_Transmit+0x1e4>)
 80015ba:	400b      	ands	r3, r1
 80015bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	2220      	movs	r2, #32
 80015c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80015d6:	2300      	movs	r3, #0
 80015d8:	e000      	b.n	80015dc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80015da:	2302      	movs	r3, #2
  }
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3718      	adds	r7, #24
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	80002000 	.word	0x80002000
 80015e8:	fe00e800 	.word	0xfe00e800

080015ec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d103      	bne.n	800160a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2200      	movs	r2, #0
 8001608:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	2b01      	cmp	r3, #1
 8001616:	d007      	beq.n	8001628 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	699a      	ldr	r2, [r3, #24]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f042 0201 	orr.w	r2, r2, #1
 8001626:	619a      	str	r2, [r3, #24]
  }
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	603b      	str	r3, [r7, #0]
 8001640:	4613      	mov	r3, r2
 8001642:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001644:	e022      	b.n	800168c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800164c:	d01e      	beq.n	800168c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800164e:	f7ff fbd9 	bl	8000e04 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	429a      	cmp	r2, r3
 800165c:	d302      	bcc.n	8001664 <I2C_WaitOnFlagUntilTimeout+0x30>
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d113      	bne.n	800168c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001668:	f043 0220 	orr.w	r2, r3, #32
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2220      	movs	r2, #32
 8001674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2200      	movs	r2, #0
 800167c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2200      	movs	r2, #0
 8001684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e00f      	b.n	80016ac <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	699a      	ldr	r2, [r3, #24]
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	4013      	ands	r3, r2
 8001696:	68ba      	ldr	r2, [r7, #8]
 8001698:	429a      	cmp	r2, r3
 800169a:	bf0c      	ite	eq
 800169c:	2301      	moveq	r3, #1
 800169e:	2300      	movne	r3, #0
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	461a      	mov	r2, r3
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d0cd      	beq.n	8001646 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3710      	adds	r7, #16
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80016c0:	e02c      	b.n	800171c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	68b9      	ldr	r1, [r7, #8]
 80016c6:	68f8      	ldr	r0, [r7, #12]
 80016c8:	f000 f870 	bl	80017ac <I2C_IsAcknowledgeFailed>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e02a      	b.n	800172c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016dc:	d01e      	beq.n	800171c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016de:	f7ff fb91 	bl	8000e04 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	68ba      	ldr	r2, [r7, #8]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d302      	bcc.n	80016f4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d113      	bne.n	800171c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f8:	f043 0220 	orr.w	r2, r3, #32
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2220      	movs	r2, #32
 8001704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2200      	movs	r2, #0
 8001714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e007      	b.n	800172c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b02      	cmp	r3, #2
 8001728:	d1cb      	bne.n	80016c2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800172a:	2300      	movs	r3, #0
}
 800172c:	4618      	mov	r0, r3
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001740:	e028      	b.n	8001794 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	68b9      	ldr	r1, [r7, #8]
 8001746:	68f8      	ldr	r0, [r7, #12]
 8001748:	f000 f830 	bl	80017ac <I2C_IsAcknowledgeFailed>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e026      	b.n	80017a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001756:	f7ff fb55 	bl	8000e04 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	68ba      	ldr	r2, [r7, #8]
 8001762:	429a      	cmp	r2, r3
 8001764:	d302      	bcc.n	800176c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d113      	bne.n	8001794 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001770:	f043 0220 	orr.w	r2, r3, #32
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2220      	movs	r2, #32
 800177c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2200      	movs	r2, #0
 8001784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2200      	movs	r2, #0
 800178c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e007      	b.n	80017a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	f003 0320 	and.w	r3, r3, #32
 800179e:	2b20      	cmp	r3, #32
 80017a0:	d1cf      	bne.n	8001742 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3710      	adds	r7, #16
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	f003 0310 	and.w	r3, r3, #16
 80017c2:	2b10      	cmp	r3, #16
 80017c4:	d151      	bne.n	800186a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017c6:	e022      	b.n	800180e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ce:	d01e      	beq.n	800180e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017d0:	f7ff fb18 	bl	8000e04 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	68ba      	ldr	r2, [r7, #8]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d302      	bcc.n	80017e6 <I2C_IsAcknowledgeFailed+0x3a>
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d113      	bne.n	800180e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ea:	f043 0220 	orr.w	r2, r3, #32
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2220      	movs	r2, #32
 80017f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e02e      	b.n	800186c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	f003 0320 	and.w	r3, r3, #32
 8001818:	2b20      	cmp	r3, #32
 800181a:	d1d5      	bne.n	80017c8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2210      	movs	r2, #16
 8001822:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2220      	movs	r2, #32
 800182a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800182c:	68f8      	ldr	r0, [r7, #12]
 800182e:	f7ff fedd 	bl	80015ec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6859      	ldr	r1, [r3, #4]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	4b0d      	ldr	r3, [pc, #52]	; (8001874 <I2C_IsAcknowledgeFailed+0xc8>)
 800183e:	400b      	ands	r3, r1
 8001840:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001846:	f043 0204 	orr.w	r2, r3, #4
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2220      	movs	r2, #32
 8001852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2200      	movs	r2, #0
 800185a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2200      	movs	r2, #0
 8001862:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e000      	b.n	800186c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800186a:	2300      	movs	r3, #0
}
 800186c:	4618      	mov	r0, r3
 800186e:	3710      	adds	r7, #16
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	fe00e800 	.word	0xfe00e800

08001878 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	607b      	str	r3, [r7, #4]
 8001882:	460b      	mov	r3, r1
 8001884:	817b      	strh	r3, [r7, #10]
 8001886:	4613      	mov	r3, r2
 8001888:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	685a      	ldr	r2, [r3, #4]
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	0d5b      	lsrs	r3, r3, #21
 8001894:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001898:	4b0d      	ldr	r3, [pc, #52]	; (80018d0 <I2C_TransferConfig+0x58>)
 800189a:	430b      	orrs	r3, r1
 800189c:	43db      	mvns	r3, r3
 800189e:	ea02 0103 	and.w	r1, r2, r3
 80018a2:	897b      	ldrh	r3, [r7, #10]
 80018a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80018a8:	7a7b      	ldrb	r3, [r7, #9]
 80018aa:	041b      	lsls	r3, r3, #16
 80018ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80018b0:	431a      	orrs	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	431a      	orrs	r2, r3
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	431a      	orrs	r2, r3
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	430a      	orrs	r2, r1
 80018c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80018c2:	bf00      	nop
 80018c4:	3714      	adds	r7, #20
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	03ff63ff 	.word	0x03ff63ff

080018d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b20      	cmp	r3, #32
 80018e8:	d138      	bne.n	800195c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d101      	bne.n	80018f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80018f4:	2302      	movs	r3, #2
 80018f6:	e032      	b.n	800195e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2224      	movs	r2, #36	; 0x24
 8001904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f022 0201 	bic.w	r2, r2, #1
 8001916:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001926:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6819      	ldr	r1, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	430a      	orrs	r2, r1
 8001936:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f042 0201 	orr.w	r2, r2, #1
 8001946:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2220      	movs	r2, #32
 800194c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001958:	2300      	movs	r3, #0
 800195a:	e000      	b.n	800195e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800195c:	2302      	movs	r3, #2
  }
}
 800195e:	4618      	mov	r0, r3
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800196a:	b480      	push	{r7}
 800196c:	b085      	sub	sp, #20
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
 8001972:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800197a:	b2db      	uxtb	r3, r3
 800197c:	2b20      	cmp	r3, #32
 800197e:	d139      	bne.n	80019f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001986:	2b01      	cmp	r3, #1
 8001988:	d101      	bne.n	800198e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800198a:	2302      	movs	r3, #2
 800198c:	e033      	b.n	80019f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2201      	movs	r2, #1
 8001992:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2224      	movs	r2, #36	; 0x24
 800199a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f022 0201 	bic.w	r2, r2, #1
 80019ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80019bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	021b      	lsls	r3, r3, #8
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f042 0201 	orr.w	r2, r2, #1
 80019de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2220      	movs	r2, #32
 80019e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80019f0:	2300      	movs	r3, #0
 80019f2:	e000      	b.n	80019f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80019f4:	2302      	movs	r3, #2
  }
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
	...

08001a04 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a08:	4b05      	ldr	r3, [pc, #20]	; (8001a20 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a04      	ldr	r2, [pc, #16]	; (8001a20 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001a0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a12:	6013      	str	r3, [r2, #0]
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	40007000 	.word	0x40007000

08001a24 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001a28:	4b04      	ldr	r3, [pc, #16]	; (8001a3c <HAL_PWREx_GetVoltageRange+0x18>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	40007000 	.word	0x40007000

08001a40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a4e:	d130      	bne.n	8001ab2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a50:	4b23      	ldr	r3, [pc, #140]	; (8001ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a5c:	d038      	beq.n	8001ad0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a5e:	4b20      	ldr	r3, [pc, #128]	; (8001ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a66:	4a1e      	ldr	r2, [pc, #120]	; (8001ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a6c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2232      	movs	r2, #50	; 0x32
 8001a74:	fb02 f303 	mul.w	r3, r2, r3
 8001a78:	4a1b      	ldr	r2, [pc, #108]	; (8001ae8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7e:	0c9b      	lsrs	r3, r3, #18
 8001a80:	3301      	adds	r3, #1
 8001a82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a84:	e002      	b.n	8001a8c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a8c:	4b14      	ldr	r3, [pc, #80]	; (8001ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a8e:	695b      	ldr	r3, [r3, #20]
 8001a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a98:	d102      	bne.n	8001aa0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1f2      	bne.n	8001a86 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001aa0:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aa2:	695b      	ldr	r3, [r3, #20]
 8001aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aac:	d110      	bne.n	8001ad0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e00f      	b.n	8001ad2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001aba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001abe:	d007      	beq.n	8001ad0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ac0:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ac8:	4a05      	ldr	r2, [pc, #20]	; (8001ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ace:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3714      	adds	r7, #20
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	40007000 	.word	0x40007000
 8001ae4:	20000000 	.word	0x20000000
 8001ae8:	431bde83 	.word	0x431bde83

08001aec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b088      	sub	sp, #32
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d102      	bne.n	8001b00 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	f000 bc11 	b.w	8002322 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b00:	4ba0      	ldr	r3, [pc, #640]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 030c 	and.w	r3, r3, #12
 8001b08:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b0a:	4b9e      	ldr	r3, [pc, #632]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	f003 0303 	and.w	r3, r3, #3
 8001b12:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0310 	and.w	r3, r3, #16
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f000 80e4 	beq.w	8001cea <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d007      	beq.n	8001b38 <HAL_RCC_OscConfig+0x4c>
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	2b0c      	cmp	r3, #12
 8001b2c:	f040 808b 	bne.w	8001c46 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	f040 8087 	bne.w	8001c46 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b38:	4b92      	ldr	r3, [pc, #584]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d005      	beq.n	8001b50 <HAL_RCC_OscConfig+0x64>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d101      	bne.n	8001b50 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e3e8      	b.n	8002322 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a1a      	ldr	r2, [r3, #32]
 8001b54:	4b8b      	ldr	r3, [pc, #556]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0308 	and.w	r3, r3, #8
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d004      	beq.n	8001b6a <HAL_RCC_OscConfig+0x7e>
 8001b60:	4b88      	ldr	r3, [pc, #544]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b68:	e005      	b.n	8001b76 <HAL_RCC_OscConfig+0x8a>
 8001b6a:	4b86      	ldr	r3, [pc, #536]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001b6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b70:	091b      	lsrs	r3, r3, #4
 8001b72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d223      	bcs.n	8001bc2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a1b      	ldr	r3, [r3, #32]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f000 fda8 	bl	80026d4 <RCC_SetFlashLatencyFromMSIRange>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e3c9      	b.n	8002322 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b8e:	4b7d      	ldr	r3, [pc, #500]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a7c      	ldr	r2, [pc, #496]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001b94:	f043 0308 	orr.w	r3, r3, #8
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	4b7a      	ldr	r3, [pc, #488]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a1b      	ldr	r3, [r3, #32]
 8001ba6:	4977      	ldr	r1, [pc, #476]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bac:	4b75      	ldr	r3, [pc, #468]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	69db      	ldr	r3, [r3, #28]
 8001bb8:	021b      	lsls	r3, r3, #8
 8001bba:	4972      	ldr	r1, [pc, #456]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	604b      	str	r3, [r1, #4]
 8001bc0:	e025      	b.n	8001c0e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bc2:	4b70      	ldr	r3, [pc, #448]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a6f      	ldr	r2, [pc, #444]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001bc8:	f043 0308 	orr.w	r3, r3, #8
 8001bcc:	6013      	str	r3, [r2, #0]
 8001bce:	4b6d      	ldr	r3, [pc, #436]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a1b      	ldr	r3, [r3, #32]
 8001bda:	496a      	ldr	r1, [pc, #424]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001be0:	4b68      	ldr	r3, [pc, #416]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	69db      	ldr	r3, [r3, #28]
 8001bec:	021b      	lsls	r3, r3, #8
 8001bee:	4965      	ldr	r1, [pc, #404]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d109      	bne.n	8001c0e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a1b      	ldr	r3, [r3, #32]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f000 fd68 	bl	80026d4 <RCC_SetFlashLatencyFromMSIRange>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e389      	b.n	8002322 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c0e:	f000 fc6f 	bl	80024f0 <HAL_RCC_GetSysClockFreq>
 8001c12:	4601      	mov	r1, r0
 8001c14:	4b5b      	ldr	r3, [pc, #364]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	091b      	lsrs	r3, r3, #4
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	4a5a      	ldr	r2, [pc, #360]	; (8001d88 <HAL_RCC_OscConfig+0x29c>)
 8001c20:	5cd3      	ldrb	r3, [r2, r3]
 8001c22:	f003 031f 	and.w	r3, r3, #31
 8001c26:	fa21 f303 	lsr.w	r3, r1, r3
 8001c2a:	4a58      	ldr	r2, [pc, #352]	; (8001d8c <HAL_RCC_OscConfig+0x2a0>)
 8001c2c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c2e:	4b58      	ldr	r3, [pc, #352]	; (8001d90 <HAL_RCC_OscConfig+0x2a4>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7fe ffae 	bl	8000b94 <HAL_InitTick>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c3c:	7bfb      	ldrb	r3, [r7, #15]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d052      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001c42:	7bfb      	ldrb	r3, [r7, #15]
 8001c44:	e36d      	b.n	8002322 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d032      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c4e:	4b4d      	ldr	r3, [pc, #308]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a4c      	ldr	r2, [pc, #304]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c5a:	f7ff f8d3 	bl	8000e04 <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c62:	f7ff f8cf 	bl	8000e04 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e356      	b.n	8002322 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c74:	4b43      	ldr	r3, [pc, #268]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0f0      	beq.n	8001c62 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c80:	4b40      	ldr	r3, [pc, #256]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a3f      	ldr	r2, [pc, #252]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001c86:	f043 0308 	orr.w	r3, r3, #8
 8001c8a:	6013      	str	r3, [r2, #0]
 8001c8c:	4b3d      	ldr	r3, [pc, #244]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a1b      	ldr	r3, [r3, #32]
 8001c98:	493a      	ldr	r1, [pc, #232]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c9e:	4b39      	ldr	r3, [pc, #228]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	021b      	lsls	r3, r3, #8
 8001cac:	4935      	ldr	r1, [pc, #212]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	604b      	str	r3, [r1, #4]
 8001cb2:	e01a      	b.n	8001cea <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001cb4:	4b33      	ldr	r3, [pc, #204]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a32      	ldr	r2, [pc, #200]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001cba:	f023 0301 	bic.w	r3, r3, #1
 8001cbe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cc0:	f7ff f8a0 	bl	8000e04 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cc8:	f7ff f89c 	bl	8000e04 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e323      	b.n	8002322 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001cda:	4b2a      	ldr	r3, [pc, #168]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1f0      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x1dc>
 8001ce6:	e000      	b.n	8001cea <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ce8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d073      	beq.n	8001dde <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	2b08      	cmp	r3, #8
 8001cfa:	d005      	beq.n	8001d08 <HAL_RCC_OscConfig+0x21c>
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	2b0c      	cmp	r3, #12
 8001d00:	d10e      	bne.n	8001d20 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	2b03      	cmp	r3, #3
 8001d06:	d10b      	bne.n	8001d20 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d08:	4b1e      	ldr	r3, [pc, #120]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d063      	beq.n	8001ddc <HAL_RCC_OscConfig+0x2f0>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d15f      	bne.n	8001ddc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e300      	b.n	8002322 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d28:	d106      	bne.n	8001d38 <HAL_RCC_OscConfig+0x24c>
 8001d2a:	4b16      	ldr	r3, [pc, #88]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a15      	ldr	r2, [pc, #84]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d34:	6013      	str	r3, [r2, #0]
 8001d36:	e01d      	b.n	8001d74 <HAL_RCC_OscConfig+0x288>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d40:	d10c      	bne.n	8001d5c <HAL_RCC_OscConfig+0x270>
 8001d42:	4b10      	ldr	r3, [pc, #64]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a0f      	ldr	r2, [pc, #60]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001d48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	4b0d      	ldr	r3, [pc, #52]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a0c      	ldr	r2, [pc, #48]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d58:	6013      	str	r3, [r2, #0]
 8001d5a:	e00b      	b.n	8001d74 <HAL_RCC_OscConfig+0x288>
 8001d5c:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a08      	ldr	r2, [pc, #32]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d66:	6013      	str	r3, [r2, #0]
 8001d68:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a05      	ldr	r2, [pc, #20]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001d6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d01b      	beq.n	8001db4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7c:	f7ff f842 	bl	8000e04 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d82:	e010      	b.n	8001da6 <HAL_RCC_OscConfig+0x2ba>
 8001d84:	40021000 	.word	0x40021000
 8001d88:	08006ec0 	.word	0x08006ec0
 8001d8c:	20000000 	.word	0x20000000
 8001d90:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d94:	f7ff f836 	bl	8000e04 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b64      	cmp	r3, #100	; 0x64
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e2bd      	b.n	8002322 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001da6:	4baf      	ldr	r3, [pc, #700]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d0f0      	beq.n	8001d94 <HAL_RCC_OscConfig+0x2a8>
 8001db2:	e014      	b.n	8001dde <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db4:	f7ff f826 	bl	8000e04 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dbc:	f7ff f822 	bl	8000e04 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b64      	cmp	r3, #100	; 0x64
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e2a9      	b.n	8002322 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dce:	4ba5      	ldr	r3, [pc, #660]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1f0      	bne.n	8001dbc <HAL_RCC_OscConfig+0x2d0>
 8001dda:	e000      	b.n	8001dde <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ddc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d060      	beq.n	8001eac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	2b04      	cmp	r3, #4
 8001dee:	d005      	beq.n	8001dfc <HAL_RCC_OscConfig+0x310>
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	2b0c      	cmp	r3, #12
 8001df4:	d119      	bne.n	8001e2a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d116      	bne.n	8001e2a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dfc:	4b99      	ldr	r3, [pc, #612]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d005      	beq.n	8001e14 <HAL_RCC_OscConfig+0x328>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e286      	b.n	8002322 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e14:	4b93      	ldr	r3, [pc, #588]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	061b      	lsls	r3, r3, #24
 8001e22:	4990      	ldr	r1, [pc, #576]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001e24:	4313      	orrs	r3, r2
 8001e26:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e28:	e040      	b.n	8001eac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d023      	beq.n	8001e7a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e32:	4b8c      	ldr	r3, [pc, #560]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a8b      	ldr	r2, [pc, #556]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3e:	f7fe ffe1 	bl	8000e04 <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e44:	e008      	b.n	8001e58 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e46:	f7fe ffdd 	bl	8000e04 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e264      	b.n	8002322 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e58:	4b82      	ldr	r3, [pc, #520]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d0f0      	beq.n	8001e46 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e64:	4b7f      	ldr	r3, [pc, #508]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	061b      	lsls	r3, r3, #24
 8001e72:	497c      	ldr	r1, [pc, #496]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	604b      	str	r3, [r1, #4]
 8001e78:	e018      	b.n	8001eac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e7a:	4b7a      	ldr	r3, [pc, #488]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a79      	ldr	r2, [pc, #484]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001e80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e86:	f7fe ffbd 	bl	8000e04 <HAL_GetTick>
 8001e8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e8c:	e008      	b.n	8001ea0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e8e:	f7fe ffb9 	bl	8000e04 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e240      	b.n	8002322 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ea0:	4b70      	ldr	r3, [pc, #448]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1f0      	bne.n	8001e8e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0308 	and.w	r3, r3, #8
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d03c      	beq.n	8001f32 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	695b      	ldr	r3, [r3, #20]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d01c      	beq.n	8001efa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ec0:	4b68      	ldr	r3, [pc, #416]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ec6:	4a67      	ldr	r2, [pc, #412]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001ec8:	f043 0301 	orr.w	r3, r3, #1
 8001ecc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed0:	f7fe ff98 	bl	8000e04 <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ed8:	f7fe ff94 	bl	8000e04 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e21b      	b.n	8002322 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001eea:	4b5e      	ldr	r3, [pc, #376]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001eec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0ef      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x3ec>
 8001ef8:	e01b      	b.n	8001f32 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001efa:	4b5a      	ldr	r3, [pc, #360]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001efc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f00:	4a58      	ldr	r2, [pc, #352]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001f02:	f023 0301 	bic.w	r3, r3, #1
 8001f06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f0a:	f7fe ff7b 	bl	8000e04 <HAL_GetTick>
 8001f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f10:	e008      	b.n	8001f24 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f12:	f7fe ff77 	bl	8000e04 <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e1fe      	b.n	8002322 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f24:	4b4f      	ldr	r3, [pc, #316]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001f26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1ef      	bne.n	8001f12 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0304 	and.w	r3, r3, #4
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f000 80a6 	beq.w	800208c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f40:	2300      	movs	r3, #0
 8001f42:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f44:	4b47      	ldr	r3, [pc, #284]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d10d      	bne.n	8001f6c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f50:	4b44      	ldr	r3, [pc, #272]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f54:	4a43      	ldr	r2, [pc, #268]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f5a:	6593      	str	r3, [r2, #88]	; 0x58
 8001f5c:	4b41      	ldr	r3, [pc, #260]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f64:	60bb      	str	r3, [r7, #8]
 8001f66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f6c:	4b3e      	ldr	r3, [pc, #248]	; (8002068 <HAL_RCC_OscConfig+0x57c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d118      	bne.n	8001faa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f78:	4b3b      	ldr	r3, [pc, #236]	; (8002068 <HAL_RCC_OscConfig+0x57c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a3a      	ldr	r2, [pc, #232]	; (8002068 <HAL_RCC_OscConfig+0x57c>)
 8001f7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f84:	f7fe ff3e 	bl	8000e04 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f8c:	f7fe ff3a 	bl	8000e04 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e1c1      	b.n	8002322 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f9e:	4b32      	ldr	r3, [pc, #200]	; (8002068 <HAL_RCC_OscConfig+0x57c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d0f0      	beq.n	8001f8c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d108      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x4d8>
 8001fb2:	4b2c      	ldr	r3, [pc, #176]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb8:	4a2a      	ldr	r2, [pc, #168]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001fba:	f043 0301 	orr.w	r3, r3, #1
 8001fbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fc2:	e024      	b.n	800200e <HAL_RCC_OscConfig+0x522>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	2b05      	cmp	r3, #5
 8001fca:	d110      	bne.n	8001fee <HAL_RCC_OscConfig+0x502>
 8001fcc:	4b25      	ldr	r3, [pc, #148]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd2:	4a24      	ldr	r2, [pc, #144]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001fd4:	f043 0304 	orr.w	r3, r3, #4
 8001fd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fdc:	4b21      	ldr	r3, [pc, #132]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe2:	4a20      	ldr	r2, [pc, #128]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fec:	e00f      	b.n	800200e <HAL_RCC_OscConfig+0x522>
 8001fee:	4b1d      	ldr	r3, [pc, #116]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff4:	4a1b      	ldr	r2, [pc, #108]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001ff6:	f023 0301 	bic.w	r3, r3, #1
 8001ffa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ffe:	4b19      	ldr	r3, [pc, #100]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8002000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002004:	4a17      	ldr	r2, [pc, #92]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8002006:	f023 0304 	bic.w	r3, r3, #4
 800200a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d016      	beq.n	8002044 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002016:	f7fe fef5 	bl	8000e04 <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800201c:	e00a      	b.n	8002034 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800201e:	f7fe fef1 	bl	8000e04 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	f241 3288 	movw	r2, #5000	; 0x1388
 800202c:	4293      	cmp	r3, r2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e176      	b.n	8002322 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002034:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8002036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d0ed      	beq.n	800201e <HAL_RCC_OscConfig+0x532>
 8002042:	e01a      	b.n	800207a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002044:	f7fe fede 	bl	8000e04 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800204a:	e00f      	b.n	800206c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800204c:	f7fe feda 	bl	8000e04 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	f241 3288 	movw	r2, #5000	; 0x1388
 800205a:	4293      	cmp	r3, r2
 800205c:	d906      	bls.n	800206c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e15f      	b.n	8002322 <HAL_RCC_OscConfig+0x836>
 8002062:	bf00      	nop
 8002064:	40021000 	.word	0x40021000
 8002068:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800206c:	4baa      	ldr	r3, [pc, #680]	; (8002318 <HAL_RCC_OscConfig+0x82c>)
 800206e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1e8      	bne.n	800204c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800207a:	7ffb      	ldrb	r3, [r7, #31]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d105      	bne.n	800208c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002080:	4ba5      	ldr	r3, [pc, #660]	; (8002318 <HAL_RCC_OscConfig+0x82c>)
 8002082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002084:	4aa4      	ldr	r2, [pc, #656]	; (8002318 <HAL_RCC_OscConfig+0x82c>)
 8002086:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800208a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0320 	and.w	r3, r3, #32
 8002094:	2b00      	cmp	r3, #0
 8002096:	d03c      	beq.n	8002112 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209c:	2b00      	cmp	r3, #0
 800209e:	d01c      	beq.n	80020da <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020a0:	4b9d      	ldr	r3, [pc, #628]	; (8002318 <HAL_RCC_OscConfig+0x82c>)
 80020a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020a6:	4a9c      	ldr	r2, [pc, #624]	; (8002318 <HAL_RCC_OscConfig+0x82c>)
 80020a8:	f043 0301 	orr.w	r3, r3, #1
 80020ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b0:	f7fe fea8 	bl	8000e04 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020b8:	f7fe fea4 	bl	8000e04 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e12b      	b.n	8002322 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020ca:	4b93      	ldr	r3, [pc, #588]	; (8002318 <HAL_RCC_OscConfig+0x82c>)
 80020cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d0ef      	beq.n	80020b8 <HAL_RCC_OscConfig+0x5cc>
 80020d8:	e01b      	b.n	8002112 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020da:	4b8f      	ldr	r3, [pc, #572]	; (8002318 <HAL_RCC_OscConfig+0x82c>)
 80020dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020e0:	4a8d      	ldr	r2, [pc, #564]	; (8002318 <HAL_RCC_OscConfig+0x82c>)
 80020e2:	f023 0301 	bic.w	r3, r3, #1
 80020e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ea:	f7fe fe8b 	bl	8000e04 <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020f2:	f7fe fe87 	bl	8000e04 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e10e      	b.n	8002322 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002104:	4b84      	ldr	r3, [pc, #528]	; (8002318 <HAL_RCC_OscConfig+0x82c>)
 8002106:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1ef      	bne.n	80020f2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002116:	2b00      	cmp	r3, #0
 8002118:	f000 8102 	beq.w	8002320 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002120:	2b02      	cmp	r3, #2
 8002122:	f040 80c5 	bne.w	80022b0 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002126:	4b7c      	ldr	r3, [pc, #496]	; (8002318 <HAL_RCC_OscConfig+0x82c>)
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	f003 0203 	and.w	r2, r3, #3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002136:	429a      	cmp	r2, r3
 8002138:	d12c      	bne.n	8002194 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002144:	3b01      	subs	r3, #1
 8002146:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002148:	429a      	cmp	r2, r3
 800214a:	d123      	bne.n	8002194 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002156:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002158:	429a      	cmp	r2, r3
 800215a:	d11b      	bne.n	8002194 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002166:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002168:	429a      	cmp	r2, r3
 800216a:	d113      	bne.n	8002194 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002176:	085b      	lsrs	r3, r3, #1
 8002178:	3b01      	subs	r3, #1
 800217a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800217c:	429a      	cmp	r2, r3
 800217e:	d109      	bne.n	8002194 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	085b      	lsrs	r3, r3, #1
 800218c:	3b01      	subs	r3, #1
 800218e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002190:	429a      	cmp	r2, r3
 8002192:	d067      	beq.n	8002264 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	2b0c      	cmp	r3, #12
 8002198:	d062      	beq.n	8002260 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800219a:	4b5f      	ldr	r3, [pc, #380]	; (8002318 <HAL_RCC_OscConfig+0x82c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e0bb      	b.n	8002322 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80021aa:	4b5b      	ldr	r3, [pc, #364]	; (8002318 <HAL_RCC_OscConfig+0x82c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a5a      	ldr	r2, [pc, #360]	; (8002318 <HAL_RCC_OscConfig+0x82c>)
 80021b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021b4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021b6:	f7fe fe25 	bl	8000e04 <HAL_GetTick>
 80021ba:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021bc:	e008      	b.n	80021d0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021be:	f7fe fe21 	bl	8000e04 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e0a8      	b.n	8002322 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021d0:	4b51      	ldr	r3, [pc, #324]	; (8002318 <HAL_RCC_OscConfig+0x82c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1f0      	bne.n	80021be <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021dc:	4b4e      	ldr	r3, [pc, #312]	; (8002318 <HAL_RCC_OscConfig+0x82c>)
 80021de:	68da      	ldr	r2, [r3, #12]
 80021e0:	4b4e      	ldr	r3, [pc, #312]	; (800231c <HAL_RCC_OscConfig+0x830>)
 80021e2:	4013      	ands	r3, r2
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80021ec:	3a01      	subs	r2, #1
 80021ee:	0112      	lsls	r2, r2, #4
 80021f0:	4311      	orrs	r1, r2
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021f6:	0212      	lsls	r2, r2, #8
 80021f8:	4311      	orrs	r1, r2
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80021fe:	0852      	lsrs	r2, r2, #1
 8002200:	3a01      	subs	r2, #1
 8002202:	0552      	lsls	r2, r2, #21
 8002204:	4311      	orrs	r1, r2
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800220a:	0852      	lsrs	r2, r2, #1
 800220c:	3a01      	subs	r2, #1
 800220e:	0652      	lsls	r2, r2, #25
 8002210:	4311      	orrs	r1, r2
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002216:	06d2      	lsls	r2, r2, #27
 8002218:	430a      	orrs	r2, r1
 800221a:	493f      	ldr	r1, [pc, #252]	; (8002318 <HAL_RCC_OscConfig+0x82c>)
 800221c:	4313      	orrs	r3, r2
 800221e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002220:	4b3d      	ldr	r3, [pc, #244]	; (8002318 <HAL_RCC_OscConfig+0x82c>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a3c      	ldr	r2, [pc, #240]	; (8002318 <HAL_RCC_OscConfig+0x82c>)
 8002226:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800222a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800222c:	4b3a      	ldr	r3, [pc, #232]	; (8002318 <HAL_RCC_OscConfig+0x82c>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	4a39      	ldr	r2, [pc, #228]	; (8002318 <HAL_RCC_OscConfig+0x82c>)
 8002232:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002236:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002238:	f7fe fde4 	bl	8000e04 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002240:	f7fe fde0 	bl	8000e04 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e067      	b.n	8002322 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002252:	4b31      	ldr	r3, [pc, #196]	; (8002318 <HAL_RCC_OscConfig+0x82c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d0f0      	beq.n	8002240 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800225e:	e05f      	b.n	8002320 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e05e      	b.n	8002322 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002264:	4b2c      	ldr	r3, [pc, #176]	; (8002318 <HAL_RCC_OscConfig+0x82c>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d157      	bne.n	8002320 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002270:	4b29      	ldr	r3, [pc, #164]	; (8002318 <HAL_RCC_OscConfig+0x82c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a28      	ldr	r2, [pc, #160]	; (8002318 <HAL_RCC_OscConfig+0x82c>)
 8002276:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800227a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800227c:	4b26      	ldr	r3, [pc, #152]	; (8002318 <HAL_RCC_OscConfig+0x82c>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	4a25      	ldr	r2, [pc, #148]	; (8002318 <HAL_RCC_OscConfig+0x82c>)
 8002282:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002286:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002288:	f7fe fdbc 	bl	8000e04 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002290:	f7fe fdb8 	bl	8000e04 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e03f      	b.n	8002322 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022a2:	4b1d      	ldr	r3, [pc, #116]	; (8002318 <HAL_RCC_OscConfig+0x82c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d0f0      	beq.n	8002290 <HAL_RCC_OscConfig+0x7a4>
 80022ae:	e037      	b.n	8002320 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	2b0c      	cmp	r3, #12
 80022b4:	d02d      	beq.n	8002312 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b6:	4b18      	ldr	r3, [pc, #96]	; (8002318 <HAL_RCC_OscConfig+0x82c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a17      	ldr	r2, [pc, #92]	; (8002318 <HAL_RCC_OscConfig+0x82c>)
 80022bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022c0:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80022c2:	4b15      	ldr	r3, [pc, #84]	; (8002318 <HAL_RCC_OscConfig+0x82c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d105      	bne.n	80022da <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80022ce:	4b12      	ldr	r3, [pc, #72]	; (8002318 <HAL_RCC_OscConfig+0x82c>)
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	4a11      	ldr	r2, [pc, #68]	; (8002318 <HAL_RCC_OscConfig+0x82c>)
 80022d4:	f023 0303 	bic.w	r3, r3, #3
 80022d8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80022da:	4b0f      	ldr	r3, [pc, #60]	; (8002318 <HAL_RCC_OscConfig+0x82c>)
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	4a0e      	ldr	r2, [pc, #56]	; (8002318 <HAL_RCC_OscConfig+0x82c>)
 80022e0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80022e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022e8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ea:	f7fe fd8b 	bl	8000e04 <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022f0:	e008      	b.n	8002304 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f2:	f7fe fd87 	bl	8000e04 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e00e      	b.n	8002322 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002304:	4b04      	ldr	r3, [pc, #16]	; (8002318 <HAL_RCC_OscConfig+0x82c>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1f0      	bne.n	80022f2 <HAL_RCC_OscConfig+0x806>
 8002310:	e006      	b.n	8002320 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e005      	b.n	8002322 <HAL_RCC_OscConfig+0x836>
 8002316:	bf00      	nop
 8002318:	40021000 	.word	0x40021000
 800231c:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3720      	adds	r7, #32
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop

0800232c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e0c8      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002340:	4b66      	ldr	r3, [pc, #408]	; (80024dc <HAL_RCC_ClockConfig+0x1b0>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	429a      	cmp	r2, r3
 800234c:	d910      	bls.n	8002370 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234e:	4b63      	ldr	r3, [pc, #396]	; (80024dc <HAL_RCC_ClockConfig+0x1b0>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f023 0207 	bic.w	r2, r3, #7
 8002356:	4961      	ldr	r1, [pc, #388]	; (80024dc <HAL_RCC_ClockConfig+0x1b0>)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	4313      	orrs	r3, r2
 800235c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800235e:	4b5f      	ldr	r3, [pc, #380]	; (80024dc <HAL_RCC_ClockConfig+0x1b0>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	429a      	cmp	r2, r3
 800236a:	d001      	beq.n	8002370 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e0b0      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	2b00      	cmp	r3, #0
 800237a:	d04c      	beq.n	8002416 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	2b03      	cmp	r3, #3
 8002382:	d107      	bne.n	8002394 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002384:	4b56      	ldr	r3, [pc, #344]	; (80024e0 <HAL_RCC_ClockConfig+0x1b4>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d121      	bne.n	80023d4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e09e      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	2b02      	cmp	r3, #2
 800239a:	d107      	bne.n	80023ac <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800239c:	4b50      	ldr	r3, [pc, #320]	; (80024e0 <HAL_RCC_ClockConfig+0x1b4>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d115      	bne.n	80023d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e092      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d107      	bne.n	80023c4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023b4:	4b4a      	ldr	r3, [pc, #296]	; (80024e0 <HAL_RCC_ClockConfig+0x1b4>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d109      	bne.n	80023d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e086      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023c4:	4b46      	ldr	r3, [pc, #280]	; (80024e0 <HAL_RCC_ClockConfig+0x1b4>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e07e      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023d4:	4b42      	ldr	r3, [pc, #264]	; (80024e0 <HAL_RCC_ClockConfig+0x1b4>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f023 0203 	bic.w	r2, r3, #3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	493f      	ldr	r1, [pc, #252]	; (80024e0 <HAL_RCC_ClockConfig+0x1b4>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023e6:	f7fe fd0d 	bl	8000e04 <HAL_GetTick>
 80023ea:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ec:	e00a      	b.n	8002404 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ee:	f7fe fd09 	bl	8000e04 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e066      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002404:	4b36      	ldr	r3, [pc, #216]	; (80024e0 <HAL_RCC_ClockConfig+0x1b4>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f003 020c 	and.w	r2, r3, #12
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	429a      	cmp	r2, r3
 8002414:	d1eb      	bne.n	80023ee <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d008      	beq.n	8002434 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002422:	4b2f      	ldr	r3, [pc, #188]	; (80024e0 <HAL_RCC_ClockConfig+0x1b4>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	492c      	ldr	r1, [pc, #176]	; (80024e0 <HAL_RCC_ClockConfig+0x1b4>)
 8002430:	4313      	orrs	r3, r2
 8002432:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002434:	4b29      	ldr	r3, [pc, #164]	; (80024dc <HAL_RCC_ClockConfig+0x1b0>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	429a      	cmp	r2, r3
 8002440:	d210      	bcs.n	8002464 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002442:	4b26      	ldr	r3, [pc, #152]	; (80024dc <HAL_RCC_ClockConfig+0x1b0>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f023 0207 	bic.w	r2, r3, #7
 800244a:	4924      	ldr	r1, [pc, #144]	; (80024dc <HAL_RCC_ClockConfig+0x1b0>)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	4313      	orrs	r3, r2
 8002450:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002452:	4b22      	ldr	r3, [pc, #136]	; (80024dc <HAL_RCC_ClockConfig+0x1b0>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	429a      	cmp	r2, r3
 800245e:	d001      	beq.n	8002464 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e036      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0304 	and.w	r3, r3, #4
 800246c:	2b00      	cmp	r3, #0
 800246e:	d008      	beq.n	8002482 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002470:	4b1b      	ldr	r3, [pc, #108]	; (80024e0 <HAL_RCC_ClockConfig+0x1b4>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	4918      	ldr	r1, [pc, #96]	; (80024e0 <HAL_RCC_ClockConfig+0x1b4>)
 800247e:	4313      	orrs	r3, r2
 8002480:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0308 	and.w	r3, r3, #8
 800248a:	2b00      	cmp	r3, #0
 800248c:	d009      	beq.n	80024a2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800248e:	4b14      	ldr	r3, [pc, #80]	; (80024e0 <HAL_RCC_ClockConfig+0x1b4>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	4910      	ldr	r1, [pc, #64]	; (80024e0 <HAL_RCC_ClockConfig+0x1b4>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024a2:	f000 f825 	bl	80024f0 <HAL_RCC_GetSysClockFreq>
 80024a6:	4601      	mov	r1, r0
 80024a8:	4b0d      	ldr	r3, [pc, #52]	; (80024e0 <HAL_RCC_ClockConfig+0x1b4>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	091b      	lsrs	r3, r3, #4
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	4a0c      	ldr	r2, [pc, #48]	; (80024e4 <HAL_RCC_ClockConfig+0x1b8>)
 80024b4:	5cd3      	ldrb	r3, [r2, r3]
 80024b6:	f003 031f 	and.w	r3, r3, #31
 80024ba:	fa21 f303 	lsr.w	r3, r1, r3
 80024be:	4a0a      	ldr	r2, [pc, #40]	; (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 80024c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80024c2:	4b0a      	ldr	r3, [pc, #40]	; (80024ec <HAL_RCC_ClockConfig+0x1c0>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7fe fb64 	bl	8000b94 <HAL_InitTick>
 80024cc:	4603      	mov	r3, r0
 80024ce:	72fb      	strb	r3, [r7, #11]

  return status;
 80024d0:	7afb      	ldrb	r3, [r7, #11]
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	40022000 	.word	0x40022000
 80024e0:	40021000 	.word	0x40021000
 80024e4:	08006ec0 	.word	0x08006ec0
 80024e8:	20000000 	.word	0x20000000
 80024ec:	20000004 	.word	0x20000004

080024f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b089      	sub	sp, #36	; 0x24
 80024f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	61fb      	str	r3, [r7, #28]
 80024fa:	2300      	movs	r3, #0
 80024fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024fe:	4b3d      	ldr	r3, [pc, #244]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 030c 	and.w	r3, r3, #12
 8002506:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002508:	4b3a      	ldr	r3, [pc, #232]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x104>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	f003 0303 	and.w	r3, r3, #3
 8002510:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d005      	beq.n	8002524 <HAL_RCC_GetSysClockFreq+0x34>
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	2b0c      	cmp	r3, #12
 800251c:	d121      	bne.n	8002562 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d11e      	bne.n	8002562 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002524:	4b33      	ldr	r3, [pc, #204]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0308 	and.w	r3, r3, #8
 800252c:	2b00      	cmp	r3, #0
 800252e:	d107      	bne.n	8002540 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002530:	4b30      	ldr	r3, [pc, #192]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002532:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002536:	0a1b      	lsrs	r3, r3, #8
 8002538:	f003 030f 	and.w	r3, r3, #15
 800253c:	61fb      	str	r3, [r7, #28]
 800253e:	e005      	b.n	800254c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002540:	4b2c      	ldr	r3, [pc, #176]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	091b      	lsrs	r3, r3, #4
 8002546:	f003 030f 	and.w	r3, r3, #15
 800254a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800254c:	4a2a      	ldr	r2, [pc, #168]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002554:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d10d      	bne.n	8002578 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002560:	e00a      	b.n	8002578 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	2b04      	cmp	r3, #4
 8002566:	d102      	bne.n	800256e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002568:	4b24      	ldr	r3, [pc, #144]	; (80025fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800256a:	61bb      	str	r3, [r7, #24]
 800256c:	e004      	b.n	8002578 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	2b08      	cmp	r3, #8
 8002572:	d101      	bne.n	8002578 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002574:	4b21      	ldr	r3, [pc, #132]	; (80025fc <HAL_RCC_GetSysClockFreq+0x10c>)
 8002576:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	2b0c      	cmp	r3, #12
 800257c:	d133      	bne.n	80025e6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800257e:	4b1d      	ldr	r3, [pc, #116]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	f003 0303 	and.w	r3, r3, #3
 8002586:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	2b02      	cmp	r3, #2
 800258c:	d002      	beq.n	8002594 <HAL_RCC_GetSysClockFreq+0xa4>
 800258e:	2b03      	cmp	r3, #3
 8002590:	d003      	beq.n	800259a <HAL_RCC_GetSysClockFreq+0xaa>
 8002592:	e005      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002594:	4b19      	ldr	r3, [pc, #100]	; (80025fc <HAL_RCC_GetSysClockFreq+0x10c>)
 8002596:	617b      	str	r3, [r7, #20]
      break;
 8002598:	e005      	b.n	80025a6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800259a:	4b18      	ldr	r3, [pc, #96]	; (80025fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800259c:	617b      	str	r3, [r7, #20]
      break;
 800259e:	e002      	b.n	80025a6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	617b      	str	r3, [r7, #20]
      break;
 80025a4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025a6:	4b13      	ldr	r3, [pc, #76]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x104>)
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	091b      	lsrs	r3, r3, #4
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	3301      	adds	r3, #1
 80025b2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80025b4:	4b0f      	ldr	r3, [pc, #60]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x104>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	0a1b      	lsrs	r3, r3, #8
 80025ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	fb02 f203 	mul.w	r2, r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ca:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025cc:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x104>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	0e5b      	lsrs	r3, r3, #25
 80025d2:	f003 0303 	and.w	r3, r3, #3
 80025d6:	3301      	adds	r3, #1
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80025dc:	697a      	ldr	r2, [r7, #20]
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80025e6:	69bb      	ldr	r3, [r7, #24]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3724      	adds	r7, #36	; 0x24
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	40021000 	.word	0x40021000
 80025f8:	08006ed8 	.word	0x08006ed8
 80025fc:	00f42400 	.word	0x00f42400

08002600 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002604:	4b03      	ldr	r3, [pc, #12]	; (8002614 <HAL_RCC_GetHCLKFreq+0x14>)
 8002606:	681b      	ldr	r3, [r3, #0]
}
 8002608:	4618      	mov	r0, r3
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	20000000 	.word	0x20000000

08002618 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800261c:	f7ff fff0 	bl	8002600 <HAL_RCC_GetHCLKFreq>
 8002620:	4601      	mov	r1, r0
 8002622:	4b06      	ldr	r3, [pc, #24]	; (800263c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	0a1b      	lsrs	r3, r3, #8
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	4a04      	ldr	r2, [pc, #16]	; (8002640 <HAL_RCC_GetPCLK1Freq+0x28>)
 800262e:	5cd3      	ldrb	r3, [r2, r3]
 8002630:	f003 031f 	and.w	r3, r3, #31
 8002634:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002638:	4618      	mov	r0, r3
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40021000 	.word	0x40021000
 8002640:	08006ed0 	.word	0x08006ed0

08002644 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002648:	f7ff ffda 	bl	8002600 <HAL_RCC_GetHCLKFreq>
 800264c:	4601      	mov	r1, r0
 800264e:	4b06      	ldr	r3, [pc, #24]	; (8002668 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	0adb      	lsrs	r3, r3, #11
 8002654:	f003 0307 	and.w	r3, r3, #7
 8002658:	4a04      	ldr	r2, [pc, #16]	; (800266c <HAL_RCC_GetPCLK2Freq+0x28>)
 800265a:	5cd3      	ldrb	r3, [r2, r3]
 800265c:	f003 031f 	and.w	r3, r3, #31
 8002660:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002664:	4618      	mov	r0, r3
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40021000 	.word	0x40021000
 800266c:	08006ed0 	.word	0x08006ed0

08002670 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	220f      	movs	r2, #15
 800267e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002680:	4b12      	ldr	r3, [pc, #72]	; (80026cc <HAL_RCC_GetClockConfig+0x5c>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f003 0203 	and.w	r2, r3, #3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800268c:	4b0f      	ldr	r3, [pc, #60]	; (80026cc <HAL_RCC_GetClockConfig+0x5c>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002698:	4b0c      	ldr	r3, [pc, #48]	; (80026cc <HAL_RCC_GetClockConfig+0x5c>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80026a4:	4b09      	ldr	r3, [pc, #36]	; (80026cc <HAL_RCC_GetClockConfig+0x5c>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	08db      	lsrs	r3, r3, #3
 80026aa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80026b2:	4b07      	ldr	r3, [pc, #28]	; (80026d0 <HAL_RCC_GetClockConfig+0x60>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0207 	and.w	r2, r3, #7
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	601a      	str	r2, [r3, #0]
}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	40021000 	.word	0x40021000
 80026d0:	40022000 	.word	0x40022000

080026d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80026dc:	2300      	movs	r3, #0
 80026de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80026e0:	4b2a      	ldr	r3, [pc, #168]	; (800278c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d003      	beq.n	80026f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80026ec:	f7ff f99a 	bl	8001a24 <HAL_PWREx_GetVoltageRange>
 80026f0:	6178      	str	r0, [r7, #20]
 80026f2:	e014      	b.n	800271e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80026f4:	4b25      	ldr	r3, [pc, #148]	; (800278c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f8:	4a24      	ldr	r2, [pc, #144]	; (800278c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026fe:	6593      	str	r3, [r2, #88]	; 0x58
 8002700:	4b22      	ldr	r3, [pc, #136]	; (800278c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800270c:	f7ff f98a 	bl	8001a24 <HAL_PWREx_GetVoltageRange>
 8002710:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002712:	4b1e      	ldr	r3, [pc, #120]	; (800278c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002716:	4a1d      	ldr	r2, [pc, #116]	; (800278c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002718:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800271c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002724:	d10b      	bne.n	800273e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2b80      	cmp	r3, #128	; 0x80
 800272a:	d919      	bls.n	8002760 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2ba0      	cmp	r3, #160	; 0xa0
 8002730:	d902      	bls.n	8002738 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002732:	2302      	movs	r3, #2
 8002734:	613b      	str	r3, [r7, #16]
 8002736:	e013      	b.n	8002760 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002738:	2301      	movs	r3, #1
 800273a:	613b      	str	r3, [r7, #16]
 800273c:	e010      	b.n	8002760 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b80      	cmp	r3, #128	; 0x80
 8002742:	d902      	bls.n	800274a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002744:	2303      	movs	r3, #3
 8002746:	613b      	str	r3, [r7, #16]
 8002748:	e00a      	b.n	8002760 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b80      	cmp	r3, #128	; 0x80
 800274e:	d102      	bne.n	8002756 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002750:	2302      	movs	r3, #2
 8002752:	613b      	str	r3, [r7, #16]
 8002754:	e004      	b.n	8002760 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b70      	cmp	r3, #112	; 0x70
 800275a:	d101      	bne.n	8002760 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800275c:	2301      	movs	r3, #1
 800275e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002760:	4b0b      	ldr	r3, [pc, #44]	; (8002790 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f023 0207 	bic.w	r2, r3, #7
 8002768:	4909      	ldr	r1, [pc, #36]	; (8002790 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4313      	orrs	r3, r2
 800276e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002770:	4b07      	ldr	r3, [pc, #28]	; (8002790 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0307 	and.w	r3, r3, #7
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	429a      	cmp	r2, r3
 800277c:	d001      	beq.n	8002782 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e000      	b.n	8002784 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3718      	adds	r7, #24
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40021000 	.word	0x40021000
 8002790:	40022000 	.word	0x40022000

08002794 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800279c:	2300      	movs	r3, #0
 800279e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027a0:	2300      	movs	r3, #0
 80027a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d02f      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027b8:	d005      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80027ba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80027be:	d015      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x58>
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d007      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80027c4:	e00f      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80027c6:	4bac      	ldr	r3, [pc, #688]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	4aab      	ldr	r2, [pc, #684]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80027cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027d2:	e00c      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3304      	adds	r3, #4
 80027d8:	2100      	movs	r1, #0
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 f9dc 	bl	8002b98 <RCCEx_PLLSAI1_Config>
 80027e0:	4603      	mov	r3, r0
 80027e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027e4:	e003      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	74fb      	strb	r3, [r7, #19]
      break;
 80027ea:	e000      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 80027ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027ee:	7cfb      	ldrb	r3, [r7, #19]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10b      	bne.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027f4:	4ba0      	ldr	r3, [pc, #640]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80027f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002802:	499d      	ldr	r1, [pc, #628]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002804:	4313      	orrs	r3, r2
 8002806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800280a:	e001      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800280c:	7cfb      	ldrb	r3, [r7, #19]
 800280e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 8099 	beq.w	8002950 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 800281e:	2300      	movs	r3, #0
 8002820:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002822:	4b95      	ldr	r3, [pc, #596]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800282e:	2301      	movs	r3, #1
 8002830:	e000      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002832:	2300      	movs	r3, #0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00d      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002838:	4b8f      	ldr	r3, [pc, #572]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800283a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283c:	4a8e      	ldr	r2, [pc, #568]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800283e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002842:	6593      	str	r3, [r2, #88]	; 0x58
 8002844:	4b8c      	ldr	r3, [pc, #560]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284c:	60bb      	str	r3, [r7, #8]
 800284e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002850:	2301      	movs	r3, #1
 8002852:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002854:	4b89      	ldr	r3, [pc, #548]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a88      	ldr	r2, [pc, #544]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800285a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800285e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002860:	f7fe fad0 	bl	8000e04 <HAL_GetTick>
 8002864:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002866:	e009      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002868:	f7fe facc 	bl	8000e04 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d902      	bls.n	800287c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	74fb      	strb	r3, [r7, #19]
        break;
 800287a:	e005      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800287c:	4b7f      	ldr	r3, [pc, #508]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002884:	2b00      	cmp	r3, #0
 8002886:	d0ef      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8002888:	7cfb      	ldrb	r3, [r7, #19]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d155      	bne.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800288e:	4b7a      	ldr	r3, [pc, #488]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002894:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002898:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d01e      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d019      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028aa:	4b73      	ldr	r3, [pc, #460]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80028ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028b4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028b6:	4b70      	ldr	r3, [pc, #448]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80028b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028bc:	4a6e      	ldr	r2, [pc, #440]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80028be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028c6:	4b6c      	ldr	r3, [pc, #432]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80028c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028cc:	4a6a      	ldr	r2, [pc, #424]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80028ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028d6:	4a68      	ldr	r2, [pc, #416]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d016      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e8:	f7fe fa8c 	bl	8000e04 <HAL_GetTick>
 80028ec:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028ee:	e00b      	b.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028f0:	f7fe fa88 	bl	8000e04 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80028fe:	4293      	cmp	r3, r2
 8002900:	d902      	bls.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	74fb      	strb	r3, [r7, #19]
            break;
 8002906:	e006      	b.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002908:	4b5b      	ldr	r3, [pc, #364]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800290a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d0ec      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8002916:	7cfb      	ldrb	r3, [r7, #19]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d10b      	bne.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800291c:	4b56      	ldr	r3, [pc, #344]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800291e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002922:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800292a:	4953      	ldr	r1, [pc, #332]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800292c:	4313      	orrs	r3, r2
 800292e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002932:	e004      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002934:	7cfb      	ldrb	r3, [r7, #19]
 8002936:	74bb      	strb	r3, [r7, #18]
 8002938:	e001      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800293a:	7cfb      	ldrb	r3, [r7, #19]
 800293c:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800293e:	7c7b      	ldrb	r3, [r7, #17]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d105      	bne.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002944:	4b4c      	ldr	r3, [pc, #304]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002948:	4a4b      	ldr	r2, [pc, #300]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800294a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800294e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00a      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800295c:	4b46      	ldr	r3, [pc, #280]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800295e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002962:	f023 0203 	bic.w	r2, r3, #3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	4943      	ldr	r1, [pc, #268]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800296c:	4313      	orrs	r3, r2
 800296e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00a      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800297e:	4b3e      	ldr	r3, [pc, #248]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002984:	f023 020c 	bic.w	r2, r3, #12
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298c:	493a      	ldr	r1, [pc, #232]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800298e:	4313      	orrs	r3, r2
 8002990:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0320 	and.w	r3, r3, #32
 800299c:	2b00      	cmp	r3, #0
 800299e:	d00a      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029a0:	4b35      	ldr	r3, [pc, #212]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80029a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ae:	4932      	ldr	r1, [pc, #200]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00a      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029c2:	4b2d      	ldr	r3, [pc, #180]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80029c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d0:	4929      	ldr	r1, [pc, #164]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00a      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80029e4:	4b24      	ldr	r3, [pc, #144]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80029e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f2:	4921      	ldr	r1, [pc, #132]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00a      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a06:	4b1c      	ldr	r3, [pc, #112]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a14:	4918      	ldr	r1, [pc, #96]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00a      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a28:	4b13      	ldr	r3, [pc, #76]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a36:	4910      	ldr	r1, [pc, #64]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d02c      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a4a:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a50:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a58:	4907      	ldr	r1, [pc, #28]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a68:	d10a      	bne.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a6a:	4b03      	ldr	r3, [pc, #12]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	4a02      	ldr	r2, [pc, #8]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a74:	60d3      	str	r3, [r2, #12]
 8002a76:	e015      	b.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a88:	d10c      	bne.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	3304      	adds	r3, #4
 8002a8e:	2101      	movs	r1, #1
 8002a90:	4618      	mov	r0, r3
 8002a92:	f000 f881 	bl	8002b98 <RCCEx_PLLSAI1_Config>
 8002a96:	4603      	mov	r3, r0
 8002a98:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002a9a:	7cfb      	ldrb	r3, [r7, #19]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8002aa0:	7cfb      	ldrb	r3, [r7, #19]
 8002aa2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d028      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ab0:	4b30      	ldr	r3, [pc, #192]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002abe:	492d      	ldr	r1, [pc, #180]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ace:	d106      	bne.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ad0:	4b28      	ldr	r3, [pc, #160]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	4a27      	ldr	r2, [pc, #156]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ad6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ada:	60d3      	str	r3, [r2, #12]
 8002adc:	e011      	b.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ae6:	d10c      	bne.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	3304      	adds	r3, #4
 8002aec:	2101      	movs	r1, #1
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 f852 	bl	8002b98 <RCCEx_PLLSAI1_Config>
 8002af4:	4603      	mov	r3, r0
 8002af6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002af8:	7cfb      	ldrb	r3, [r7, #19]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 8002afe:	7cfb      	ldrb	r3, [r7, #19]
 8002b00:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d01c      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b0e:	4b19      	ldr	r3, [pc, #100]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b14:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b1c:	4915      	ldr	r1, [pc, #84]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b2c:	d10c      	bne.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	3304      	adds	r3, #4
 8002b32:	2102      	movs	r1, #2
 8002b34:	4618      	mov	r0, r3
 8002b36:	f000 f82f 	bl	8002b98 <RCCEx_PLLSAI1_Config>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b3e:	7cfb      	ldrb	r3, [r7, #19]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8002b44:	7cfb      	ldrb	r3, [r7, #19]
 8002b46:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d00a      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002b54:	4b07      	ldr	r3, [pc, #28]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b5a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b62:	4904      	ldr	r1, [pc, #16]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b6a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	40021000 	.word	0x40021000

08002b78 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002b7c:	4b05      	ldr	r3, [pc, #20]	; (8002b94 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a04      	ldr	r2, [pc, #16]	; (8002b94 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002b82:	f043 0304 	orr.w	r3, r3, #4
 8002b86:	6013      	str	r3, [r2, #0]
}
 8002b88:	bf00      	nop
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	40021000 	.word	0x40021000

08002b98 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ba6:	4b73      	ldr	r3, [pc, #460]	; (8002d74 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	f003 0303 	and.w	r3, r3, #3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d018      	beq.n	8002be4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002bb2:	4b70      	ldr	r3, [pc, #448]	; (8002d74 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	f003 0203 	and.w	r2, r3, #3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d10d      	bne.n	8002bde <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
       ||
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d009      	beq.n	8002bde <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002bca:	4b6a      	ldr	r3, [pc, #424]	; (8002d74 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	091b      	lsrs	r3, r3, #4
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	1c5a      	adds	r2, r3, #1
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
       ||
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d044      	beq.n	8002c68 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	73fb      	strb	r3, [r7, #15]
 8002be2:	e041      	b.n	8002c68 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d00c      	beq.n	8002c06 <RCCEx_PLLSAI1_Config+0x6e>
 8002bec:	2b03      	cmp	r3, #3
 8002bee:	d013      	beq.n	8002c18 <RCCEx_PLLSAI1_Config+0x80>
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d120      	bne.n	8002c36 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002bf4:	4b5f      	ldr	r3, [pc, #380]	; (8002d74 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d11d      	bne.n	8002c3c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c04:	e01a      	b.n	8002c3c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c06:	4b5b      	ldr	r3, [pc, #364]	; (8002d74 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d116      	bne.n	8002c40 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c16:	e013      	b.n	8002c40 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c18:	4b56      	ldr	r3, [pc, #344]	; (8002d74 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d10f      	bne.n	8002c44 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c24:	4b53      	ldr	r3, [pc, #332]	; (8002d74 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d109      	bne.n	8002c44 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c34:	e006      	b.n	8002c44 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	73fb      	strb	r3, [r7, #15]
      break;
 8002c3a:	e004      	b.n	8002c46 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002c3c:	bf00      	nop
 8002c3e:	e002      	b.n	8002c46 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002c40:	bf00      	nop
 8002c42:	e000      	b.n	8002c46 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002c44:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c46:	7bfb      	ldrb	r3, [r7, #15]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10d      	bne.n	8002c68 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c4c:	4b49      	ldr	r3, [pc, #292]	; (8002d74 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6819      	ldr	r1, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	011b      	lsls	r3, r3, #4
 8002c60:	430b      	orrs	r3, r1
 8002c62:	4944      	ldr	r1, [pc, #272]	; (8002d74 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c68:	7bfb      	ldrb	r3, [r7, #15]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d17c      	bne.n	8002d68 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c6e:	4b41      	ldr	r3, [pc, #260]	; (8002d74 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a40      	ldr	r2, [pc, #256]	; (8002d74 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c74:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c7a:	f7fe f8c3 	bl	8000e04 <HAL_GetTick>
 8002c7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c80:	e009      	b.n	8002c96 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c82:	f7fe f8bf 	bl	8000e04 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d902      	bls.n	8002c96 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	73fb      	strb	r3, [r7, #15]
        break;
 8002c94:	e005      	b.n	8002ca2 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c96:	4b37      	ldr	r3, [pc, #220]	; (8002d74 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1ef      	bne.n	8002c82 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002ca2:	7bfb      	ldrb	r3, [r7, #15]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d15f      	bne.n	8002d68 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d110      	bne.n	8002cd0 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cae:	4b31      	ldr	r3, [pc, #196]	; (8002d74 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002cb6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	6892      	ldr	r2, [r2, #8]
 8002cbe:	0211      	lsls	r1, r2, #8
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	68d2      	ldr	r2, [r2, #12]
 8002cc4:	06d2      	lsls	r2, r2, #27
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	492a      	ldr	r1, [pc, #168]	; (8002d74 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	610b      	str	r3, [r1, #16]
 8002cce:	e027      	b.n	8002d20 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d112      	bne.n	8002cfc <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cd6:	4b27      	ldr	r3, [pc, #156]	; (8002d74 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002cde:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	6892      	ldr	r2, [r2, #8]
 8002ce6:	0211      	lsls	r1, r2, #8
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	6912      	ldr	r2, [r2, #16]
 8002cec:	0852      	lsrs	r2, r2, #1
 8002cee:	3a01      	subs	r2, #1
 8002cf0:	0552      	lsls	r2, r2, #21
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	491f      	ldr	r1, [pc, #124]	; (8002d74 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	610b      	str	r3, [r1, #16]
 8002cfa:	e011      	b.n	8002d20 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cfc:	4b1d      	ldr	r3, [pc, #116]	; (8002d74 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d04:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	6892      	ldr	r2, [r2, #8]
 8002d0c:	0211      	lsls	r1, r2, #8
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	6952      	ldr	r2, [r2, #20]
 8002d12:	0852      	lsrs	r2, r2, #1
 8002d14:	3a01      	subs	r2, #1
 8002d16:	0652      	lsls	r2, r2, #25
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	4916      	ldr	r1, [pc, #88]	; (8002d74 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d20:	4b14      	ldr	r3, [pc, #80]	; (8002d74 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a13      	ldr	r2, [pc, #76]	; (8002d74 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d2a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d2c:	f7fe f86a 	bl	8000e04 <HAL_GetTick>
 8002d30:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d32:	e009      	b.n	8002d48 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d34:	f7fe f866 	bl	8000e04 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d902      	bls.n	8002d48 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	73fb      	strb	r3, [r7, #15]
          break;
 8002d46:	e005      	b.n	8002d54 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d48:	4b0a      	ldr	r3, [pc, #40]	; (8002d74 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d0ef      	beq.n	8002d34 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8002d54:	7bfb      	ldrb	r3, [r7, #15]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d106      	bne.n	8002d68 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d5a:	4b06      	ldr	r3, [pc, #24]	; (8002d74 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d5c:	691a      	ldr	r2, [r3, #16]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	4904      	ldr	r1, [pc, #16]	; (8002d74 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	40021000 	.word	0x40021000

08002d78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e049      	b.n	8002e1e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d106      	bne.n	8002da4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f841 	bl	8002e26 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2202      	movs	r2, #2
 8002da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	3304      	adds	r3, #4
 8002db4:	4619      	mov	r1, r3
 8002db6:	4610      	mov	r0, r2
 8002db8:	f000 f9dc 	bl	8003174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002e26:	b480      	push	{r7}
 8002e28:	b083      	sub	sp, #12
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
	...

08002e3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d001      	beq.n	8002e54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e03b      	b.n	8002ecc <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2202      	movs	r2, #2
 8002e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68da      	ldr	r2, [r3, #12]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f042 0201 	orr.w	r2, r2, #1
 8002e6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a19      	ldr	r2, [pc, #100]	; (8002ed8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d009      	beq.n	8002e8a <HAL_TIM_Base_Start_IT+0x4e>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e7e:	d004      	beq.n	8002e8a <HAL_TIM_Base_Start_IT+0x4e>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a15      	ldr	r2, [pc, #84]	; (8002edc <HAL_TIM_Base_Start_IT+0xa0>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d115      	bne.n	8002eb6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	4b13      	ldr	r3, [pc, #76]	; (8002ee0 <HAL_TIM_Base_Start_IT+0xa4>)
 8002e92:	4013      	ands	r3, r2
 8002e94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2b06      	cmp	r3, #6
 8002e9a:	d015      	beq.n	8002ec8 <HAL_TIM_Base_Start_IT+0x8c>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ea2:	d011      	beq.n	8002ec8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f042 0201 	orr.w	r2, r2, #1
 8002eb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eb4:	e008      	b.n	8002ec8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f042 0201 	orr.w	r2, r2, #1
 8002ec4:	601a      	str	r2, [r3, #0]
 8002ec6:	e000      	b.n	8002eca <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ec8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	40012c00 	.word	0x40012c00
 8002edc:	40014000 	.word	0x40014000
 8002ee0:	00010007 	.word	0x00010007

08002ee4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d122      	bne.n	8002f40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d11b      	bne.n	8002f40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f06f 0202 	mvn.w	r2, #2
 8002f10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2201      	movs	r2, #1
 8002f16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	f003 0303 	and.w	r3, r3, #3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 f905 	bl	8003136 <HAL_TIM_IC_CaptureCallback>
 8002f2c:	e005      	b.n	8002f3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 f8f7 	bl	8003122 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f000 f908 	bl	800314a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	f003 0304 	and.w	r3, r3, #4
 8002f4a:	2b04      	cmp	r3, #4
 8002f4c:	d122      	bne.n	8002f94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	f003 0304 	and.w	r3, r3, #4
 8002f58:	2b04      	cmp	r3, #4
 8002f5a:	d11b      	bne.n	8002f94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f06f 0204 	mvn.w	r2, #4
 8002f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2202      	movs	r2, #2
 8002f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d003      	beq.n	8002f82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 f8db 	bl	8003136 <HAL_TIM_IC_CaptureCallback>
 8002f80:	e005      	b.n	8002f8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 f8cd 	bl	8003122 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f000 f8de 	bl	800314a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	f003 0308 	and.w	r3, r3, #8
 8002f9e:	2b08      	cmp	r3, #8
 8002fa0:	d122      	bne.n	8002fe8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	f003 0308 	and.w	r3, r3, #8
 8002fac:	2b08      	cmp	r3, #8
 8002fae:	d11b      	bne.n	8002fe8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f06f 0208 	mvn.w	r2, #8
 8002fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2204      	movs	r2, #4
 8002fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	f003 0303 	and.w	r3, r3, #3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f8b1 	bl	8003136 <HAL_TIM_IC_CaptureCallback>
 8002fd4:	e005      	b.n	8002fe2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f8a3 	bl	8003122 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 f8b4 	bl	800314a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	f003 0310 	and.w	r3, r3, #16
 8002ff2:	2b10      	cmp	r3, #16
 8002ff4:	d122      	bne.n	800303c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	f003 0310 	and.w	r3, r3, #16
 8003000:	2b10      	cmp	r3, #16
 8003002:	d11b      	bne.n	800303c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f06f 0210 	mvn.w	r2, #16
 800300c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2208      	movs	r2, #8
 8003012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 f887 	bl	8003136 <HAL_TIM_IC_CaptureCallback>
 8003028:	e005      	b.n	8003036 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f879 	bl	8003122 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 f88a 	bl	800314a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b01      	cmp	r3, #1
 8003048:	d10e      	bne.n	8003068 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	2b01      	cmp	r3, #1
 8003056:	d107      	bne.n	8003068 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f06f 0201 	mvn.w	r2, #1
 8003060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7fd fcd2 	bl	8000a0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003072:	2b80      	cmp	r3, #128	; 0x80
 8003074:	d10e      	bne.n	8003094 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003080:	2b80      	cmp	r3, #128	; 0x80
 8003082:	d107      	bne.n	8003094 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800308c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 f8de 	bl	8003250 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800309e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030a2:	d10e      	bne.n	80030c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ae:	2b80      	cmp	r3, #128	; 0x80
 80030b0:	d107      	bne.n	80030c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80030ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 f8d1 	bl	8003264 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030cc:	2b40      	cmp	r3, #64	; 0x40
 80030ce:	d10e      	bne.n	80030ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030da:	2b40      	cmp	r3, #64	; 0x40
 80030dc:	d107      	bne.n	80030ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 f838 	bl	800315e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	f003 0320 	and.w	r3, r3, #32
 80030f8:	2b20      	cmp	r3, #32
 80030fa:	d10e      	bne.n	800311a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	f003 0320 	and.w	r3, r3, #32
 8003106:	2b20      	cmp	r3, #32
 8003108:	d107      	bne.n	800311a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f06f 0220 	mvn.w	r2, #32
 8003112:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 f891 	bl	800323c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800311a:	bf00      	nop
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003122:	b480      	push	{r7}
 8003124:	b083      	sub	sp, #12
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800312a:	bf00      	nop
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr

08003136 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003136:	b480      	push	{r7}
 8003138:	b083      	sub	sp, #12
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800313e:	bf00      	nop
 8003140:	370c      	adds	r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr

0800314a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800314a:	b480      	push	{r7}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003152:	bf00      	nop
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800315e:	b480      	push	{r7}
 8003160:	b083      	sub	sp, #12
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003166:	bf00      	nop
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
	...

08003174 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a2a      	ldr	r2, [pc, #168]	; (8003230 <TIM_Base_SetConfig+0xbc>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d003      	beq.n	8003194 <TIM_Base_SetConfig+0x20>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003192:	d108      	bne.n	80031a6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800319a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a21      	ldr	r2, [pc, #132]	; (8003230 <TIM_Base_SetConfig+0xbc>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d00b      	beq.n	80031c6 <TIM_Base_SetConfig+0x52>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031b4:	d007      	beq.n	80031c6 <TIM_Base_SetConfig+0x52>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a1e      	ldr	r2, [pc, #120]	; (8003234 <TIM_Base_SetConfig+0xc0>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d003      	beq.n	80031c6 <TIM_Base_SetConfig+0x52>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a1d      	ldr	r2, [pc, #116]	; (8003238 <TIM_Base_SetConfig+0xc4>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d108      	bne.n	80031d8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a0c      	ldr	r2, [pc, #48]	; (8003230 <TIM_Base_SetConfig+0xbc>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d007      	beq.n	8003214 <TIM_Base_SetConfig+0xa0>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a0b      	ldr	r2, [pc, #44]	; (8003234 <TIM_Base_SetConfig+0xc0>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d003      	beq.n	8003214 <TIM_Base_SetConfig+0xa0>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a0a      	ldr	r2, [pc, #40]	; (8003238 <TIM_Base_SetConfig+0xc4>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d103      	bne.n	800321c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	691a      	ldr	r2, [r3, #16]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	615a      	str	r2, [r3, #20]
}
 8003222:	bf00      	nop
 8003224:	3714      	adds	r7, #20
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	40012c00 	.word	0x40012c00
 8003234:	40014000 	.word	0x40014000
 8003238:	40014400 	.word	0x40014400

0800323c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003258:	bf00      	nop
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e040      	b.n	800330c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800328e:	2b00      	cmp	r3, #0
 8003290:	d106      	bne.n	80032a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7fd fc38 	bl	8000b10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2224      	movs	r2, #36	; 0x24
 80032a4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 0201 	bic.w	r2, r2, #1
 80032b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f8c0 	bl	800343c <UART_SetConfig>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d101      	bne.n	80032c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e022      	b.n	800330c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d002      	beq.n	80032d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 fac4 	bl	800385c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	685a      	ldr	r2, [r3, #4]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689a      	ldr	r2, [r3, #8]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f042 0201 	orr.w	r2, r2, #1
 8003302:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 fb4b 	bl	80039a0 <UART_CheckIdleState>
 800330a:	4603      	mov	r3, r0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b08a      	sub	sp, #40	; 0x28
 8003318:	af02      	add	r7, sp, #8
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	603b      	str	r3, [r7, #0]
 8003320:	4613      	mov	r3, r2
 8003322:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003328:	2b20      	cmp	r3, #32
 800332a:	f040 8081 	bne.w	8003430 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d002      	beq.n	800333a <HAL_UART_Transmit+0x26>
 8003334:	88fb      	ldrh	r3, [r7, #6]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e079      	b.n	8003432 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003344:	2b01      	cmp	r3, #1
 8003346:	d101      	bne.n	800334c <HAL_UART_Transmit+0x38>
 8003348:	2302      	movs	r3, #2
 800334a:	e072      	b.n	8003432 <HAL_UART_Transmit+0x11e>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2221      	movs	r2, #33	; 0x21
 800335e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003360:	f7fd fd50 	bl	8000e04 <HAL_GetTick>
 8003364:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	88fa      	ldrh	r2, [r7, #6]
 800336a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	88fa      	ldrh	r2, [r7, #6]
 8003372:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800337e:	d108      	bne.n	8003392 <HAL_UART_Transmit+0x7e>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d104      	bne.n	8003392 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003388:	2300      	movs	r3, #0
 800338a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	61bb      	str	r3, [r7, #24]
 8003390:	e003      	b.n	800339a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003396:	2300      	movs	r3, #0
 8003398:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80033a2:	e02d      	b.n	8003400 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	9300      	str	r3, [sp, #0]
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	2200      	movs	r2, #0
 80033ac:	2180      	movs	r1, #128	; 0x80
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f000 fb3b 	bl	8003a2a <UART_WaitOnFlagUntilTimeout>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e039      	b.n	8003432 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d10b      	bne.n	80033dc <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	881a      	ldrh	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033d0:	b292      	uxth	r2, r2
 80033d2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	3302      	adds	r3, #2
 80033d8:	61bb      	str	r3, [r7, #24]
 80033da:	e008      	b.n	80033ee <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	781a      	ldrb	r2, [r3, #0]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	b292      	uxth	r2, r2
 80033e6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	3301      	adds	r3, #1
 80033ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	3b01      	subs	r3, #1
 80033f8:	b29a      	uxth	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003406:	b29b      	uxth	r3, r3
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1cb      	bne.n	80033a4 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	2200      	movs	r2, #0
 8003414:	2140      	movs	r1, #64	; 0x40
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 fb07 	bl	8003a2a <UART_WaitOnFlagUntilTimeout>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e005      	b.n	8003432 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2220      	movs	r2, #32
 800342a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800342c:	2300      	movs	r3, #0
 800342e:	e000      	b.n	8003432 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003430:	2302      	movs	r3, #2
  }
}
 8003432:	4618      	mov	r0, r3
 8003434:	3720      	adds	r7, #32
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
	...

0800343c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800343c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003440:	b088      	sub	sp, #32
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003446:	2300      	movs	r3, #0
 8003448:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689a      	ldr	r2, [r3, #8]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	431a      	orrs	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	431a      	orrs	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	4313      	orrs	r3, r2
 8003460:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	4bb0      	ldr	r3, [pc, #704]	; (800372c <UART_SetConfig+0x2f0>)
 800346a:	4013      	ands	r3, r2
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	6812      	ldr	r2, [r2, #0]
 8003470:	69f9      	ldr	r1, [r7, #28]
 8003472:	430b      	orrs	r3, r1
 8003474:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68da      	ldr	r2, [r3, #12]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	430a      	orrs	r2, r1
 800348a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4aa6      	ldr	r2, [pc, #664]	; (8003730 <UART_SetConfig+0x2f4>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d004      	beq.n	80034a6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	69fa      	ldr	r2, [r7, #28]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	69fa      	ldr	r2, [r7, #28]
 80034b6:	430a      	orrs	r2, r1
 80034b8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a9d      	ldr	r2, [pc, #628]	; (8003734 <UART_SetConfig+0x2f8>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d121      	bne.n	8003508 <UART_SetConfig+0xcc>
 80034c4:	4b9c      	ldr	r3, [pc, #624]	; (8003738 <UART_SetConfig+0x2fc>)
 80034c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ca:	f003 0303 	and.w	r3, r3, #3
 80034ce:	2b03      	cmp	r3, #3
 80034d0:	d816      	bhi.n	8003500 <UART_SetConfig+0xc4>
 80034d2:	a201      	add	r2, pc, #4	; (adr r2, 80034d8 <UART_SetConfig+0x9c>)
 80034d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d8:	080034e9 	.word	0x080034e9
 80034dc:	080034f5 	.word	0x080034f5
 80034e0:	080034ef 	.word	0x080034ef
 80034e4:	080034fb 	.word	0x080034fb
 80034e8:	2301      	movs	r3, #1
 80034ea:	76fb      	strb	r3, [r7, #27]
 80034ec:	e072      	b.n	80035d4 <UART_SetConfig+0x198>
 80034ee:	2302      	movs	r3, #2
 80034f0:	76fb      	strb	r3, [r7, #27]
 80034f2:	e06f      	b.n	80035d4 <UART_SetConfig+0x198>
 80034f4:	2304      	movs	r3, #4
 80034f6:	76fb      	strb	r3, [r7, #27]
 80034f8:	e06c      	b.n	80035d4 <UART_SetConfig+0x198>
 80034fa:	2308      	movs	r3, #8
 80034fc:	76fb      	strb	r3, [r7, #27]
 80034fe:	e069      	b.n	80035d4 <UART_SetConfig+0x198>
 8003500:	2310      	movs	r3, #16
 8003502:	76fb      	strb	r3, [r7, #27]
 8003504:	bf00      	nop
 8003506:	e065      	b.n	80035d4 <UART_SetConfig+0x198>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a8b      	ldr	r2, [pc, #556]	; (800373c <UART_SetConfig+0x300>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d134      	bne.n	800357c <UART_SetConfig+0x140>
 8003512:	4b89      	ldr	r3, [pc, #548]	; (8003738 <UART_SetConfig+0x2fc>)
 8003514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003518:	f003 030c 	and.w	r3, r3, #12
 800351c:	2b0c      	cmp	r3, #12
 800351e:	d829      	bhi.n	8003574 <UART_SetConfig+0x138>
 8003520:	a201      	add	r2, pc, #4	; (adr r2, 8003528 <UART_SetConfig+0xec>)
 8003522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003526:	bf00      	nop
 8003528:	0800355d 	.word	0x0800355d
 800352c:	08003575 	.word	0x08003575
 8003530:	08003575 	.word	0x08003575
 8003534:	08003575 	.word	0x08003575
 8003538:	08003569 	.word	0x08003569
 800353c:	08003575 	.word	0x08003575
 8003540:	08003575 	.word	0x08003575
 8003544:	08003575 	.word	0x08003575
 8003548:	08003563 	.word	0x08003563
 800354c:	08003575 	.word	0x08003575
 8003550:	08003575 	.word	0x08003575
 8003554:	08003575 	.word	0x08003575
 8003558:	0800356f 	.word	0x0800356f
 800355c:	2300      	movs	r3, #0
 800355e:	76fb      	strb	r3, [r7, #27]
 8003560:	e038      	b.n	80035d4 <UART_SetConfig+0x198>
 8003562:	2302      	movs	r3, #2
 8003564:	76fb      	strb	r3, [r7, #27]
 8003566:	e035      	b.n	80035d4 <UART_SetConfig+0x198>
 8003568:	2304      	movs	r3, #4
 800356a:	76fb      	strb	r3, [r7, #27]
 800356c:	e032      	b.n	80035d4 <UART_SetConfig+0x198>
 800356e:	2308      	movs	r3, #8
 8003570:	76fb      	strb	r3, [r7, #27]
 8003572:	e02f      	b.n	80035d4 <UART_SetConfig+0x198>
 8003574:	2310      	movs	r3, #16
 8003576:	76fb      	strb	r3, [r7, #27]
 8003578:	bf00      	nop
 800357a:	e02b      	b.n	80035d4 <UART_SetConfig+0x198>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a6b      	ldr	r2, [pc, #428]	; (8003730 <UART_SetConfig+0x2f4>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d124      	bne.n	80035d0 <UART_SetConfig+0x194>
 8003586:	4b6c      	ldr	r3, [pc, #432]	; (8003738 <UART_SetConfig+0x2fc>)
 8003588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800358c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003590:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003594:	d012      	beq.n	80035bc <UART_SetConfig+0x180>
 8003596:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800359a:	d802      	bhi.n	80035a2 <UART_SetConfig+0x166>
 800359c:	2b00      	cmp	r3, #0
 800359e:	d007      	beq.n	80035b0 <UART_SetConfig+0x174>
 80035a0:	e012      	b.n	80035c8 <UART_SetConfig+0x18c>
 80035a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035a6:	d006      	beq.n	80035b6 <UART_SetConfig+0x17a>
 80035a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035ac:	d009      	beq.n	80035c2 <UART_SetConfig+0x186>
 80035ae:	e00b      	b.n	80035c8 <UART_SetConfig+0x18c>
 80035b0:	2300      	movs	r3, #0
 80035b2:	76fb      	strb	r3, [r7, #27]
 80035b4:	e00e      	b.n	80035d4 <UART_SetConfig+0x198>
 80035b6:	2302      	movs	r3, #2
 80035b8:	76fb      	strb	r3, [r7, #27]
 80035ba:	e00b      	b.n	80035d4 <UART_SetConfig+0x198>
 80035bc:	2304      	movs	r3, #4
 80035be:	76fb      	strb	r3, [r7, #27]
 80035c0:	e008      	b.n	80035d4 <UART_SetConfig+0x198>
 80035c2:	2308      	movs	r3, #8
 80035c4:	76fb      	strb	r3, [r7, #27]
 80035c6:	e005      	b.n	80035d4 <UART_SetConfig+0x198>
 80035c8:	2310      	movs	r3, #16
 80035ca:	76fb      	strb	r3, [r7, #27]
 80035cc:	bf00      	nop
 80035ce:	e001      	b.n	80035d4 <UART_SetConfig+0x198>
 80035d0:	2310      	movs	r3, #16
 80035d2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a55      	ldr	r2, [pc, #340]	; (8003730 <UART_SetConfig+0x2f4>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d174      	bne.n	80036c8 <UART_SetConfig+0x28c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80035de:	7efb      	ldrb	r3, [r7, #27]
 80035e0:	2b08      	cmp	r3, #8
 80035e2:	d824      	bhi.n	800362e <UART_SetConfig+0x1f2>
 80035e4:	a201      	add	r2, pc, #4	; (adr r2, 80035ec <UART_SetConfig+0x1b0>)
 80035e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ea:	bf00      	nop
 80035ec:	08003611 	.word	0x08003611
 80035f0:	0800362f 	.word	0x0800362f
 80035f4:	08003619 	.word	0x08003619
 80035f8:	0800362f 	.word	0x0800362f
 80035fc:	0800361f 	.word	0x0800361f
 8003600:	0800362f 	.word	0x0800362f
 8003604:	0800362f 	.word	0x0800362f
 8003608:	0800362f 	.word	0x0800362f
 800360c:	08003627 	.word	0x08003627
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003610:	f7ff f802 	bl	8002618 <HAL_RCC_GetPCLK1Freq>
 8003614:	6178      	str	r0, [r7, #20]
        break;
 8003616:	e00f      	b.n	8003638 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003618:	4b49      	ldr	r3, [pc, #292]	; (8003740 <UART_SetConfig+0x304>)
 800361a:	617b      	str	r3, [r7, #20]
        break;
 800361c:	e00c      	b.n	8003638 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800361e:	f7fe ff67 	bl	80024f0 <HAL_RCC_GetSysClockFreq>
 8003622:	6178      	str	r0, [r7, #20]
        break;
 8003624:	e008      	b.n	8003638 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003626:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800362a:	617b      	str	r3, [r7, #20]
        break;
 800362c:	e004      	b.n	8003638 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 800362e:	2300      	movs	r3, #0
 8003630:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	76bb      	strb	r3, [r7, #26]
        break;
 8003636:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	2b00      	cmp	r3, #0
 800363c:	f000 8100 	beq.w	8003840 <UART_SetConfig+0x404>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685a      	ldr	r2, [r3, #4]
 8003644:	4613      	mov	r3, r2
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	4413      	add	r3, r2
 800364a:	697a      	ldr	r2, [r7, #20]
 800364c:	429a      	cmp	r2, r3
 800364e:	d305      	bcc.n	800365c <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	429a      	cmp	r2, r3
 800365a:	d902      	bls.n	8003662 <UART_SetConfig+0x226>
      {
        ret = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	76bb      	strb	r3, [r7, #26]
 8003660:	e0ee      	b.n	8003840 <UART_SetConfig+0x404>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	4619      	mov	r1, r3
 8003666:	f04f 0200 	mov.w	r2, #0
 800366a:	f04f 0300 	mov.w	r3, #0
 800366e:	f04f 0400 	mov.w	r4, #0
 8003672:	0214      	lsls	r4, r2, #8
 8003674:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003678:	020b      	lsls	r3, r1, #8
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	6852      	ldr	r2, [r2, #4]
 800367e:	0852      	lsrs	r2, r2, #1
 8003680:	4611      	mov	r1, r2
 8003682:	f04f 0200 	mov.w	r2, #0
 8003686:	eb13 0b01 	adds.w	fp, r3, r1
 800368a:	eb44 0c02 	adc.w	ip, r4, r2
 800368e:	4658      	mov	r0, fp
 8003690:	4661      	mov	r1, ip
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f04f 0400 	mov.w	r4, #0
 800369a:	461a      	mov	r2, r3
 800369c:	4623      	mov	r3, r4
 800369e:	f7fc fde7 	bl	8000270 <__aeabi_uldivmod>
 80036a2:	4603      	mov	r3, r0
 80036a4:	460c      	mov	r4, r1
 80036a6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036ae:	d308      	bcc.n	80036c2 <UART_SetConfig+0x286>
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036b6:	d204      	bcs.n	80036c2 <UART_SetConfig+0x286>
        {
          huart->Instance->BRR = usartdiv;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	60da      	str	r2, [r3, #12]
 80036c0:	e0be      	b.n	8003840 <UART_SetConfig+0x404>
        }
        else
        {
          ret = HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	76bb      	strb	r3, [r7, #26]
 80036c6:	e0bb      	b.n	8003840 <UART_SetConfig+0x404>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	69db      	ldr	r3, [r3, #28]
 80036cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036d0:	d169      	bne.n	80037a6 <UART_SetConfig+0x36a>
  {
    switch (clocksource)
 80036d2:	7efb      	ldrb	r3, [r7, #27]
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	d835      	bhi.n	8003744 <UART_SetConfig+0x308>
 80036d8:	a201      	add	r2, pc, #4	; (adr r2, 80036e0 <UART_SetConfig+0x2a4>)
 80036da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036de:	bf00      	nop
 80036e0:	08003705 	.word	0x08003705
 80036e4:	0800370d 	.word	0x0800370d
 80036e8:	08003715 	.word	0x08003715
 80036ec:	08003745 	.word	0x08003745
 80036f0:	0800371b 	.word	0x0800371b
 80036f4:	08003745 	.word	0x08003745
 80036f8:	08003745 	.word	0x08003745
 80036fc:	08003745 	.word	0x08003745
 8003700:	08003723 	.word	0x08003723
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003704:	f7fe ff88 	bl	8002618 <HAL_RCC_GetPCLK1Freq>
 8003708:	6178      	str	r0, [r7, #20]
        break;
 800370a:	e020      	b.n	800374e <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800370c:	f7fe ff9a 	bl	8002644 <HAL_RCC_GetPCLK2Freq>
 8003710:	6178      	str	r0, [r7, #20]
        break;
 8003712:	e01c      	b.n	800374e <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003714:	4b0a      	ldr	r3, [pc, #40]	; (8003740 <UART_SetConfig+0x304>)
 8003716:	617b      	str	r3, [r7, #20]
        break;
 8003718:	e019      	b.n	800374e <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800371a:	f7fe fee9 	bl	80024f0 <HAL_RCC_GetSysClockFreq>
 800371e:	6178      	str	r0, [r7, #20]
        break;
 8003720:	e015      	b.n	800374e <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003722:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003726:	617b      	str	r3, [r7, #20]
        break;
 8003728:	e011      	b.n	800374e <UART_SetConfig+0x312>
 800372a:	bf00      	nop
 800372c:	efff69f3 	.word	0xefff69f3
 8003730:	40008000 	.word	0x40008000
 8003734:	40013800 	.word	0x40013800
 8003738:	40021000 	.word	0x40021000
 800373c:	40004400 	.word	0x40004400
 8003740:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003744:	2300      	movs	r3, #0
 8003746:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	76bb      	strb	r3, [r7, #26]
        break;
 800374c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d075      	beq.n	8003840 <UART_SetConfig+0x404>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	005a      	lsls	r2, r3, #1
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	085b      	lsrs	r3, r3, #1
 800375e:	441a      	add	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	fbb2 f3f3 	udiv	r3, r2, r3
 8003768:	b29b      	uxth	r3, r3
 800376a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	2b0f      	cmp	r3, #15
 8003770:	d916      	bls.n	80037a0 <UART_SetConfig+0x364>
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003778:	d212      	bcs.n	80037a0 <UART_SetConfig+0x364>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	b29b      	uxth	r3, r3
 800377e:	f023 030f 	bic.w	r3, r3, #15
 8003782:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	085b      	lsrs	r3, r3, #1
 8003788:	b29b      	uxth	r3, r3
 800378a:	f003 0307 	and.w	r3, r3, #7
 800378e:	b29a      	uxth	r2, r3
 8003790:	89fb      	ldrh	r3, [r7, #14]
 8003792:	4313      	orrs	r3, r2
 8003794:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	89fa      	ldrh	r2, [r7, #14]
 800379c:	60da      	str	r2, [r3, #12]
 800379e:	e04f      	b.n	8003840 <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	76bb      	strb	r3, [r7, #26]
 80037a4:	e04c      	b.n	8003840 <UART_SetConfig+0x404>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037a6:	7efb      	ldrb	r3, [r7, #27]
 80037a8:	2b08      	cmp	r3, #8
 80037aa:	d828      	bhi.n	80037fe <UART_SetConfig+0x3c2>
 80037ac:	a201      	add	r2, pc, #4	; (adr r2, 80037b4 <UART_SetConfig+0x378>)
 80037ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b2:	bf00      	nop
 80037b4:	080037d9 	.word	0x080037d9
 80037b8:	080037e1 	.word	0x080037e1
 80037bc:	080037e9 	.word	0x080037e9
 80037c0:	080037ff 	.word	0x080037ff
 80037c4:	080037ef 	.word	0x080037ef
 80037c8:	080037ff 	.word	0x080037ff
 80037cc:	080037ff 	.word	0x080037ff
 80037d0:	080037ff 	.word	0x080037ff
 80037d4:	080037f7 	.word	0x080037f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037d8:	f7fe ff1e 	bl	8002618 <HAL_RCC_GetPCLK1Freq>
 80037dc:	6178      	str	r0, [r7, #20]
        break;
 80037de:	e013      	b.n	8003808 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037e0:	f7fe ff30 	bl	8002644 <HAL_RCC_GetPCLK2Freq>
 80037e4:	6178      	str	r0, [r7, #20]
        break;
 80037e6:	e00f      	b.n	8003808 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037e8:	4b1b      	ldr	r3, [pc, #108]	; (8003858 <UART_SetConfig+0x41c>)
 80037ea:	617b      	str	r3, [r7, #20]
        break;
 80037ec:	e00c      	b.n	8003808 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037ee:	f7fe fe7f 	bl	80024f0 <HAL_RCC_GetSysClockFreq>
 80037f2:	6178      	str	r0, [r7, #20]
        break;
 80037f4:	e008      	b.n	8003808 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037fa:	617b      	str	r3, [r7, #20]
        break;
 80037fc:	e004      	b.n	8003808 <UART_SetConfig+0x3cc>
      default:
        pclk = 0U;
 80037fe:	2300      	movs	r3, #0
 8003800:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	76bb      	strb	r3, [r7, #26]
        break;
 8003806:	bf00      	nop
    }

    if (pclk != 0U)
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d018      	beq.n	8003840 <UART_SetConfig+0x404>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	085a      	lsrs	r2, r3, #1
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	441a      	add	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003820:	b29b      	uxth	r3, r3
 8003822:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	2b0f      	cmp	r3, #15
 8003828:	d908      	bls.n	800383c <UART_SetConfig+0x400>
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003830:	d204      	bcs.n	800383c <UART_SetConfig+0x400>
      {
        huart->Instance->BRR = usartdiv;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	60da      	str	r2, [r3, #12]
 800383a:	e001      	b.n	8003840 <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800384c:	7ebb      	ldrb	r3, [r7, #26]
}
 800384e:	4618      	mov	r0, r3
 8003850:	3720      	adds	r7, #32
 8003852:	46bd      	mov	sp, r7
 8003854:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003858:	00f42400 	.word	0x00f42400

0800385c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00a      	beq.n	8003886 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	430a      	orrs	r2, r1
 8003884:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00a      	beq.n	80038a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ac:	f003 0304 	and.w	r3, r3, #4
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00a      	beq.n	80038ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	430a      	orrs	r2, r1
 80038c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ce:	f003 0308 	and.w	r3, r3, #8
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00a      	beq.n	80038ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	430a      	orrs	r2, r1
 80038ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f0:	f003 0310 	and.w	r3, r3, #16
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00a      	beq.n	800390e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	430a      	orrs	r2, r1
 800390c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003912:	f003 0320 	and.w	r3, r3, #32
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00a      	beq.n	8003930 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	430a      	orrs	r2, r1
 800392e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003938:	2b00      	cmp	r3, #0
 800393a:	d01a      	beq.n	8003972 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	430a      	orrs	r2, r1
 8003950:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800395a:	d10a      	bne.n	8003972 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	430a      	orrs	r2, r1
 8003970:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00a      	beq.n	8003994 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	430a      	orrs	r2, r1
 8003992:	605a      	str	r2, [r3, #4]
  }
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af02      	add	r7, sp, #8
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80039ae:	f7fd fa29 	bl	8000e04 <HAL_GetTick>
 80039b2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0308 	and.w	r3, r3, #8
 80039be:	2b08      	cmp	r3, #8
 80039c0:	d10e      	bne.n	80039e0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039c2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039c6:	9300      	str	r3, [sp, #0]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 f82a 	bl	8003a2a <UART_WaitOnFlagUntilTimeout>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e020      	b.n	8003a22 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0304 	and.w	r3, r3, #4
 80039ea:	2b04      	cmp	r3, #4
 80039ec:	d10e      	bne.n	8003a0c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039ee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039f2:	9300      	str	r3, [sp, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f814 	bl	8003a2a <UART_WaitOnFlagUntilTimeout>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e00a      	b.n	8003a22 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2220      	movs	r2, #32
 8003a10:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2220      	movs	r2, #32
 8003a16:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b084      	sub	sp, #16
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	60f8      	str	r0, [r7, #12]
 8003a32:	60b9      	str	r1, [r7, #8]
 8003a34:	603b      	str	r3, [r7, #0]
 8003a36:	4613      	mov	r3, r2
 8003a38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a3a:	e05d      	b.n	8003af8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a42:	d059      	beq.n	8003af8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a44:	f7fd f9de 	bl	8000e04 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d302      	bcc.n	8003a5a <UART_WaitOnFlagUntilTimeout+0x30>
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d11b      	bne.n	8003a92 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a68:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 0201 	bic.w	r2, r2, #1
 8003a78:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2220      	movs	r2, #32
 8003a84:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e042      	b.n	8003b18 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d02b      	beq.n	8003af8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	69db      	ldr	r3, [r3, #28]
 8003aa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aae:	d123      	bne.n	8003af8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ab8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003ac8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 0201 	bic.w	r2, r2, #1
 8003ad8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2220      	movs	r2, #32
 8003ade:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2220      	movs	r2, #32
 8003aea:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e00f      	b.n	8003b18 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	69da      	ldr	r2, [r3, #28]
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	4013      	ands	r3, r2
 8003b02:	68ba      	ldr	r2, [r7, #8]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	bf0c      	ite	eq
 8003b08:	2301      	moveq	r3, #1
 8003b0a:	2300      	movne	r3, #0
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	461a      	mov	r2, r3
 8003b10:	79fb      	ldrb	r3, [r7, #7]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d092      	beq.n	8003a3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3710      	adds	r7, #16
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003b24:	bf00      	nop
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
	...

08003b30 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b36:	f3ef 8305 	mrs	r3, IPSR
 8003b3a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b3c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10f      	bne.n	8003b62 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b42:	f3ef 8310 	mrs	r3, PRIMASK
 8003b46:	607b      	str	r3, [r7, #4]
  return(result);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d105      	bne.n	8003b5a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003b4e:	f3ef 8311 	mrs	r3, BASEPRI
 8003b52:	603b      	str	r3, [r7, #0]
  return(result);
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d007      	beq.n	8003b6a <osKernelInitialize+0x3a>
 8003b5a:	4b0e      	ldr	r3, [pc, #56]	; (8003b94 <osKernelInitialize+0x64>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d103      	bne.n	8003b6a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003b62:	f06f 0305 	mvn.w	r3, #5
 8003b66:	60fb      	str	r3, [r7, #12]
 8003b68:	e00c      	b.n	8003b84 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003b6a:	4b0a      	ldr	r3, [pc, #40]	; (8003b94 <osKernelInitialize+0x64>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d105      	bne.n	8003b7e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003b72:	4b08      	ldr	r3, [pc, #32]	; (8003b94 <osKernelInitialize+0x64>)
 8003b74:	2201      	movs	r2, #1
 8003b76:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	60fb      	str	r3, [r7, #12]
 8003b7c:	e002      	b.n	8003b84 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b82:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003b84:	68fb      	ldr	r3, [r7, #12]
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3714      	adds	r7, #20
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	20000094 	.word	0x20000094

08003b98 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b9e:	f3ef 8305 	mrs	r3, IPSR
 8003ba2:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ba4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10f      	bne.n	8003bca <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003baa:	f3ef 8310 	mrs	r3, PRIMASK
 8003bae:	607b      	str	r3, [r7, #4]
  return(result);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d105      	bne.n	8003bc2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003bb6:	f3ef 8311 	mrs	r3, BASEPRI
 8003bba:	603b      	str	r3, [r7, #0]
  return(result);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d007      	beq.n	8003bd2 <osKernelStart+0x3a>
 8003bc2:	4b0f      	ldr	r3, [pc, #60]	; (8003c00 <osKernelStart+0x68>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d103      	bne.n	8003bd2 <osKernelStart+0x3a>
    stat = osErrorISR;
 8003bca:	f06f 0305 	mvn.w	r3, #5
 8003bce:	60fb      	str	r3, [r7, #12]
 8003bd0:	e010      	b.n	8003bf4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003bd2:	4b0b      	ldr	r3, [pc, #44]	; (8003c00 <osKernelStart+0x68>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d109      	bne.n	8003bee <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003bda:	f7ff ffa1 	bl	8003b20 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003bde:	4b08      	ldr	r3, [pc, #32]	; (8003c00 <osKernelStart+0x68>)
 8003be0:	2202      	movs	r2, #2
 8003be2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003be4:	f001 f870 	bl	8004cc8 <vTaskStartScheduler>
      stat = osOK;
 8003be8:	2300      	movs	r3, #0
 8003bea:	60fb      	str	r3, [r7, #12]
 8003bec:	e002      	b.n	8003bf4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8003bee:	f04f 33ff 	mov.w	r3, #4294967295
 8003bf2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	20000094 	.word	0x20000094

08003c04 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b090      	sub	sp, #64	; 0x40
 8003c08:	af04      	add	r7, sp, #16
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003c10:	2300      	movs	r3, #0
 8003c12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c14:	f3ef 8305 	mrs	r3, IPSR
 8003c18:	61fb      	str	r3, [r7, #28]
  return(result);
 8003c1a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f040 808f 	bne.w	8003d40 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c22:	f3ef 8310 	mrs	r3, PRIMASK
 8003c26:	61bb      	str	r3, [r7, #24]
  return(result);
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d105      	bne.n	8003c3a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003c2e:	f3ef 8311 	mrs	r3, BASEPRI
 8003c32:	617b      	str	r3, [r7, #20]
  return(result);
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d003      	beq.n	8003c42 <osThreadNew+0x3e>
 8003c3a:	4b44      	ldr	r3, [pc, #272]	; (8003d4c <osThreadNew+0x148>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d07e      	beq.n	8003d40 <osThreadNew+0x13c>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d07b      	beq.n	8003d40 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8003c48:	2380      	movs	r3, #128	; 0x80
 8003c4a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003c4c:	2318      	movs	r3, #24
 8003c4e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8003c50:	2300      	movs	r3, #0
 8003c52:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8003c54:	f04f 33ff 	mov.w	r3, #4294967295
 8003c58:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d045      	beq.n	8003cec <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d002      	beq.n	8003c6e <osThreadNew+0x6a>
        name = attr->name;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d002      	beq.n	8003c7c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d008      	beq.n	8003c94 <osThreadNew+0x90>
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	2b38      	cmp	r3, #56	; 0x38
 8003c86:	d805      	bhi.n	8003c94 <osThreadNew+0x90>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <osThreadNew+0x94>
        return (NULL);
 8003c94:	2300      	movs	r3, #0
 8003c96:	e054      	b.n	8003d42 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	695b      	ldr	r3, [r3, #20]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d003      	beq.n	8003ca8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	089b      	lsrs	r3, r3, #2
 8003ca6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00e      	beq.n	8003cce <osThreadNew+0xca>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	2b5b      	cmp	r3, #91	; 0x5b
 8003cb6:	d90a      	bls.n	8003cce <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d006      	beq.n	8003cce <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	695b      	ldr	r3, [r3, #20]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d002      	beq.n	8003cce <osThreadNew+0xca>
        mem = 1;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	623b      	str	r3, [r7, #32]
 8003ccc:	e010      	b.n	8003cf0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10c      	bne.n	8003cf0 <osThreadNew+0xec>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d108      	bne.n	8003cf0 <osThreadNew+0xec>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d104      	bne.n	8003cf0 <osThreadNew+0xec>
          mem = 0;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	623b      	str	r3, [r7, #32]
 8003cea:	e001      	b.n	8003cf0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8003cec:	2300      	movs	r3, #0
 8003cee:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003cf0:	6a3b      	ldr	r3, [r7, #32]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d110      	bne.n	8003d18 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003cfe:	9202      	str	r2, [sp, #8]
 8003d00:	9301      	str	r3, [sp, #4]
 8003d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d04:	9300      	str	r3, [sp, #0]
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f000 fe09 	bl	8004924 <xTaskCreateStatic>
 8003d12:	4603      	mov	r3, r0
 8003d14:	613b      	str	r3, [r7, #16]
 8003d16:	e013      	b.n	8003d40 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8003d18:	6a3b      	ldr	r3, [r7, #32]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d110      	bne.n	8003d40 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	f107 0310 	add.w	r3, r7, #16
 8003d26:	9301      	str	r3, [sp, #4]
 8003d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2a:	9300      	str	r3, [sp, #0]
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f000 fe51 	bl	80049d8 <xTaskCreate>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d001      	beq.n	8003d40 <osThreadNew+0x13c>
          hTask = NULL;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003d40:	693b      	ldr	r3, [r7, #16]
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3730      	adds	r7, #48	; 0x30
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	20000094 	.word	0x20000094

08003d50 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d58:	f3ef 8305 	mrs	r3, IPSR
 8003d5c:	613b      	str	r3, [r7, #16]
  return(result);
 8003d5e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d10f      	bne.n	8003d84 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d64:	f3ef 8310 	mrs	r3, PRIMASK
 8003d68:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d105      	bne.n	8003d7c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003d70:	f3ef 8311 	mrs	r3, BASEPRI
 8003d74:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d007      	beq.n	8003d8c <osDelay+0x3c>
 8003d7c:	4b0a      	ldr	r3, [pc, #40]	; (8003da8 <osDelay+0x58>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d103      	bne.n	8003d8c <osDelay+0x3c>
    stat = osErrorISR;
 8003d84:	f06f 0305 	mvn.w	r3, #5
 8003d88:	617b      	str	r3, [r7, #20]
 8003d8a:	e007      	b.n	8003d9c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d002      	beq.n	8003d9c <osDelay+0x4c>
      vTaskDelay(ticks);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 ff62 	bl	8004c60 <vTaskDelay>
    }
  }

  return (stat);
 8003d9c:	697b      	ldr	r3, [r7, #20]
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3718      	adds	r7, #24
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	20000094 	.word	0x20000094

08003dac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	4a07      	ldr	r2, [pc, #28]	; (8003dd8 <vApplicationGetIdleTaskMemory+0x2c>)
 8003dbc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	4a06      	ldr	r2, [pc, #24]	; (8003ddc <vApplicationGetIdleTaskMemory+0x30>)
 8003dc2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2280      	movs	r2, #128	; 0x80
 8003dc8:	601a      	str	r2, [r3, #0]
}
 8003dca:	bf00      	nop
 8003dcc:	3714      	adds	r7, #20
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	20000098 	.word	0x20000098
 8003ddc:	200000f4 	.word	0x200000f4

08003de0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	4a07      	ldr	r2, [pc, #28]	; (8003e0c <vApplicationGetTimerTaskMemory+0x2c>)
 8003df0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	4a06      	ldr	r2, [pc, #24]	; (8003e10 <vApplicationGetTimerTaskMemory+0x30>)
 8003df6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003dfe:	601a      	str	r2, [r3, #0]
}
 8003e00:	bf00      	nop
 8003e02:	3714      	adds	r7, #20
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr
 8003e0c:	200002f4 	.word	0x200002f4
 8003e10:	20000350 	.word	0x20000350

08003e14 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f103 0208 	add.w	r2, r3, #8
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f04f 32ff 	mov.w	r2, #4294967295
 8003e2c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f103 0208 	add.w	r2, r3, #8
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f103 0208 	add.w	r2, r3, #8
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003e62:	bf00      	nop
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b085      	sub	sp, #20
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
 8003e76:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	689a      	ldr	r2, [r3, #8]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	683a      	ldr	r2, [r7, #0]
 8003e98:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	1c5a      	adds	r2, r3, #1
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	601a      	str	r2, [r3, #0]
}
 8003eaa:	bf00      	nop
 8003eac:	3714      	adds	r7, #20
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr

08003eb6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b085      	sub	sp, #20
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
 8003ebe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ecc:	d103      	bne.n	8003ed6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	60fb      	str	r3, [r7, #12]
 8003ed4:	e00c      	b.n	8003ef0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	3308      	adds	r3, #8
 8003eda:	60fb      	str	r3, [r7, #12]
 8003edc:	e002      	b.n	8003ee4 <vListInsert+0x2e>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	60fb      	str	r3, [r7, #12]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d2f6      	bcs.n	8003ede <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	685a      	ldr	r2, [r3, #4]
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	1c5a      	adds	r2, r3, #1
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	601a      	str	r2, [r3, #0]
}
 8003f1c:	bf00      	nop
 8003f1e:	3714      	adds	r7, #20
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	6892      	ldr	r2, [r2, #8]
 8003f3e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	6852      	ldr	r2, [r2, #4]
 8003f48:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d103      	bne.n	8003f5c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689a      	ldr	r2, [r3, #8]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	1e5a      	subs	r2, r3, #1
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3714      	adds	r7, #20
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d109      	bne.n	8003fa4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f94:	f383 8811 	msr	BASEPRI, r3
 8003f98:	f3bf 8f6f 	isb	sy
 8003f9c:	f3bf 8f4f 	dsb	sy
 8003fa0:	60bb      	str	r3, [r7, #8]
 8003fa2:	e7fe      	b.n	8003fa2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003fa4:	f002 f812 	bl	8005fcc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb0:	68f9      	ldr	r1, [r7, #12]
 8003fb2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003fb4:	fb01 f303 	mul.w	r3, r1, r3
 8003fb8:	441a      	add	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	68f9      	ldr	r1, [r7, #12]
 8003fd8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003fda:	fb01 f303 	mul.w	r3, r1, r3
 8003fde:	441a      	add	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	22ff      	movs	r2, #255	; 0xff
 8003fe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	22ff      	movs	r2, #255	; 0xff
 8003ff0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d114      	bne.n	8004024 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d01a      	beq.n	8004038 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	3310      	adds	r3, #16
 8004006:	4618      	mov	r0, r3
 8004008:	f001 f8de 	bl	80051c8 <xTaskRemoveFromEventList>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d012      	beq.n	8004038 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004012:	4b0d      	ldr	r3, [pc, #52]	; (8004048 <xQueueGenericReset+0xcc>)
 8004014:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	f3bf 8f4f 	dsb	sy
 800401e:	f3bf 8f6f 	isb	sy
 8004022:	e009      	b.n	8004038 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	3310      	adds	r3, #16
 8004028:	4618      	mov	r0, r3
 800402a:	f7ff fef3 	bl	8003e14 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	3324      	adds	r3, #36	; 0x24
 8004032:	4618      	mov	r0, r3
 8004034:	f7ff feee 	bl	8003e14 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004038:	f001 fff6 	bl	8006028 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800403c:	2301      	movs	r3, #1
}
 800403e:	4618      	mov	r0, r3
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	e000ed04 	.word	0xe000ed04

0800404c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800404c:	b580      	push	{r7, lr}
 800404e:	b08e      	sub	sp, #56	; 0x38
 8004050:	af02      	add	r7, sp, #8
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
 8004058:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d109      	bne.n	8004074 <xQueueGenericCreateStatic+0x28>
 8004060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004064:	f383 8811 	msr	BASEPRI, r3
 8004068:	f3bf 8f6f 	isb	sy
 800406c:	f3bf 8f4f 	dsb	sy
 8004070:	62bb      	str	r3, [r7, #40]	; 0x28
 8004072:	e7fe      	b.n	8004072 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d109      	bne.n	800408e <xQueueGenericCreateStatic+0x42>
 800407a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407e:	f383 8811 	msr	BASEPRI, r3
 8004082:	f3bf 8f6f 	isb	sy
 8004086:	f3bf 8f4f 	dsb	sy
 800408a:	627b      	str	r3, [r7, #36]	; 0x24
 800408c:	e7fe      	b.n	800408c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d002      	beq.n	800409a <xQueueGenericCreateStatic+0x4e>
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <xQueueGenericCreateStatic+0x52>
 800409a:	2301      	movs	r3, #1
 800409c:	e000      	b.n	80040a0 <xQueueGenericCreateStatic+0x54>
 800409e:	2300      	movs	r3, #0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d109      	bne.n	80040b8 <xQueueGenericCreateStatic+0x6c>
 80040a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a8:	f383 8811 	msr	BASEPRI, r3
 80040ac:	f3bf 8f6f 	isb	sy
 80040b0:	f3bf 8f4f 	dsb	sy
 80040b4:	623b      	str	r3, [r7, #32]
 80040b6:	e7fe      	b.n	80040b6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d102      	bne.n	80040c4 <xQueueGenericCreateStatic+0x78>
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <xQueueGenericCreateStatic+0x7c>
 80040c4:	2301      	movs	r3, #1
 80040c6:	e000      	b.n	80040ca <xQueueGenericCreateStatic+0x7e>
 80040c8:	2300      	movs	r3, #0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d109      	bne.n	80040e2 <xQueueGenericCreateStatic+0x96>
 80040ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d2:	f383 8811 	msr	BASEPRI, r3
 80040d6:	f3bf 8f6f 	isb	sy
 80040da:	f3bf 8f4f 	dsb	sy
 80040de:	61fb      	str	r3, [r7, #28]
 80040e0:	e7fe      	b.n	80040e0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80040e2:	2350      	movs	r3, #80	; 0x50
 80040e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	2b50      	cmp	r3, #80	; 0x50
 80040ea:	d009      	beq.n	8004100 <xQueueGenericCreateStatic+0xb4>
 80040ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f0:	f383 8811 	msr	BASEPRI, r3
 80040f4:	f3bf 8f6f 	isb	sy
 80040f8:	f3bf 8f4f 	dsb	sy
 80040fc:	61bb      	str	r3, [r7, #24]
 80040fe:	e7fe      	b.n	80040fe <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004100:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00d      	beq.n	8004128 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800410c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004114:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800411a:	9300      	str	r3, [sp, #0]
 800411c:	4613      	mov	r3, r2
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	68b9      	ldr	r1, [r7, #8]
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	f000 f805 	bl	8004132 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800412a:	4618      	mov	r0, r3
 800412c:	3730      	adds	r7, #48	; 0x30
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b084      	sub	sp, #16
 8004136:	af00      	add	r7, sp, #0
 8004138:	60f8      	str	r0, [r7, #12]
 800413a:	60b9      	str	r1, [r7, #8]
 800413c:	607a      	str	r2, [r7, #4]
 800413e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d103      	bne.n	800414e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	69ba      	ldr	r2, [r7, #24]
 800414a:	601a      	str	r2, [r3, #0]
 800414c:	e002      	b.n	8004154 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	68ba      	ldr	r2, [r7, #8]
 800415e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004160:	2101      	movs	r1, #1
 8004162:	69b8      	ldr	r0, [r7, #24]
 8004164:	f7ff ff0a 	bl	8003f7c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	78fa      	ldrb	r2, [r7, #3]
 800416c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004170:	bf00      	nop
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b08e      	sub	sp, #56	; 0x38
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
 8004184:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004186:	2300      	movs	r3, #0
 8004188:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800418e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004190:	2b00      	cmp	r3, #0
 8004192:	d109      	bne.n	80041a8 <xQueueGenericSend+0x30>
 8004194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004198:	f383 8811 	msr	BASEPRI, r3
 800419c:	f3bf 8f6f 	isb	sy
 80041a0:	f3bf 8f4f 	dsb	sy
 80041a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80041a6:	e7fe      	b.n	80041a6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d103      	bne.n	80041b6 <xQueueGenericSend+0x3e>
 80041ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <xQueueGenericSend+0x42>
 80041b6:	2301      	movs	r3, #1
 80041b8:	e000      	b.n	80041bc <xQueueGenericSend+0x44>
 80041ba:	2300      	movs	r3, #0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d109      	bne.n	80041d4 <xQueueGenericSend+0x5c>
 80041c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c4:	f383 8811 	msr	BASEPRI, r3
 80041c8:	f3bf 8f6f 	isb	sy
 80041cc:	f3bf 8f4f 	dsb	sy
 80041d0:	627b      	str	r3, [r7, #36]	; 0x24
 80041d2:	e7fe      	b.n	80041d2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d103      	bne.n	80041e2 <xQueueGenericSend+0x6a>
 80041da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d101      	bne.n	80041e6 <xQueueGenericSend+0x6e>
 80041e2:	2301      	movs	r3, #1
 80041e4:	e000      	b.n	80041e8 <xQueueGenericSend+0x70>
 80041e6:	2300      	movs	r3, #0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d109      	bne.n	8004200 <xQueueGenericSend+0x88>
 80041ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f0:	f383 8811 	msr	BASEPRI, r3
 80041f4:	f3bf 8f6f 	isb	sy
 80041f8:	f3bf 8f4f 	dsb	sy
 80041fc:	623b      	str	r3, [r7, #32]
 80041fe:	e7fe      	b.n	80041fe <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004200:	f001 f998 	bl	8005534 <xTaskGetSchedulerState>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d102      	bne.n	8004210 <xQueueGenericSend+0x98>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d101      	bne.n	8004214 <xQueueGenericSend+0x9c>
 8004210:	2301      	movs	r3, #1
 8004212:	e000      	b.n	8004216 <xQueueGenericSend+0x9e>
 8004214:	2300      	movs	r3, #0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d109      	bne.n	800422e <xQueueGenericSend+0xb6>
 800421a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421e:	f383 8811 	msr	BASEPRI, r3
 8004222:	f3bf 8f6f 	isb	sy
 8004226:	f3bf 8f4f 	dsb	sy
 800422a:	61fb      	str	r3, [r7, #28]
 800422c:	e7fe      	b.n	800422c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800422e:	f001 fecd 	bl	8005fcc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004234:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800423a:	429a      	cmp	r2, r3
 800423c:	d302      	bcc.n	8004244 <xQueueGenericSend+0xcc>
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	2b02      	cmp	r3, #2
 8004242:	d129      	bne.n	8004298 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004244:	683a      	ldr	r2, [r7, #0]
 8004246:	68b9      	ldr	r1, [r7, #8]
 8004248:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800424a:	f000 f9ff 	bl	800464c <prvCopyDataToQueue>
 800424e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004254:	2b00      	cmp	r3, #0
 8004256:	d010      	beq.n	800427a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425a:	3324      	adds	r3, #36	; 0x24
 800425c:	4618      	mov	r0, r3
 800425e:	f000 ffb3 	bl	80051c8 <xTaskRemoveFromEventList>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d013      	beq.n	8004290 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004268:	4b3f      	ldr	r3, [pc, #252]	; (8004368 <xQueueGenericSend+0x1f0>)
 800426a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800426e:	601a      	str	r2, [r3, #0]
 8004270:	f3bf 8f4f 	dsb	sy
 8004274:	f3bf 8f6f 	isb	sy
 8004278:	e00a      	b.n	8004290 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800427a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800427c:	2b00      	cmp	r3, #0
 800427e:	d007      	beq.n	8004290 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004280:	4b39      	ldr	r3, [pc, #228]	; (8004368 <xQueueGenericSend+0x1f0>)
 8004282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004286:	601a      	str	r2, [r3, #0]
 8004288:	f3bf 8f4f 	dsb	sy
 800428c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004290:	f001 feca 	bl	8006028 <vPortExitCritical>
				return pdPASS;
 8004294:	2301      	movs	r3, #1
 8004296:	e063      	b.n	8004360 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d103      	bne.n	80042a6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800429e:	f001 fec3 	bl	8006028 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80042a2:	2300      	movs	r3, #0
 80042a4:	e05c      	b.n	8004360 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80042a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d106      	bne.n	80042ba <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80042ac:	f107 0314 	add.w	r3, r7, #20
 80042b0:	4618      	mov	r0, r3
 80042b2:	f000 ffeb 	bl	800528c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80042b6:	2301      	movs	r3, #1
 80042b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80042ba:	f001 feb5 	bl	8006028 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80042be:	f000 fd67 	bl	8004d90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80042c2:	f001 fe83 	bl	8005fcc <vPortEnterCritical>
 80042c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042cc:	b25b      	sxtb	r3, r3
 80042ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d2:	d103      	bne.n	80042dc <xQueueGenericSend+0x164>
 80042d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042e2:	b25b      	sxtb	r3, r3
 80042e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e8:	d103      	bne.n	80042f2 <xQueueGenericSend+0x17a>
 80042ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042f2:	f001 fe99 	bl	8006028 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80042f6:	1d3a      	adds	r2, r7, #4
 80042f8:	f107 0314 	add.w	r3, r7, #20
 80042fc:	4611      	mov	r1, r2
 80042fe:	4618      	mov	r0, r3
 8004300:	f000 ffda 	bl	80052b8 <xTaskCheckForTimeOut>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d124      	bne.n	8004354 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800430a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800430c:	f000 fa96 	bl	800483c <prvIsQueueFull>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d018      	beq.n	8004348 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004318:	3310      	adds	r3, #16
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	4611      	mov	r1, r2
 800431e:	4618      	mov	r0, r3
 8004320:	f000 ff04 	bl	800512c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004324:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004326:	f000 fa21 	bl	800476c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800432a:	f000 fd3f 	bl	8004dac <xTaskResumeAll>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	f47f af7c 	bne.w	800422e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004336:	4b0c      	ldr	r3, [pc, #48]	; (8004368 <xQueueGenericSend+0x1f0>)
 8004338:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800433c:	601a      	str	r2, [r3, #0]
 800433e:	f3bf 8f4f 	dsb	sy
 8004342:	f3bf 8f6f 	isb	sy
 8004346:	e772      	b.n	800422e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004348:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800434a:	f000 fa0f 	bl	800476c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800434e:	f000 fd2d 	bl	8004dac <xTaskResumeAll>
 8004352:	e76c      	b.n	800422e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004354:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004356:	f000 fa09 	bl	800476c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800435a:	f000 fd27 	bl	8004dac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800435e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004360:	4618      	mov	r0, r3
 8004362:	3738      	adds	r7, #56	; 0x38
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	e000ed04 	.word	0xe000ed04

0800436c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b08e      	sub	sp, #56	; 0x38
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
 8004378:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800437e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004380:	2b00      	cmp	r3, #0
 8004382:	d109      	bne.n	8004398 <xQueueGenericSendFromISR+0x2c>
 8004384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004388:	f383 8811 	msr	BASEPRI, r3
 800438c:	f3bf 8f6f 	isb	sy
 8004390:	f3bf 8f4f 	dsb	sy
 8004394:	627b      	str	r3, [r7, #36]	; 0x24
 8004396:	e7fe      	b.n	8004396 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d103      	bne.n	80043a6 <xQueueGenericSendFromISR+0x3a>
 800439e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <xQueueGenericSendFromISR+0x3e>
 80043a6:	2301      	movs	r3, #1
 80043a8:	e000      	b.n	80043ac <xQueueGenericSendFromISR+0x40>
 80043aa:	2300      	movs	r3, #0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d109      	bne.n	80043c4 <xQueueGenericSendFromISR+0x58>
 80043b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b4:	f383 8811 	msr	BASEPRI, r3
 80043b8:	f3bf 8f6f 	isb	sy
 80043bc:	f3bf 8f4f 	dsb	sy
 80043c0:	623b      	str	r3, [r7, #32]
 80043c2:	e7fe      	b.n	80043c2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d103      	bne.n	80043d2 <xQueueGenericSendFromISR+0x66>
 80043ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d101      	bne.n	80043d6 <xQueueGenericSendFromISR+0x6a>
 80043d2:	2301      	movs	r3, #1
 80043d4:	e000      	b.n	80043d8 <xQueueGenericSendFromISR+0x6c>
 80043d6:	2300      	movs	r3, #0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d109      	bne.n	80043f0 <xQueueGenericSendFromISR+0x84>
 80043dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e0:	f383 8811 	msr	BASEPRI, r3
 80043e4:	f3bf 8f6f 	isb	sy
 80043e8:	f3bf 8f4f 	dsb	sy
 80043ec:	61fb      	str	r3, [r7, #28]
 80043ee:	e7fe      	b.n	80043ee <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80043f0:	f001 fec8 	bl	8006184 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80043f4:	f3ef 8211 	mrs	r2, BASEPRI
 80043f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fc:	f383 8811 	msr	BASEPRI, r3
 8004400:	f3bf 8f6f 	isb	sy
 8004404:	f3bf 8f4f 	dsb	sy
 8004408:	61ba      	str	r2, [r7, #24]
 800440a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800440c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800440e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004412:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004418:	429a      	cmp	r2, r3
 800441a:	d302      	bcc.n	8004422 <xQueueGenericSendFromISR+0xb6>
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	2b02      	cmp	r3, #2
 8004420:	d12c      	bne.n	800447c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004424:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004428:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	68b9      	ldr	r1, [r7, #8]
 8004430:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004432:	f000 f90b 	bl	800464c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004436:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800443a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800443e:	d112      	bne.n	8004466 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004444:	2b00      	cmp	r3, #0
 8004446:	d016      	beq.n	8004476 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444a:	3324      	adds	r3, #36	; 0x24
 800444c:	4618      	mov	r0, r3
 800444e:	f000 febb 	bl	80051c8 <xTaskRemoveFromEventList>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00e      	beq.n	8004476 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00b      	beq.n	8004476 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2201      	movs	r2, #1
 8004462:	601a      	str	r2, [r3, #0]
 8004464:	e007      	b.n	8004476 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004466:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800446a:	3301      	adds	r3, #1
 800446c:	b2db      	uxtb	r3, r3
 800446e:	b25a      	sxtb	r2, r3
 8004470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004472:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004476:	2301      	movs	r3, #1
 8004478:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800447a:	e001      	b.n	8004480 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800447c:	2300      	movs	r3, #0
 800447e:	637b      	str	r3, [r7, #52]	; 0x34
 8004480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004482:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800448a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800448c:	4618      	mov	r0, r3
 800448e:	3738      	adds	r7, #56	; 0x38
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b08c      	sub	sp, #48	; 0x30
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80044a0:	2300      	movs	r3, #0
 80044a2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80044a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d109      	bne.n	80044c2 <xQueueReceive+0x2e>
	__asm volatile
 80044ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b2:	f383 8811 	msr	BASEPRI, r3
 80044b6:	f3bf 8f6f 	isb	sy
 80044ba:	f3bf 8f4f 	dsb	sy
 80044be:	623b      	str	r3, [r7, #32]
 80044c0:	e7fe      	b.n	80044c0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d103      	bne.n	80044d0 <xQueueReceive+0x3c>
 80044c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d101      	bne.n	80044d4 <xQueueReceive+0x40>
 80044d0:	2301      	movs	r3, #1
 80044d2:	e000      	b.n	80044d6 <xQueueReceive+0x42>
 80044d4:	2300      	movs	r3, #0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d109      	bne.n	80044ee <xQueueReceive+0x5a>
 80044da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044de:	f383 8811 	msr	BASEPRI, r3
 80044e2:	f3bf 8f6f 	isb	sy
 80044e6:	f3bf 8f4f 	dsb	sy
 80044ea:	61fb      	str	r3, [r7, #28]
 80044ec:	e7fe      	b.n	80044ec <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044ee:	f001 f821 	bl	8005534 <xTaskGetSchedulerState>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d102      	bne.n	80044fe <xQueueReceive+0x6a>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <xQueueReceive+0x6e>
 80044fe:	2301      	movs	r3, #1
 8004500:	e000      	b.n	8004504 <xQueueReceive+0x70>
 8004502:	2300      	movs	r3, #0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d109      	bne.n	800451c <xQueueReceive+0x88>
 8004508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450c:	f383 8811 	msr	BASEPRI, r3
 8004510:	f3bf 8f6f 	isb	sy
 8004514:	f3bf 8f4f 	dsb	sy
 8004518:	61bb      	str	r3, [r7, #24]
 800451a:	e7fe      	b.n	800451a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800451c:	f001 fd56 	bl	8005fcc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004524:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004528:	2b00      	cmp	r3, #0
 800452a:	d01f      	beq.n	800456c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800452c:	68b9      	ldr	r1, [r7, #8]
 800452e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004530:	f000 f8f6 	bl	8004720 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004536:	1e5a      	subs	r2, r3, #1
 8004538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800453c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00f      	beq.n	8004564 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004546:	3310      	adds	r3, #16
 8004548:	4618      	mov	r0, r3
 800454a:	f000 fe3d 	bl	80051c8 <xTaskRemoveFromEventList>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d007      	beq.n	8004564 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004554:	4b3c      	ldr	r3, [pc, #240]	; (8004648 <xQueueReceive+0x1b4>)
 8004556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800455a:	601a      	str	r2, [r3, #0]
 800455c:	f3bf 8f4f 	dsb	sy
 8004560:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004564:	f001 fd60 	bl	8006028 <vPortExitCritical>
				return pdPASS;
 8004568:	2301      	movs	r3, #1
 800456a:	e069      	b.n	8004640 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d103      	bne.n	800457a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004572:	f001 fd59 	bl	8006028 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004576:	2300      	movs	r3, #0
 8004578:	e062      	b.n	8004640 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800457a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800457c:	2b00      	cmp	r3, #0
 800457e:	d106      	bne.n	800458e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004580:	f107 0310 	add.w	r3, r7, #16
 8004584:	4618      	mov	r0, r3
 8004586:	f000 fe81 	bl	800528c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800458a:	2301      	movs	r3, #1
 800458c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800458e:	f001 fd4b 	bl	8006028 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004592:	f000 fbfd 	bl	8004d90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004596:	f001 fd19 	bl	8005fcc <vPortEnterCritical>
 800459a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045a0:	b25b      	sxtb	r3, r3
 80045a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a6:	d103      	bne.n	80045b0 <xQueueReceive+0x11c>
 80045a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045b6:	b25b      	sxtb	r3, r3
 80045b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045bc:	d103      	bne.n	80045c6 <xQueueReceive+0x132>
 80045be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045c6:	f001 fd2f 	bl	8006028 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045ca:	1d3a      	adds	r2, r7, #4
 80045cc:	f107 0310 	add.w	r3, r7, #16
 80045d0:	4611      	mov	r1, r2
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 fe70 	bl	80052b8 <xTaskCheckForTimeOut>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d123      	bne.n	8004626 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045e0:	f000 f916 	bl	8004810 <prvIsQueueEmpty>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d017      	beq.n	800461a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80045ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ec:	3324      	adds	r3, #36	; 0x24
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	4611      	mov	r1, r2
 80045f2:	4618      	mov	r0, r3
 80045f4:	f000 fd9a 	bl	800512c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80045f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045fa:	f000 f8b7 	bl	800476c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80045fe:	f000 fbd5 	bl	8004dac <xTaskResumeAll>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d189      	bne.n	800451c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004608:	4b0f      	ldr	r3, [pc, #60]	; (8004648 <xQueueReceive+0x1b4>)
 800460a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800460e:	601a      	str	r2, [r3, #0]
 8004610:	f3bf 8f4f 	dsb	sy
 8004614:	f3bf 8f6f 	isb	sy
 8004618:	e780      	b.n	800451c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800461a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800461c:	f000 f8a6 	bl	800476c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004620:	f000 fbc4 	bl	8004dac <xTaskResumeAll>
 8004624:	e77a      	b.n	800451c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004626:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004628:	f000 f8a0 	bl	800476c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800462c:	f000 fbbe 	bl	8004dac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004630:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004632:	f000 f8ed 	bl	8004810 <prvIsQueueEmpty>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	f43f af6f 	beq.w	800451c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800463e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004640:	4618      	mov	r0, r3
 8004642:	3730      	adds	r7, #48	; 0x30
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	e000ed04 	.word	0xe000ed04

0800464c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b086      	sub	sp, #24
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004658:	2300      	movs	r3, #0
 800465a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004660:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10d      	bne.n	8004686 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d14d      	bne.n	800470e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	4618      	mov	r0, r3
 8004678:	f000 ff7a 	bl	8005570 <xTaskPriorityDisinherit>
 800467c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	609a      	str	r2, [r3, #8]
 8004684:	e043      	b.n	800470e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d119      	bne.n	80046c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6858      	ldr	r0, [r3, #4]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004694:	461a      	mov	r2, r3
 8004696:	68b9      	ldr	r1, [r7, #8]
 8004698:	f001 ffb2 	bl	8006600 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	685a      	ldr	r2, [r3, #4]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a4:	441a      	add	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	685a      	ldr	r2, [r3, #4]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d32b      	bcc.n	800470e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	605a      	str	r2, [r3, #4]
 80046be:	e026      	b.n	800470e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	68d8      	ldr	r0, [r3, #12]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c8:	461a      	mov	r2, r3
 80046ca:	68b9      	ldr	r1, [r7, #8]
 80046cc:	f001 ff98 	bl	8006600 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	68da      	ldr	r2, [r3, #12]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d8:	425b      	negs	r3, r3
 80046da:	441a      	add	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	68da      	ldr	r2, [r3, #12]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d207      	bcs.n	80046fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	689a      	ldr	r2, [r3, #8]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f4:	425b      	negs	r3, r3
 80046f6:	441a      	add	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d105      	bne.n	800470e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d002      	beq.n	800470e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	3b01      	subs	r3, #1
 800470c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	1c5a      	adds	r2, r3, #1
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004716:	697b      	ldr	r3, [r7, #20]
}
 8004718:	4618      	mov	r0, r3
 800471a:	3718      	adds	r7, #24
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	2b00      	cmp	r3, #0
 8004730:	d018      	beq.n	8004764 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	68da      	ldr	r2, [r3, #12]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473a:	441a      	add	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	68da      	ldr	r2, [r3, #12]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	429a      	cmp	r2, r3
 800474a:	d303      	bcc.n	8004754 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	68d9      	ldr	r1, [r3, #12]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475c:	461a      	mov	r2, r3
 800475e:	6838      	ldr	r0, [r7, #0]
 8004760:	f001 ff4e 	bl	8006600 <memcpy>
	}
}
 8004764:	bf00      	nop
 8004766:	3708      	adds	r7, #8
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004774:	f001 fc2a 	bl	8005fcc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800477e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004780:	e011      	b.n	80047a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004786:	2b00      	cmp	r3, #0
 8004788:	d012      	beq.n	80047b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	3324      	adds	r3, #36	; 0x24
 800478e:	4618      	mov	r0, r3
 8004790:	f000 fd1a 	bl	80051c8 <xTaskRemoveFromEventList>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d001      	beq.n	800479e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800479a:	f000 fded 	bl	8005378 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800479e:	7bfb      	ldrb	r3, [r7, #15]
 80047a0:	3b01      	subs	r3, #1
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80047a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	dce9      	bgt.n	8004782 <prvUnlockQueue+0x16>
 80047ae:	e000      	b.n	80047b2 <prvUnlockQueue+0x46>
					break;
 80047b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	22ff      	movs	r2, #255	; 0xff
 80047b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80047ba:	f001 fc35 	bl	8006028 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80047be:	f001 fc05 	bl	8005fcc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80047ca:	e011      	b.n	80047f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d012      	beq.n	80047fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	3310      	adds	r3, #16
 80047d8:	4618      	mov	r0, r3
 80047da:	f000 fcf5 	bl	80051c8 <xTaskRemoveFromEventList>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d001      	beq.n	80047e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80047e4:	f000 fdc8 	bl	8005378 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80047e8:	7bbb      	ldrb	r3, [r7, #14]
 80047ea:	3b01      	subs	r3, #1
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80047f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	dce9      	bgt.n	80047cc <prvUnlockQueue+0x60>
 80047f8:	e000      	b.n	80047fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80047fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	22ff      	movs	r2, #255	; 0xff
 8004800:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004804:	f001 fc10 	bl	8006028 <vPortExitCritical>
}
 8004808:	bf00      	nop
 800480a:	3710      	adds	r7, #16
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004818:	f001 fbd8 	bl	8005fcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004820:	2b00      	cmp	r3, #0
 8004822:	d102      	bne.n	800482a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004824:	2301      	movs	r3, #1
 8004826:	60fb      	str	r3, [r7, #12]
 8004828:	e001      	b.n	800482e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800482a:	2300      	movs	r3, #0
 800482c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800482e:	f001 fbfb 	bl	8006028 <vPortExitCritical>

	return xReturn;
 8004832:	68fb      	ldr	r3, [r7, #12]
}
 8004834:	4618      	mov	r0, r3
 8004836:	3710      	adds	r7, #16
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004844:	f001 fbc2 	bl	8005fcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004850:	429a      	cmp	r2, r3
 8004852:	d102      	bne.n	800485a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004854:	2301      	movs	r3, #1
 8004856:	60fb      	str	r3, [r7, #12]
 8004858:	e001      	b.n	800485e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800485a:	2300      	movs	r3, #0
 800485c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800485e:	f001 fbe3 	bl	8006028 <vPortExitCritical>

	return xReturn;
 8004862:	68fb      	ldr	r3, [r7, #12]
}
 8004864:	4618      	mov	r0, r3
 8004866:	3710      	adds	r7, #16
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004876:	2300      	movs	r3, #0
 8004878:	60fb      	str	r3, [r7, #12]
 800487a:	e014      	b.n	80048a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800487c:	4a0e      	ldr	r2, [pc, #56]	; (80048b8 <vQueueAddToRegistry+0x4c>)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d10b      	bne.n	80048a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004888:	490b      	ldr	r1, [pc, #44]	; (80048b8 <vQueueAddToRegistry+0x4c>)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	683a      	ldr	r2, [r7, #0]
 800488e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004892:	4a09      	ldr	r2, [pc, #36]	; (80048b8 <vQueueAddToRegistry+0x4c>)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	00db      	lsls	r3, r3, #3
 8004898:	4413      	add	r3, r2
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800489e:	e005      	b.n	80048ac <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	3301      	adds	r3, #1
 80048a4:	60fb      	str	r3, [r7, #12]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2b07      	cmp	r3, #7
 80048aa:	d9e7      	bls.n	800487c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80048ac:	bf00      	nop
 80048ae:	3714      	adds	r7, #20
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr
 80048b8:	20001a80 	.word	0x20001a80

080048bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80048cc:	f001 fb7e 	bl	8005fcc <vPortEnterCritical>
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048d6:	b25b      	sxtb	r3, r3
 80048d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048dc:	d103      	bne.n	80048e6 <vQueueWaitForMessageRestricted+0x2a>
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048ec:	b25b      	sxtb	r3, r3
 80048ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f2:	d103      	bne.n	80048fc <vQueueWaitForMessageRestricted+0x40>
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048fc:	f001 fb94 	bl	8006028 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004904:	2b00      	cmp	r3, #0
 8004906:	d106      	bne.n	8004916 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	3324      	adds	r3, #36	; 0x24
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	68b9      	ldr	r1, [r7, #8]
 8004910:	4618      	mov	r0, r3
 8004912:	f000 fc2f 	bl	8005174 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004916:	6978      	ldr	r0, [r7, #20]
 8004918:	f7ff ff28 	bl	800476c <prvUnlockQueue>
	}
 800491c:	bf00      	nop
 800491e:	3718      	adds	r7, #24
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004924:	b580      	push	{r7, lr}
 8004926:	b08e      	sub	sp, #56	; 0x38
 8004928:	af04      	add	r7, sp, #16
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	607a      	str	r2, [r7, #4]
 8004930:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004934:	2b00      	cmp	r3, #0
 8004936:	d109      	bne.n	800494c <xTaskCreateStatic+0x28>
 8004938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493c:	f383 8811 	msr	BASEPRI, r3
 8004940:	f3bf 8f6f 	isb	sy
 8004944:	f3bf 8f4f 	dsb	sy
 8004948:	623b      	str	r3, [r7, #32]
 800494a:	e7fe      	b.n	800494a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800494c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800494e:	2b00      	cmp	r3, #0
 8004950:	d109      	bne.n	8004966 <xTaskCreateStatic+0x42>
 8004952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004956:	f383 8811 	msr	BASEPRI, r3
 800495a:	f3bf 8f6f 	isb	sy
 800495e:	f3bf 8f4f 	dsb	sy
 8004962:	61fb      	str	r3, [r7, #28]
 8004964:	e7fe      	b.n	8004964 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004966:	235c      	movs	r3, #92	; 0x5c
 8004968:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	2b5c      	cmp	r3, #92	; 0x5c
 800496e:	d009      	beq.n	8004984 <xTaskCreateStatic+0x60>
 8004970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004974:	f383 8811 	msr	BASEPRI, r3
 8004978:	f3bf 8f6f 	isb	sy
 800497c:	f3bf 8f4f 	dsb	sy
 8004980:	61bb      	str	r3, [r7, #24]
 8004982:	e7fe      	b.n	8004982 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004984:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004988:	2b00      	cmp	r3, #0
 800498a:	d01e      	beq.n	80049ca <xTaskCreateStatic+0xa6>
 800498c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800498e:	2b00      	cmp	r3, #0
 8004990:	d01b      	beq.n	80049ca <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004994:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004998:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800499a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800499c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499e:	2202      	movs	r2, #2
 80049a0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80049a4:	2300      	movs	r3, #0
 80049a6:	9303      	str	r3, [sp, #12]
 80049a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049aa:	9302      	str	r3, [sp, #8]
 80049ac:	f107 0314 	add.w	r3, r7, #20
 80049b0:	9301      	str	r3, [sp, #4]
 80049b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	68b9      	ldr	r1, [r7, #8]
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f000 f850 	bl	8004a62 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80049c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80049c4:	f000 f8dc 	bl	8004b80 <prvAddNewTaskToReadyList>
 80049c8:	e001      	b.n	80049ce <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80049ca:	2300      	movs	r3, #0
 80049cc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80049ce:	697b      	ldr	r3, [r7, #20]
	}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3728      	adds	r7, #40	; 0x28
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b08c      	sub	sp, #48	; 0x30
 80049dc:	af04      	add	r7, sp, #16
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	603b      	str	r3, [r7, #0]
 80049e4:	4613      	mov	r3, r2
 80049e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80049e8:	88fb      	ldrh	r3, [r7, #6]
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	4618      	mov	r0, r3
 80049ee:	f001 fc07 	bl	8006200 <pvPortMalloc>
 80049f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00e      	beq.n	8004a18 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80049fa:	205c      	movs	r0, #92	; 0x5c
 80049fc:	f001 fc00 	bl	8006200 <pvPortMalloc>
 8004a00:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d003      	beq.n	8004a10 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	631a      	str	r2, [r3, #48]	; 0x30
 8004a0e:	e005      	b.n	8004a1c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004a10:	6978      	ldr	r0, [r7, #20]
 8004a12:	f001 fcb7 	bl	8006384 <vPortFree>
 8004a16:	e001      	b.n	8004a1c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d017      	beq.n	8004a52 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004a2a:	88fa      	ldrh	r2, [r7, #6]
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	9303      	str	r3, [sp, #12]
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	9302      	str	r3, [sp, #8]
 8004a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a36:	9301      	str	r3, [sp, #4]
 8004a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3a:	9300      	str	r3, [sp, #0]
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	68b9      	ldr	r1, [r7, #8]
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	f000 f80e 	bl	8004a62 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a46:	69f8      	ldr	r0, [r7, #28]
 8004a48:	f000 f89a 	bl	8004b80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	61bb      	str	r3, [r7, #24]
 8004a50:	e002      	b.n	8004a58 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004a52:	f04f 33ff 	mov.w	r3, #4294967295
 8004a56:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004a58:	69bb      	ldr	r3, [r7, #24]
	}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3720      	adds	r7, #32
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b088      	sub	sp, #32
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	60f8      	str	r0, [r7, #12]
 8004a6a:	60b9      	str	r1, [r7, #8]
 8004a6c:	607a      	str	r2, [r7, #4]
 8004a6e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a72:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	461a      	mov	r2, r3
 8004a7a:	21a5      	movs	r1, #165	; 0xa5
 8004a7c:	f001 fdcb 	bl	8006616 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	4413      	add	r3, r2
 8004a90:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	f023 0307 	bic.w	r3, r3, #7
 8004a98:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	f003 0307 	and.w	r3, r3, #7
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d009      	beq.n	8004ab8 <prvInitialiseNewTask+0x56>
 8004aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa8:	f383 8811 	msr	BASEPRI, r3
 8004aac:	f3bf 8f6f 	isb	sy
 8004ab0:	f3bf 8f4f 	dsb	sy
 8004ab4:	617b      	str	r3, [r7, #20]
 8004ab6:	e7fe      	b.n	8004ab6 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d01f      	beq.n	8004afe <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004abe:	2300      	movs	r3, #0
 8004ac0:	61fb      	str	r3, [r7, #28]
 8004ac2:	e012      	b.n	8004aea <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004ac4:	68ba      	ldr	r2, [r7, #8]
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	4413      	add	r3, r2
 8004aca:	7819      	ldrb	r1, [r3, #0]
 8004acc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	3334      	adds	r3, #52	; 0x34
 8004ad4:	460a      	mov	r2, r1
 8004ad6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004ad8:	68ba      	ldr	r2, [r7, #8]
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	4413      	add	r3, r2
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d006      	beq.n	8004af2 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	61fb      	str	r3, [r7, #28]
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	2b0f      	cmp	r3, #15
 8004aee:	d9e9      	bls.n	8004ac4 <prvInitialiseNewTask+0x62>
 8004af0:	e000      	b.n	8004af4 <prvInitialiseNewTask+0x92>
			{
				break;
 8004af2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004afc:	e003      	b.n	8004b06 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b08:	2b37      	cmp	r3, #55	; 0x37
 8004b0a:	d901      	bls.n	8004b10 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004b0c:	2337      	movs	r3, #55	; 0x37
 8004b0e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b14:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b1a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1e:	2200      	movs	r2, #0
 8004b20:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b24:	3304      	adds	r3, #4
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7ff f994 	bl	8003e54 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2e:	3318      	adds	r3, #24
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7ff f98f 	bl	8003e54 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b3a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b44:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b4a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b4e:	2200      	movs	r2, #0
 8004b50:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004b5a:	683a      	ldr	r2, [r7, #0]
 8004b5c:	68f9      	ldr	r1, [r7, #12]
 8004b5e:	69b8      	ldr	r0, [r7, #24]
 8004b60:	f001 f90c 	bl	8005d7c <pxPortInitialiseStack>
 8004b64:	4602      	mov	r2, r0
 8004b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b68:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d002      	beq.n	8004b76 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b76:	bf00      	nop
 8004b78:	3720      	adds	r7, #32
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
	...

08004b80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004b88:	f001 fa20 	bl	8005fcc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004b8c:	4b2d      	ldr	r3, [pc, #180]	; (8004c44 <prvAddNewTaskToReadyList+0xc4>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	3301      	adds	r3, #1
 8004b92:	4a2c      	ldr	r2, [pc, #176]	; (8004c44 <prvAddNewTaskToReadyList+0xc4>)
 8004b94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004b96:	4b2c      	ldr	r3, [pc, #176]	; (8004c48 <prvAddNewTaskToReadyList+0xc8>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d109      	bne.n	8004bb2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004b9e:	4a2a      	ldr	r2, [pc, #168]	; (8004c48 <prvAddNewTaskToReadyList+0xc8>)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004ba4:	4b27      	ldr	r3, [pc, #156]	; (8004c44 <prvAddNewTaskToReadyList+0xc4>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d110      	bne.n	8004bce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004bac:	f000 fc08 	bl	80053c0 <prvInitialiseTaskLists>
 8004bb0:	e00d      	b.n	8004bce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004bb2:	4b26      	ldr	r3, [pc, #152]	; (8004c4c <prvAddNewTaskToReadyList+0xcc>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d109      	bne.n	8004bce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004bba:	4b23      	ldr	r3, [pc, #140]	; (8004c48 <prvAddNewTaskToReadyList+0xc8>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d802      	bhi.n	8004bce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004bc8:	4a1f      	ldr	r2, [pc, #124]	; (8004c48 <prvAddNewTaskToReadyList+0xc8>)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004bce:	4b20      	ldr	r3, [pc, #128]	; (8004c50 <prvAddNewTaskToReadyList+0xd0>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	4a1e      	ldr	r2, [pc, #120]	; (8004c50 <prvAddNewTaskToReadyList+0xd0>)
 8004bd6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004bd8:	4b1d      	ldr	r3, [pc, #116]	; (8004c50 <prvAddNewTaskToReadyList+0xd0>)
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004be4:	4b1b      	ldr	r3, [pc, #108]	; (8004c54 <prvAddNewTaskToReadyList+0xd4>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d903      	bls.n	8004bf4 <prvAddNewTaskToReadyList+0x74>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf0:	4a18      	ldr	r2, [pc, #96]	; (8004c54 <prvAddNewTaskToReadyList+0xd4>)
 8004bf2:	6013      	str	r3, [r2, #0]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	4a15      	ldr	r2, [pc, #84]	; (8004c58 <prvAddNewTaskToReadyList+0xd8>)
 8004c02:	441a      	add	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	3304      	adds	r3, #4
 8004c08:	4619      	mov	r1, r3
 8004c0a:	4610      	mov	r0, r2
 8004c0c:	f7ff f92f 	bl	8003e6e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004c10:	f001 fa0a 	bl	8006028 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004c14:	4b0d      	ldr	r3, [pc, #52]	; (8004c4c <prvAddNewTaskToReadyList+0xcc>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00e      	beq.n	8004c3a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004c1c:	4b0a      	ldr	r3, [pc, #40]	; (8004c48 <prvAddNewTaskToReadyList+0xc8>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d207      	bcs.n	8004c3a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004c2a:	4b0c      	ldr	r3, [pc, #48]	; (8004c5c <prvAddNewTaskToReadyList+0xdc>)
 8004c2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c30:	601a      	str	r2, [r3, #0]
 8004c32:	f3bf 8f4f 	dsb	sy
 8004c36:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c3a:	bf00      	nop
 8004c3c:	3708      	adds	r7, #8
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	20000c24 	.word	0x20000c24
 8004c48:	20000750 	.word	0x20000750
 8004c4c:	20000c30 	.word	0x20000c30
 8004c50:	20000c40 	.word	0x20000c40
 8004c54:	20000c2c 	.word	0x20000c2c
 8004c58:	20000754 	.word	0x20000754
 8004c5c:	e000ed04 	.word	0xe000ed04

08004c60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d016      	beq.n	8004ca0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004c72:	4b13      	ldr	r3, [pc, #76]	; (8004cc0 <vTaskDelay+0x60>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d009      	beq.n	8004c8e <vTaskDelay+0x2e>
 8004c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7e:	f383 8811 	msr	BASEPRI, r3
 8004c82:	f3bf 8f6f 	isb	sy
 8004c86:	f3bf 8f4f 	dsb	sy
 8004c8a:	60bb      	str	r3, [r7, #8]
 8004c8c:	e7fe      	b.n	8004c8c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004c8e:	f000 f87f 	bl	8004d90 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004c92:	2100      	movs	r1, #0
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 fcd7 	bl	8005648 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004c9a:	f000 f887 	bl	8004dac <xTaskResumeAll>
 8004c9e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d107      	bne.n	8004cb6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004ca6:	4b07      	ldr	r3, [pc, #28]	; (8004cc4 <vTaskDelay+0x64>)
 8004ca8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cac:	601a      	str	r2, [r3, #0]
 8004cae:	f3bf 8f4f 	dsb	sy
 8004cb2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004cb6:	bf00      	nop
 8004cb8:	3710      	adds	r7, #16
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	20000c4c 	.word	0x20000c4c
 8004cc4:	e000ed04 	.word	0xe000ed04

08004cc8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b08a      	sub	sp, #40	; 0x28
 8004ccc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004cd6:	463a      	mov	r2, r7
 8004cd8:	1d39      	adds	r1, r7, #4
 8004cda:	f107 0308 	add.w	r3, r7, #8
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7ff f864 	bl	8003dac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004ce4:	6839      	ldr	r1, [r7, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	9202      	str	r2, [sp, #8]
 8004cec:	9301      	str	r3, [sp, #4]
 8004cee:	2300      	movs	r3, #0
 8004cf0:	9300      	str	r3, [sp, #0]
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	460a      	mov	r2, r1
 8004cf6:	4920      	ldr	r1, [pc, #128]	; (8004d78 <vTaskStartScheduler+0xb0>)
 8004cf8:	4820      	ldr	r0, [pc, #128]	; (8004d7c <vTaskStartScheduler+0xb4>)
 8004cfa:	f7ff fe13 	bl	8004924 <xTaskCreateStatic>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	4b1f      	ldr	r3, [pc, #124]	; (8004d80 <vTaskStartScheduler+0xb8>)
 8004d02:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004d04:	4b1e      	ldr	r3, [pc, #120]	; (8004d80 <vTaskStartScheduler+0xb8>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d002      	beq.n	8004d12 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	617b      	str	r3, [r7, #20]
 8004d10:	e001      	b.n	8004d16 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004d12:	2300      	movs	r3, #0
 8004d14:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d102      	bne.n	8004d22 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004d1c:	f000 fce8 	bl	80056f0 <xTimerCreateTimerTask>
 8004d20:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d115      	bne.n	8004d54 <vTaskStartScheduler+0x8c>
 8004d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2c:	f383 8811 	msr	BASEPRI, r3
 8004d30:	f3bf 8f6f 	isb	sy
 8004d34:	f3bf 8f4f 	dsb	sy
 8004d38:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004d3a:	4b12      	ldr	r3, [pc, #72]	; (8004d84 <vTaskStartScheduler+0xbc>)
 8004d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8004d40:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004d42:	4b11      	ldr	r3, [pc, #68]	; (8004d88 <vTaskStartScheduler+0xc0>)
 8004d44:	2201      	movs	r2, #1
 8004d46:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004d48:	4b10      	ldr	r3, [pc, #64]	; (8004d8c <vTaskStartScheduler+0xc4>)
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004d4e:	f001 f89f 	bl	8005e90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004d52:	e00d      	b.n	8004d70 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d5a:	d109      	bne.n	8004d70 <vTaskStartScheduler+0xa8>
 8004d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d60:	f383 8811 	msr	BASEPRI, r3
 8004d64:	f3bf 8f6f 	isb	sy
 8004d68:	f3bf 8f4f 	dsb	sy
 8004d6c:	60fb      	str	r3, [r7, #12]
 8004d6e:	e7fe      	b.n	8004d6e <vTaskStartScheduler+0xa6>
}
 8004d70:	bf00      	nop
 8004d72:	3718      	adds	r7, #24
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	08006e60 	.word	0x08006e60
 8004d7c:	08005391 	.word	0x08005391
 8004d80:	20000c48 	.word	0x20000c48
 8004d84:	20000c44 	.word	0x20000c44
 8004d88:	20000c30 	.word	0x20000c30
 8004d8c:	20000c28 	.word	0x20000c28

08004d90 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004d90:	b480      	push	{r7}
 8004d92:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004d94:	4b04      	ldr	r3, [pc, #16]	; (8004da8 <vTaskSuspendAll+0x18>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	3301      	adds	r3, #1
 8004d9a:	4a03      	ldr	r2, [pc, #12]	; (8004da8 <vTaskSuspendAll+0x18>)
 8004d9c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004d9e:	bf00      	nop
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr
 8004da8:	20000c4c 	.word	0x20000c4c

08004dac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004db2:	2300      	movs	r3, #0
 8004db4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004db6:	2300      	movs	r3, #0
 8004db8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004dba:	4b41      	ldr	r3, [pc, #260]	; (8004ec0 <xTaskResumeAll+0x114>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d109      	bne.n	8004dd6 <xTaskResumeAll+0x2a>
 8004dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc6:	f383 8811 	msr	BASEPRI, r3
 8004dca:	f3bf 8f6f 	isb	sy
 8004dce:	f3bf 8f4f 	dsb	sy
 8004dd2:	603b      	str	r3, [r7, #0]
 8004dd4:	e7fe      	b.n	8004dd4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004dd6:	f001 f8f9 	bl	8005fcc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004dda:	4b39      	ldr	r3, [pc, #228]	; (8004ec0 <xTaskResumeAll+0x114>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	3b01      	subs	r3, #1
 8004de0:	4a37      	ldr	r2, [pc, #220]	; (8004ec0 <xTaskResumeAll+0x114>)
 8004de2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004de4:	4b36      	ldr	r3, [pc, #216]	; (8004ec0 <xTaskResumeAll+0x114>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d162      	bne.n	8004eb2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004dec:	4b35      	ldr	r3, [pc, #212]	; (8004ec4 <xTaskResumeAll+0x118>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d05e      	beq.n	8004eb2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004df4:	e02f      	b.n	8004e56 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004df6:	4b34      	ldr	r3, [pc, #208]	; (8004ec8 <xTaskResumeAll+0x11c>)
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	3318      	adds	r3, #24
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7ff f890 	bl	8003f28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	3304      	adds	r3, #4
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f7ff f88b 	bl	8003f28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e16:	4b2d      	ldr	r3, [pc, #180]	; (8004ecc <xTaskResumeAll+0x120>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d903      	bls.n	8004e26 <xTaskResumeAll+0x7a>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e22:	4a2a      	ldr	r2, [pc, #168]	; (8004ecc <xTaskResumeAll+0x120>)
 8004e24:	6013      	str	r3, [r2, #0]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	4413      	add	r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	4a27      	ldr	r2, [pc, #156]	; (8004ed0 <xTaskResumeAll+0x124>)
 8004e34:	441a      	add	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	3304      	adds	r3, #4
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	4610      	mov	r0, r2
 8004e3e:	f7ff f816 	bl	8003e6e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e46:	4b23      	ldr	r3, [pc, #140]	; (8004ed4 <xTaskResumeAll+0x128>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d302      	bcc.n	8004e56 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004e50:	4b21      	ldr	r3, [pc, #132]	; (8004ed8 <xTaskResumeAll+0x12c>)
 8004e52:	2201      	movs	r2, #1
 8004e54:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e56:	4b1c      	ldr	r3, [pc, #112]	; (8004ec8 <xTaskResumeAll+0x11c>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d1cb      	bne.n	8004df6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d001      	beq.n	8004e68 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004e64:	f000 fb46 	bl	80054f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004e68:	4b1c      	ldr	r3, [pc, #112]	; (8004edc <xTaskResumeAll+0x130>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d010      	beq.n	8004e96 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004e74:	f000 f846 	bl	8004f04 <xTaskIncrementTick>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d002      	beq.n	8004e84 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004e7e:	4b16      	ldr	r3, [pc, #88]	; (8004ed8 <xTaskResumeAll+0x12c>)
 8004e80:	2201      	movs	r2, #1
 8004e82:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	3b01      	subs	r3, #1
 8004e88:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d1f1      	bne.n	8004e74 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004e90:	4b12      	ldr	r3, [pc, #72]	; (8004edc <xTaskResumeAll+0x130>)
 8004e92:	2200      	movs	r2, #0
 8004e94:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004e96:	4b10      	ldr	r3, [pc, #64]	; (8004ed8 <xTaskResumeAll+0x12c>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d009      	beq.n	8004eb2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004ea2:	4b0f      	ldr	r3, [pc, #60]	; (8004ee0 <xTaskResumeAll+0x134>)
 8004ea4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ea8:	601a      	str	r2, [r3, #0]
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004eb2:	f001 f8b9 	bl	8006028 <vPortExitCritical>

	return xAlreadyYielded;
 8004eb6:	68bb      	ldr	r3, [r7, #8]
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	20000c4c 	.word	0x20000c4c
 8004ec4:	20000c24 	.word	0x20000c24
 8004ec8:	20000be4 	.word	0x20000be4
 8004ecc:	20000c2c 	.word	0x20000c2c
 8004ed0:	20000754 	.word	0x20000754
 8004ed4:	20000750 	.word	0x20000750
 8004ed8:	20000c38 	.word	0x20000c38
 8004edc:	20000c34 	.word	0x20000c34
 8004ee0:	e000ed04 	.word	0xe000ed04

08004ee4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004eea:	4b05      	ldr	r3, [pc, #20]	; (8004f00 <xTaskGetTickCount+0x1c>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004ef0:	687b      	ldr	r3, [r7, #4]
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	370c      	adds	r7, #12
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	20000c28 	.word	0x20000c28

08004f04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b086      	sub	sp, #24
 8004f08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f0e:	4b4e      	ldr	r3, [pc, #312]	; (8005048 <xTaskIncrementTick+0x144>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	f040 8088 	bne.w	8005028 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004f18:	4b4c      	ldr	r3, [pc, #304]	; (800504c <xTaskIncrementTick+0x148>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004f20:	4a4a      	ldr	r2, [pc, #296]	; (800504c <xTaskIncrementTick+0x148>)
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d11f      	bne.n	8004f6c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004f2c:	4b48      	ldr	r3, [pc, #288]	; (8005050 <xTaskIncrementTick+0x14c>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d009      	beq.n	8004f4a <xTaskIncrementTick+0x46>
 8004f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3a:	f383 8811 	msr	BASEPRI, r3
 8004f3e:	f3bf 8f6f 	isb	sy
 8004f42:	f3bf 8f4f 	dsb	sy
 8004f46:	603b      	str	r3, [r7, #0]
 8004f48:	e7fe      	b.n	8004f48 <xTaskIncrementTick+0x44>
 8004f4a:	4b41      	ldr	r3, [pc, #260]	; (8005050 <xTaskIncrementTick+0x14c>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	60fb      	str	r3, [r7, #12]
 8004f50:	4b40      	ldr	r3, [pc, #256]	; (8005054 <xTaskIncrementTick+0x150>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a3e      	ldr	r2, [pc, #248]	; (8005050 <xTaskIncrementTick+0x14c>)
 8004f56:	6013      	str	r3, [r2, #0]
 8004f58:	4a3e      	ldr	r2, [pc, #248]	; (8005054 <xTaskIncrementTick+0x150>)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6013      	str	r3, [r2, #0]
 8004f5e:	4b3e      	ldr	r3, [pc, #248]	; (8005058 <xTaskIncrementTick+0x154>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	3301      	adds	r3, #1
 8004f64:	4a3c      	ldr	r2, [pc, #240]	; (8005058 <xTaskIncrementTick+0x154>)
 8004f66:	6013      	str	r3, [r2, #0]
 8004f68:	f000 fac4 	bl	80054f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004f6c:	4b3b      	ldr	r3, [pc, #236]	; (800505c <xTaskIncrementTick+0x158>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d349      	bcc.n	800500a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f76:	4b36      	ldr	r3, [pc, #216]	; (8005050 <xTaskIncrementTick+0x14c>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d104      	bne.n	8004f8a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f80:	4b36      	ldr	r3, [pc, #216]	; (800505c <xTaskIncrementTick+0x158>)
 8004f82:	f04f 32ff 	mov.w	r2, #4294967295
 8004f86:	601a      	str	r2, [r3, #0]
					break;
 8004f88:	e03f      	b.n	800500a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f8a:	4b31      	ldr	r3, [pc, #196]	; (8005050 <xTaskIncrementTick+0x14c>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d203      	bcs.n	8004faa <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004fa2:	4a2e      	ldr	r2, [pc, #184]	; (800505c <xTaskIncrementTick+0x158>)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004fa8:	e02f      	b.n	800500a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	3304      	adds	r3, #4
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7fe ffba 	bl	8003f28 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d004      	beq.n	8004fc6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	3318      	adds	r3, #24
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7fe ffb1 	bl	8003f28 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fca:	4b25      	ldr	r3, [pc, #148]	; (8005060 <xTaskIncrementTick+0x15c>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d903      	bls.n	8004fda <xTaskIncrementTick+0xd6>
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd6:	4a22      	ldr	r2, [pc, #136]	; (8005060 <xTaskIncrementTick+0x15c>)
 8004fd8:	6013      	str	r3, [r2, #0]
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fde:	4613      	mov	r3, r2
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	4413      	add	r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	4a1f      	ldr	r2, [pc, #124]	; (8005064 <xTaskIncrementTick+0x160>)
 8004fe8:	441a      	add	r2, r3
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	3304      	adds	r3, #4
 8004fee:	4619      	mov	r1, r3
 8004ff0:	4610      	mov	r0, r2
 8004ff2:	f7fe ff3c 	bl	8003e6e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ffa:	4b1b      	ldr	r3, [pc, #108]	; (8005068 <xTaskIncrementTick+0x164>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005000:	429a      	cmp	r2, r3
 8005002:	d3b8      	bcc.n	8004f76 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005004:	2301      	movs	r3, #1
 8005006:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005008:	e7b5      	b.n	8004f76 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800500a:	4b17      	ldr	r3, [pc, #92]	; (8005068 <xTaskIncrementTick+0x164>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005010:	4914      	ldr	r1, [pc, #80]	; (8005064 <xTaskIncrementTick+0x160>)
 8005012:	4613      	mov	r3, r2
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	4413      	add	r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	440b      	add	r3, r1
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d907      	bls.n	8005032 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8005022:	2301      	movs	r3, #1
 8005024:	617b      	str	r3, [r7, #20]
 8005026:	e004      	b.n	8005032 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005028:	4b10      	ldr	r3, [pc, #64]	; (800506c <xTaskIncrementTick+0x168>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	3301      	adds	r3, #1
 800502e:	4a0f      	ldr	r2, [pc, #60]	; (800506c <xTaskIncrementTick+0x168>)
 8005030:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005032:	4b0f      	ldr	r3, [pc, #60]	; (8005070 <xTaskIncrementTick+0x16c>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d001      	beq.n	800503e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800503a:	2301      	movs	r3, #1
 800503c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800503e:	697b      	ldr	r3, [r7, #20]
}
 8005040:	4618      	mov	r0, r3
 8005042:	3718      	adds	r7, #24
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	20000c4c 	.word	0x20000c4c
 800504c:	20000c28 	.word	0x20000c28
 8005050:	20000bdc 	.word	0x20000bdc
 8005054:	20000be0 	.word	0x20000be0
 8005058:	20000c3c 	.word	0x20000c3c
 800505c:	20000c44 	.word	0x20000c44
 8005060:	20000c2c 	.word	0x20000c2c
 8005064:	20000754 	.word	0x20000754
 8005068:	20000750 	.word	0x20000750
 800506c:	20000c34 	.word	0x20000c34
 8005070:	20000c38 	.word	0x20000c38

08005074 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005074:	b480      	push	{r7}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800507a:	4b27      	ldr	r3, [pc, #156]	; (8005118 <vTaskSwitchContext+0xa4>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d003      	beq.n	800508a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005082:	4b26      	ldr	r3, [pc, #152]	; (800511c <vTaskSwitchContext+0xa8>)
 8005084:	2201      	movs	r2, #1
 8005086:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005088:	e040      	b.n	800510c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800508a:	4b24      	ldr	r3, [pc, #144]	; (800511c <vTaskSwitchContext+0xa8>)
 800508c:	2200      	movs	r2, #0
 800508e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005090:	4b23      	ldr	r3, [pc, #140]	; (8005120 <vTaskSwitchContext+0xac>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	60fb      	str	r3, [r7, #12]
 8005096:	e00f      	b.n	80050b8 <vTaskSwitchContext+0x44>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d109      	bne.n	80050b2 <vTaskSwitchContext+0x3e>
 800509e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a2:	f383 8811 	msr	BASEPRI, r3
 80050a6:	f3bf 8f6f 	isb	sy
 80050aa:	f3bf 8f4f 	dsb	sy
 80050ae:	607b      	str	r3, [r7, #4]
 80050b0:	e7fe      	b.n	80050b0 <vTaskSwitchContext+0x3c>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	3b01      	subs	r3, #1
 80050b6:	60fb      	str	r3, [r7, #12]
 80050b8:	491a      	ldr	r1, [pc, #104]	; (8005124 <vTaskSwitchContext+0xb0>)
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	4613      	mov	r3, r2
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	4413      	add	r3, r2
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	440b      	add	r3, r1
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d0e5      	beq.n	8005098 <vTaskSwitchContext+0x24>
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	4613      	mov	r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	4413      	add	r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	4a13      	ldr	r2, [pc, #76]	; (8005124 <vTaskSwitchContext+0xb0>)
 80050d8:	4413      	add	r3, r2
 80050da:	60bb      	str	r3, [r7, #8]
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	685a      	ldr	r2, [r3, #4]
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	605a      	str	r2, [r3, #4]
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	685a      	ldr	r2, [r3, #4]
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	3308      	adds	r3, #8
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d104      	bne.n	80050fc <vTaskSwitchContext+0x88>
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	685a      	ldr	r2, [r3, #4]
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	605a      	str	r2, [r3, #4]
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	4a09      	ldr	r2, [pc, #36]	; (8005128 <vTaskSwitchContext+0xb4>)
 8005104:	6013      	str	r3, [r2, #0]
 8005106:	4a06      	ldr	r2, [pc, #24]	; (8005120 <vTaskSwitchContext+0xac>)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6013      	str	r3, [r2, #0]
}
 800510c:	bf00      	nop
 800510e:	3714      	adds	r7, #20
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr
 8005118:	20000c4c 	.word	0x20000c4c
 800511c:	20000c38 	.word	0x20000c38
 8005120:	20000c2c 	.word	0x20000c2c
 8005124:	20000754 	.word	0x20000754
 8005128:	20000750 	.word	0x20000750

0800512c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d109      	bne.n	8005150 <vTaskPlaceOnEventList+0x24>
 800513c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005140:	f383 8811 	msr	BASEPRI, r3
 8005144:	f3bf 8f6f 	isb	sy
 8005148:	f3bf 8f4f 	dsb	sy
 800514c:	60fb      	str	r3, [r7, #12]
 800514e:	e7fe      	b.n	800514e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005150:	4b07      	ldr	r3, [pc, #28]	; (8005170 <vTaskPlaceOnEventList+0x44>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	3318      	adds	r3, #24
 8005156:	4619      	mov	r1, r3
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f7fe feac 	bl	8003eb6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800515e:	2101      	movs	r1, #1
 8005160:	6838      	ldr	r0, [r7, #0]
 8005162:	f000 fa71 	bl	8005648 <prvAddCurrentTaskToDelayedList>
}
 8005166:	bf00      	nop
 8005168:	3710      	adds	r7, #16
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	20000750 	.word	0x20000750

08005174 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005174:	b580      	push	{r7, lr}
 8005176:	b086      	sub	sp, #24
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d109      	bne.n	800519a <vTaskPlaceOnEventListRestricted+0x26>
 8005186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800518a:	f383 8811 	msr	BASEPRI, r3
 800518e:	f3bf 8f6f 	isb	sy
 8005192:	f3bf 8f4f 	dsb	sy
 8005196:	617b      	str	r3, [r7, #20]
 8005198:	e7fe      	b.n	8005198 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800519a:	4b0a      	ldr	r3, [pc, #40]	; (80051c4 <vTaskPlaceOnEventListRestricted+0x50>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	3318      	adds	r3, #24
 80051a0:	4619      	mov	r1, r3
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f7fe fe63 	bl	8003e6e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d002      	beq.n	80051b4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80051ae:	f04f 33ff 	mov.w	r3, #4294967295
 80051b2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80051b4:	6879      	ldr	r1, [r7, #4]
 80051b6:	68b8      	ldr	r0, [r7, #8]
 80051b8:	f000 fa46 	bl	8005648 <prvAddCurrentTaskToDelayedList>
	}
 80051bc:	bf00      	nop
 80051be:	3718      	adds	r7, #24
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	20000750 	.word	0x20000750

080051c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b086      	sub	sp, #24
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d109      	bne.n	80051f2 <xTaskRemoveFromEventList+0x2a>
 80051de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e2:	f383 8811 	msr	BASEPRI, r3
 80051e6:	f3bf 8f6f 	isb	sy
 80051ea:	f3bf 8f4f 	dsb	sy
 80051ee:	60fb      	str	r3, [r7, #12]
 80051f0:	e7fe      	b.n	80051f0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	3318      	adds	r3, #24
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7fe fe96 	bl	8003f28 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051fc:	4b1d      	ldr	r3, [pc, #116]	; (8005274 <xTaskRemoveFromEventList+0xac>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d11d      	bne.n	8005240 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	3304      	adds	r3, #4
 8005208:	4618      	mov	r0, r3
 800520a:	f7fe fe8d 	bl	8003f28 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005212:	4b19      	ldr	r3, [pc, #100]	; (8005278 <xTaskRemoveFromEventList+0xb0>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	429a      	cmp	r2, r3
 8005218:	d903      	bls.n	8005222 <xTaskRemoveFromEventList+0x5a>
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521e:	4a16      	ldr	r2, [pc, #88]	; (8005278 <xTaskRemoveFromEventList+0xb0>)
 8005220:	6013      	str	r3, [r2, #0]
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005226:	4613      	mov	r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4413      	add	r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	4a13      	ldr	r2, [pc, #76]	; (800527c <xTaskRemoveFromEventList+0xb4>)
 8005230:	441a      	add	r2, r3
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	3304      	adds	r3, #4
 8005236:	4619      	mov	r1, r3
 8005238:	4610      	mov	r0, r2
 800523a:	f7fe fe18 	bl	8003e6e <vListInsertEnd>
 800523e:	e005      	b.n	800524c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	3318      	adds	r3, #24
 8005244:	4619      	mov	r1, r3
 8005246:	480e      	ldr	r0, [pc, #56]	; (8005280 <xTaskRemoveFromEventList+0xb8>)
 8005248:	f7fe fe11 	bl	8003e6e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005250:	4b0c      	ldr	r3, [pc, #48]	; (8005284 <xTaskRemoveFromEventList+0xbc>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005256:	429a      	cmp	r2, r3
 8005258:	d905      	bls.n	8005266 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800525a:	2301      	movs	r3, #1
 800525c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800525e:	4b0a      	ldr	r3, [pc, #40]	; (8005288 <xTaskRemoveFromEventList+0xc0>)
 8005260:	2201      	movs	r2, #1
 8005262:	601a      	str	r2, [r3, #0]
 8005264:	e001      	b.n	800526a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005266:	2300      	movs	r3, #0
 8005268:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800526a:	697b      	ldr	r3, [r7, #20]
}
 800526c:	4618      	mov	r0, r3
 800526e:	3718      	adds	r7, #24
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	20000c4c 	.word	0x20000c4c
 8005278:	20000c2c 	.word	0x20000c2c
 800527c:	20000754 	.word	0x20000754
 8005280:	20000be4 	.word	0x20000be4
 8005284:	20000750 	.word	0x20000750
 8005288:	20000c38 	.word	0x20000c38

0800528c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005294:	4b06      	ldr	r3, [pc, #24]	; (80052b0 <vTaskInternalSetTimeOutState+0x24>)
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800529c:	4b05      	ldr	r3, [pc, #20]	; (80052b4 <vTaskInternalSetTimeOutState+0x28>)
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	605a      	str	r2, [r3, #4]
}
 80052a4:	bf00      	nop
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr
 80052b0:	20000c3c 	.word	0x20000c3c
 80052b4:	20000c28 	.word	0x20000c28

080052b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b088      	sub	sp, #32
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d109      	bne.n	80052dc <xTaskCheckForTimeOut+0x24>
 80052c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052cc:	f383 8811 	msr	BASEPRI, r3
 80052d0:	f3bf 8f6f 	isb	sy
 80052d4:	f3bf 8f4f 	dsb	sy
 80052d8:	613b      	str	r3, [r7, #16]
 80052da:	e7fe      	b.n	80052da <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d109      	bne.n	80052f6 <xTaskCheckForTimeOut+0x3e>
 80052e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e6:	f383 8811 	msr	BASEPRI, r3
 80052ea:	f3bf 8f6f 	isb	sy
 80052ee:	f3bf 8f4f 	dsb	sy
 80052f2:	60fb      	str	r3, [r7, #12]
 80052f4:	e7fe      	b.n	80052f4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80052f6:	f000 fe69 	bl	8005fcc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80052fa:	4b1d      	ldr	r3, [pc, #116]	; (8005370 <xTaskCheckForTimeOut+0xb8>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	69ba      	ldr	r2, [r7, #24]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005312:	d102      	bne.n	800531a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005314:	2300      	movs	r3, #0
 8005316:	61fb      	str	r3, [r7, #28]
 8005318:	e023      	b.n	8005362 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	4b15      	ldr	r3, [pc, #84]	; (8005374 <xTaskCheckForTimeOut+0xbc>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	429a      	cmp	r2, r3
 8005324:	d007      	beq.n	8005336 <xTaskCheckForTimeOut+0x7e>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	69ba      	ldr	r2, [r7, #24]
 800532c:	429a      	cmp	r2, r3
 800532e:	d302      	bcc.n	8005336 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005330:	2301      	movs	r3, #1
 8005332:	61fb      	str	r3, [r7, #28]
 8005334:	e015      	b.n	8005362 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	429a      	cmp	r2, r3
 800533e:	d20b      	bcs.n	8005358 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	1ad2      	subs	r2, r2, r3
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f7ff ff9d 	bl	800528c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005352:	2300      	movs	r3, #0
 8005354:	61fb      	str	r3, [r7, #28]
 8005356:	e004      	b.n	8005362 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	2200      	movs	r2, #0
 800535c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800535e:	2301      	movs	r3, #1
 8005360:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005362:	f000 fe61 	bl	8006028 <vPortExitCritical>

	return xReturn;
 8005366:	69fb      	ldr	r3, [r7, #28]
}
 8005368:	4618      	mov	r0, r3
 800536a:	3720      	adds	r7, #32
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	20000c28 	.word	0x20000c28
 8005374:	20000c3c 	.word	0x20000c3c

08005378 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005378:	b480      	push	{r7}
 800537a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800537c:	4b03      	ldr	r3, [pc, #12]	; (800538c <vTaskMissedYield+0x14>)
 800537e:	2201      	movs	r2, #1
 8005380:	601a      	str	r2, [r3, #0]
}
 8005382:	bf00      	nop
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr
 800538c:	20000c38 	.word	0x20000c38

08005390 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005398:	f000 f852 	bl	8005440 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800539c:	4b06      	ldr	r3, [pc, #24]	; (80053b8 <prvIdleTask+0x28>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d9f9      	bls.n	8005398 <prvIdleTask+0x8>
			{
				taskYIELD();
 80053a4:	4b05      	ldr	r3, [pc, #20]	; (80053bc <prvIdleTask+0x2c>)
 80053a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053aa:	601a      	str	r2, [r3, #0]
 80053ac:	f3bf 8f4f 	dsb	sy
 80053b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80053b4:	e7f0      	b.n	8005398 <prvIdleTask+0x8>
 80053b6:	bf00      	nop
 80053b8:	20000754 	.word	0x20000754
 80053bc:	e000ed04 	.word	0xe000ed04

080053c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80053c6:	2300      	movs	r3, #0
 80053c8:	607b      	str	r3, [r7, #4]
 80053ca:	e00c      	b.n	80053e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	4613      	mov	r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4413      	add	r3, r2
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	4a12      	ldr	r2, [pc, #72]	; (8005420 <prvInitialiseTaskLists+0x60>)
 80053d8:	4413      	add	r3, r2
 80053da:	4618      	mov	r0, r3
 80053dc:	f7fe fd1a 	bl	8003e14 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	3301      	adds	r3, #1
 80053e4:	607b      	str	r3, [r7, #4]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2b37      	cmp	r3, #55	; 0x37
 80053ea:	d9ef      	bls.n	80053cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80053ec:	480d      	ldr	r0, [pc, #52]	; (8005424 <prvInitialiseTaskLists+0x64>)
 80053ee:	f7fe fd11 	bl	8003e14 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80053f2:	480d      	ldr	r0, [pc, #52]	; (8005428 <prvInitialiseTaskLists+0x68>)
 80053f4:	f7fe fd0e 	bl	8003e14 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80053f8:	480c      	ldr	r0, [pc, #48]	; (800542c <prvInitialiseTaskLists+0x6c>)
 80053fa:	f7fe fd0b 	bl	8003e14 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80053fe:	480c      	ldr	r0, [pc, #48]	; (8005430 <prvInitialiseTaskLists+0x70>)
 8005400:	f7fe fd08 	bl	8003e14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005404:	480b      	ldr	r0, [pc, #44]	; (8005434 <prvInitialiseTaskLists+0x74>)
 8005406:	f7fe fd05 	bl	8003e14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800540a:	4b0b      	ldr	r3, [pc, #44]	; (8005438 <prvInitialiseTaskLists+0x78>)
 800540c:	4a05      	ldr	r2, [pc, #20]	; (8005424 <prvInitialiseTaskLists+0x64>)
 800540e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005410:	4b0a      	ldr	r3, [pc, #40]	; (800543c <prvInitialiseTaskLists+0x7c>)
 8005412:	4a05      	ldr	r2, [pc, #20]	; (8005428 <prvInitialiseTaskLists+0x68>)
 8005414:	601a      	str	r2, [r3, #0]
}
 8005416:	bf00      	nop
 8005418:	3708      	adds	r7, #8
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	20000754 	.word	0x20000754
 8005424:	20000bb4 	.word	0x20000bb4
 8005428:	20000bc8 	.word	0x20000bc8
 800542c:	20000be4 	.word	0x20000be4
 8005430:	20000bf8 	.word	0x20000bf8
 8005434:	20000c10 	.word	0x20000c10
 8005438:	20000bdc 	.word	0x20000bdc
 800543c:	20000be0 	.word	0x20000be0

08005440 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005446:	e019      	b.n	800547c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005448:	f000 fdc0 	bl	8005fcc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800544c:	4b0f      	ldr	r3, [pc, #60]	; (800548c <prvCheckTasksWaitingTermination+0x4c>)
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	3304      	adds	r3, #4
 8005458:	4618      	mov	r0, r3
 800545a:	f7fe fd65 	bl	8003f28 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800545e:	4b0c      	ldr	r3, [pc, #48]	; (8005490 <prvCheckTasksWaitingTermination+0x50>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	3b01      	subs	r3, #1
 8005464:	4a0a      	ldr	r2, [pc, #40]	; (8005490 <prvCheckTasksWaitingTermination+0x50>)
 8005466:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005468:	4b0a      	ldr	r3, [pc, #40]	; (8005494 <prvCheckTasksWaitingTermination+0x54>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	3b01      	subs	r3, #1
 800546e:	4a09      	ldr	r2, [pc, #36]	; (8005494 <prvCheckTasksWaitingTermination+0x54>)
 8005470:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005472:	f000 fdd9 	bl	8006028 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 f80e 	bl	8005498 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800547c:	4b05      	ldr	r3, [pc, #20]	; (8005494 <prvCheckTasksWaitingTermination+0x54>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d1e1      	bne.n	8005448 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005484:	bf00      	nop
 8005486:	3708      	adds	r7, #8
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	20000bf8 	.word	0x20000bf8
 8005490:	20000c24 	.word	0x20000c24
 8005494:	20000c0c 	.word	0x20000c0c

08005498 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d108      	bne.n	80054bc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ae:	4618      	mov	r0, r3
 80054b0:	f000 ff68 	bl	8006384 <vPortFree>
				vPortFree( pxTCB );
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f000 ff65 	bl	8006384 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80054ba:	e017      	b.n	80054ec <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d103      	bne.n	80054ce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 ff5c 	bl	8006384 <vPortFree>
	}
 80054cc:	e00e      	b.n	80054ec <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d009      	beq.n	80054ec <prvDeleteTCB+0x54>
 80054d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054dc:	f383 8811 	msr	BASEPRI, r3
 80054e0:	f3bf 8f6f 	isb	sy
 80054e4:	f3bf 8f4f 	dsb	sy
 80054e8:	60fb      	str	r3, [r7, #12]
 80054ea:	e7fe      	b.n	80054ea <prvDeleteTCB+0x52>
	}
 80054ec:	bf00      	nop
 80054ee:	3710      	adds	r7, #16
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054fa:	4b0c      	ldr	r3, [pc, #48]	; (800552c <prvResetNextTaskUnblockTime+0x38>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d104      	bne.n	800550e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005504:	4b0a      	ldr	r3, [pc, #40]	; (8005530 <prvResetNextTaskUnblockTime+0x3c>)
 8005506:	f04f 32ff 	mov.w	r2, #4294967295
 800550a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800550c:	e008      	b.n	8005520 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800550e:	4b07      	ldr	r3, [pc, #28]	; (800552c <prvResetNextTaskUnblockTime+0x38>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	4a04      	ldr	r2, [pc, #16]	; (8005530 <prvResetNextTaskUnblockTime+0x3c>)
 800551e:	6013      	str	r3, [r2, #0]
}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr
 800552c:	20000bdc 	.word	0x20000bdc
 8005530:	20000c44 	.word	0x20000c44

08005534 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800553a:	4b0b      	ldr	r3, [pc, #44]	; (8005568 <xTaskGetSchedulerState+0x34>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d102      	bne.n	8005548 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005542:	2301      	movs	r3, #1
 8005544:	607b      	str	r3, [r7, #4]
 8005546:	e008      	b.n	800555a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005548:	4b08      	ldr	r3, [pc, #32]	; (800556c <xTaskGetSchedulerState+0x38>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d102      	bne.n	8005556 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005550:	2302      	movs	r3, #2
 8005552:	607b      	str	r3, [r7, #4]
 8005554:	e001      	b.n	800555a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005556:	2300      	movs	r3, #0
 8005558:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800555a:	687b      	ldr	r3, [r7, #4]
	}
 800555c:	4618      	mov	r0, r3
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr
 8005568:	20000c30 	.word	0x20000c30
 800556c:	20000c4c 	.word	0x20000c4c

08005570 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005570:	b580      	push	{r7, lr}
 8005572:	b086      	sub	sp, #24
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800557c:	2300      	movs	r3, #0
 800557e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d054      	beq.n	8005630 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005586:	4b2d      	ldr	r3, [pc, #180]	; (800563c <xTaskPriorityDisinherit+0xcc>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	429a      	cmp	r2, r3
 800558e:	d009      	beq.n	80055a4 <xTaskPriorityDisinherit+0x34>
 8005590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005594:	f383 8811 	msr	BASEPRI, r3
 8005598:	f3bf 8f6f 	isb	sy
 800559c:	f3bf 8f4f 	dsb	sy
 80055a0:	60fb      	str	r3, [r7, #12]
 80055a2:	e7fe      	b.n	80055a2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d109      	bne.n	80055c0 <xTaskPriorityDisinherit+0x50>
 80055ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b0:	f383 8811 	msr	BASEPRI, r3
 80055b4:	f3bf 8f6f 	isb	sy
 80055b8:	f3bf 8f4f 	dsb	sy
 80055bc:	60bb      	str	r3, [r7, #8]
 80055be:	e7fe      	b.n	80055be <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055c4:	1e5a      	subs	r2, r3, #1
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d02c      	beq.n	8005630 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d128      	bne.n	8005630 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	3304      	adds	r3, #4
 80055e2:	4618      	mov	r0, r3
 80055e4:	f7fe fca0 	bl	8003f28 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005600:	4b0f      	ldr	r3, [pc, #60]	; (8005640 <xTaskPriorityDisinherit+0xd0>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	429a      	cmp	r2, r3
 8005606:	d903      	bls.n	8005610 <xTaskPriorityDisinherit+0xa0>
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800560c:	4a0c      	ldr	r2, [pc, #48]	; (8005640 <xTaskPriorityDisinherit+0xd0>)
 800560e:	6013      	str	r3, [r2, #0]
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005614:	4613      	mov	r3, r2
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	4413      	add	r3, r2
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4a09      	ldr	r2, [pc, #36]	; (8005644 <xTaskPriorityDisinherit+0xd4>)
 800561e:	441a      	add	r2, r3
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	3304      	adds	r3, #4
 8005624:	4619      	mov	r1, r3
 8005626:	4610      	mov	r0, r2
 8005628:	f7fe fc21 	bl	8003e6e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800562c:	2301      	movs	r3, #1
 800562e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005630:	697b      	ldr	r3, [r7, #20]
	}
 8005632:	4618      	mov	r0, r3
 8005634:	3718      	adds	r7, #24
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	20000750 	.word	0x20000750
 8005640:	20000c2c 	.word	0x20000c2c
 8005644:	20000754 	.word	0x20000754

08005648 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005652:	4b21      	ldr	r3, [pc, #132]	; (80056d8 <prvAddCurrentTaskToDelayedList+0x90>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005658:	4b20      	ldr	r3, [pc, #128]	; (80056dc <prvAddCurrentTaskToDelayedList+0x94>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	3304      	adds	r3, #4
 800565e:	4618      	mov	r0, r3
 8005660:	f7fe fc62 	bl	8003f28 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800566a:	d10a      	bne.n	8005682 <prvAddCurrentTaskToDelayedList+0x3a>
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d007      	beq.n	8005682 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005672:	4b1a      	ldr	r3, [pc, #104]	; (80056dc <prvAddCurrentTaskToDelayedList+0x94>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	3304      	adds	r3, #4
 8005678:	4619      	mov	r1, r3
 800567a:	4819      	ldr	r0, [pc, #100]	; (80056e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800567c:	f7fe fbf7 	bl	8003e6e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005680:	e026      	b.n	80056d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4413      	add	r3, r2
 8005688:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800568a:	4b14      	ldr	r3, [pc, #80]	; (80056dc <prvAddCurrentTaskToDelayedList+0x94>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68ba      	ldr	r2, [r7, #8]
 8005690:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005692:	68ba      	ldr	r2, [r7, #8]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	429a      	cmp	r2, r3
 8005698:	d209      	bcs.n	80056ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800569a:	4b12      	ldr	r3, [pc, #72]	; (80056e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	4b0f      	ldr	r3, [pc, #60]	; (80056dc <prvAddCurrentTaskToDelayedList+0x94>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	3304      	adds	r3, #4
 80056a4:	4619      	mov	r1, r3
 80056a6:	4610      	mov	r0, r2
 80056a8:	f7fe fc05 	bl	8003eb6 <vListInsert>
}
 80056ac:	e010      	b.n	80056d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80056ae:	4b0e      	ldr	r3, [pc, #56]	; (80056e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	4b0a      	ldr	r3, [pc, #40]	; (80056dc <prvAddCurrentTaskToDelayedList+0x94>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	3304      	adds	r3, #4
 80056b8:	4619      	mov	r1, r3
 80056ba:	4610      	mov	r0, r2
 80056bc:	f7fe fbfb 	bl	8003eb6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80056c0:	4b0a      	ldr	r3, [pc, #40]	; (80056ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68ba      	ldr	r2, [r7, #8]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d202      	bcs.n	80056d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80056ca:	4a08      	ldr	r2, [pc, #32]	; (80056ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	6013      	str	r3, [r2, #0]
}
 80056d0:	bf00      	nop
 80056d2:	3710      	adds	r7, #16
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	20000c28 	.word	0x20000c28
 80056dc:	20000750 	.word	0x20000750
 80056e0:	20000c10 	.word	0x20000c10
 80056e4:	20000be0 	.word	0x20000be0
 80056e8:	20000bdc 	.word	0x20000bdc
 80056ec:	20000c44 	.word	0x20000c44

080056f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b08a      	sub	sp, #40	; 0x28
 80056f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80056f6:	2300      	movs	r3, #0
 80056f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80056fa:	f000 faff 	bl	8005cfc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80056fe:	4b1c      	ldr	r3, [pc, #112]	; (8005770 <xTimerCreateTimerTask+0x80>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d021      	beq.n	800574a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005706:	2300      	movs	r3, #0
 8005708:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800570a:	2300      	movs	r3, #0
 800570c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800570e:	1d3a      	adds	r2, r7, #4
 8005710:	f107 0108 	add.w	r1, r7, #8
 8005714:	f107 030c 	add.w	r3, r7, #12
 8005718:	4618      	mov	r0, r3
 800571a:	f7fe fb61 	bl	8003de0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800571e:	6879      	ldr	r1, [r7, #4]
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	9202      	str	r2, [sp, #8]
 8005726:	9301      	str	r3, [sp, #4]
 8005728:	2302      	movs	r3, #2
 800572a:	9300      	str	r3, [sp, #0]
 800572c:	2300      	movs	r3, #0
 800572e:	460a      	mov	r2, r1
 8005730:	4910      	ldr	r1, [pc, #64]	; (8005774 <xTimerCreateTimerTask+0x84>)
 8005732:	4811      	ldr	r0, [pc, #68]	; (8005778 <xTimerCreateTimerTask+0x88>)
 8005734:	f7ff f8f6 	bl	8004924 <xTaskCreateStatic>
 8005738:	4602      	mov	r2, r0
 800573a:	4b10      	ldr	r3, [pc, #64]	; (800577c <xTimerCreateTimerTask+0x8c>)
 800573c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800573e:	4b0f      	ldr	r3, [pc, #60]	; (800577c <xTimerCreateTimerTask+0x8c>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d001      	beq.n	800574a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005746:	2301      	movs	r3, #1
 8005748:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d109      	bne.n	8005764 <xTimerCreateTimerTask+0x74>
 8005750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005754:	f383 8811 	msr	BASEPRI, r3
 8005758:	f3bf 8f6f 	isb	sy
 800575c:	f3bf 8f4f 	dsb	sy
 8005760:	613b      	str	r3, [r7, #16]
 8005762:	e7fe      	b.n	8005762 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005764:	697b      	ldr	r3, [r7, #20]
}
 8005766:	4618      	mov	r0, r3
 8005768:	3718      	adds	r7, #24
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	20000c80 	.word	0x20000c80
 8005774:	08006e68 	.word	0x08006e68
 8005778:	080058b1 	.word	0x080058b1
 800577c:	20000c84 	.word	0x20000c84

08005780 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b08a      	sub	sp, #40	; 0x28
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	607a      	str	r2, [r7, #4]
 800578c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800578e:	2300      	movs	r3, #0
 8005790:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d109      	bne.n	80057ac <xTimerGenericCommand+0x2c>
 8005798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579c:	f383 8811 	msr	BASEPRI, r3
 80057a0:	f3bf 8f6f 	isb	sy
 80057a4:	f3bf 8f4f 	dsb	sy
 80057a8:	623b      	str	r3, [r7, #32]
 80057aa:	e7fe      	b.n	80057aa <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80057ac:	4b19      	ldr	r3, [pc, #100]	; (8005814 <xTimerGenericCommand+0x94>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d02a      	beq.n	800580a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	2b05      	cmp	r3, #5
 80057c4:	dc18      	bgt.n	80057f8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80057c6:	f7ff feb5 	bl	8005534 <xTaskGetSchedulerState>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d109      	bne.n	80057e4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80057d0:	4b10      	ldr	r3, [pc, #64]	; (8005814 <xTimerGenericCommand+0x94>)
 80057d2:	6818      	ldr	r0, [r3, #0]
 80057d4:	f107 0110 	add.w	r1, r7, #16
 80057d8:	2300      	movs	r3, #0
 80057da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057dc:	f7fe fccc 	bl	8004178 <xQueueGenericSend>
 80057e0:	6278      	str	r0, [r7, #36]	; 0x24
 80057e2:	e012      	b.n	800580a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80057e4:	4b0b      	ldr	r3, [pc, #44]	; (8005814 <xTimerGenericCommand+0x94>)
 80057e6:	6818      	ldr	r0, [r3, #0]
 80057e8:	f107 0110 	add.w	r1, r7, #16
 80057ec:	2300      	movs	r3, #0
 80057ee:	2200      	movs	r2, #0
 80057f0:	f7fe fcc2 	bl	8004178 <xQueueGenericSend>
 80057f4:	6278      	str	r0, [r7, #36]	; 0x24
 80057f6:	e008      	b.n	800580a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80057f8:	4b06      	ldr	r3, [pc, #24]	; (8005814 <xTimerGenericCommand+0x94>)
 80057fa:	6818      	ldr	r0, [r3, #0]
 80057fc:	f107 0110 	add.w	r1, r7, #16
 8005800:	2300      	movs	r3, #0
 8005802:	683a      	ldr	r2, [r7, #0]
 8005804:	f7fe fdb2 	bl	800436c <xQueueGenericSendFromISR>
 8005808:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800580a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800580c:	4618      	mov	r0, r3
 800580e:	3728      	adds	r7, #40	; 0x28
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	20000c80 	.word	0x20000c80

08005818 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b088      	sub	sp, #32
 800581c:	af02      	add	r7, sp, #8
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005822:	4b22      	ldr	r3, [pc, #136]	; (80058ac <prvProcessExpiredTimer+0x94>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	3304      	adds	r3, #4
 8005830:	4618      	mov	r0, r3
 8005832:	f7fe fb79 	bl	8003f28 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800583c:	f003 0304 	and.w	r3, r3, #4
 8005840:	2b00      	cmp	r3, #0
 8005842:	d021      	beq.n	8005888 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	699a      	ldr	r2, [r3, #24]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	18d1      	adds	r1, r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	683a      	ldr	r2, [r7, #0]
 8005850:	6978      	ldr	r0, [r7, #20]
 8005852:	f000 f8d1 	bl	80059f8 <prvInsertTimerInActiveList>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d01e      	beq.n	800589a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800585c:	2300      	movs	r3, #0
 800585e:	9300      	str	r3, [sp, #0]
 8005860:	2300      	movs	r3, #0
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	2100      	movs	r1, #0
 8005866:	6978      	ldr	r0, [r7, #20]
 8005868:	f7ff ff8a 	bl	8005780 <xTimerGenericCommand>
 800586c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d112      	bne.n	800589a <prvProcessExpiredTimer+0x82>
 8005874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005878:	f383 8811 	msr	BASEPRI, r3
 800587c:	f3bf 8f6f 	isb	sy
 8005880:	f3bf 8f4f 	dsb	sy
 8005884:	60fb      	str	r3, [r7, #12]
 8005886:	e7fe      	b.n	8005886 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800588e:	f023 0301 	bic.w	r3, r3, #1
 8005892:	b2da      	uxtb	r2, r3
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	6a1b      	ldr	r3, [r3, #32]
 800589e:	6978      	ldr	r0, [r7, #20]
 80058a0:	4798      	blx	r3
}
 80058a2:	bf00      	nop
 80058a4:	3718      	adds	r7, #24
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	20000c78 	.word	0x20000c78

080058b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80058b8:	f107 0308 	add.w	r3, r7, #8
 80058bc:	4618      	mov	r0, r3
 80058be:	f000 f857 	bl	8005970 <prvGetNextExpireTime>
 80058c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	4619      	mov	r1, r3
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f000 f803 	bl	80058d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80058ce:	f000 f8d5 	bl	8005a7c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80058d2:	e7f1      	b.n	80058b8 <prvTimerTask+0x8>

080058d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80058de:	f7ff fa57 	bl	8004d90 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80058e2:	f107 0308 	add.w	r3, r7, #8
 80058e6:	4618      	mov	r0, r3
 80058e8:	f000 f866 	bl	80059b8 <prvSampleTimeNow>
 80058ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d130      	bne.n	8005956 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d10a      	bne.n	8005910 <prvProcessTimerOrBlockTask+0x3c>
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	429a      	cmp	r2, r3
 8005900:	d806      	bhi.n	8005910 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005902:	f7ff fa53 	bl	8004dac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005906:	68f9      	ldr	r1, [r7, #12]
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f7ff ff85 	bl	8005818 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800590e:	e024      	b.n	800595a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d008      	beq.n	8005928 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005916:	4b13      	ldr	r3, [pc, #76]	; (8005964 <prvProcessTimerOrBlockTask+0x90>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d101      	bne.n	8005924 <prvProcessTimerOrBlockTask+0x50>
 8005920:	2301      	movs	r3, #1
 8005922:	e000      	b.n	8005926 <prvProcessTimerOrBlockTask+0x52>
 8005924:	2300      	movs	r3, #0
 8005926:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005928:	4b0f      	ldr	r3, [pc, #60]	; (8005968 <prvProcessTimerOrBlockTask+0x94>)
 800592a:	6818      	ldr	r0, [r3, #0]
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	683a      	ldr	r2, [r7, #0]
 8005934:	4619      	mov	r1, r3
 8005936:	f7fe ffc1 	bl	80048bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800593a:	f7ff fa37 	bl	8004dac <xTaskResumeAll>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d10a      	bne.n	800595a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005944:	4b09      	ldr	r3, [pc, #36]	; (800596c <prvProcessTimerOrBlockTask+0x98>)
 8005946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800594a:	601a      	str	r2, [r3, #0]
 800594c:	f3bf 8f4f 	dsb	sy
 8005950:	f3bf 8f6f 	isb	sy
}
 8005954:	e001      	b.n	800595a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005956:	f7ff fa29 	bl	8004dac <xTaskResumeAll>
}
 800595a:	bf00      	nop
 800595c:	3710      	adds	r7, #16
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	20000c7c 	.word	0x20000c7c
 8005968:	20000c80 	.word	0x20000c80
 800596c:	e000ed04 	.word	0xe000ed04

08005970 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005970:	b480      	push	{r7}
 8005972:	b085      	sub	sp, #20
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005978:	4b0e      	ldr	r3, [pc, #56]	; (80059b4 <prvGetNextExpireTime+0x44>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d101      	bne.n	8005986 <prvGetNextExpireTime+0x16>
 8005982:	2201      	movs	r2, #1
 8005984:	e000      	b.n	8005988 <prvGetNextExpireTime+0x18>
 8005986:	2200      	movs	r2, #0
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d105      	bne.n	80059a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005994:	4b07      	ldr	r3, [pc, #28]	; (80059b4 <prvGetNextExpireTime+0x44>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	60fb      	str	r3, [r7, #12]
 800599e:	e001      	b.n	80059a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80059a0:	2300      	movs	r3, #0
 80059a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80059a4:	68fb      	ldr	r3, [r7, #12]
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3714      	adds	r7, #20
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	20000c78 	.word	0x20000c78

080059b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80059c0:	f7ff fa90 	bl	8004ee4 <xTaskGetTickCount>
 80059c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80059c6:	4b0b      	ldr	r3, [pc, #44]	; (80059f4 <prvSampleTimeNow+0x3c>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d205      	bcs.n	80059dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80059d0:	f000 f930 	bl	8005c34 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	601a      	str	r2, [r3, #0]
 80059da:	e002      	b.n	80059e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80059e2:	4a04      	ldr	r2, [pc, #16]	; (80059f4 <prvSampleTimeNow+0x3c>)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80059e8:	68fb      	ldr	r3, [r7, #12]
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	20000c88 	.word	0x20000c88

080059f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b086      	sub	sp, #24
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	607a      	str	r2, [r7, #4]
 8005a04:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005a06:	2300      	movs	r3, #0
 8005a08:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	68ba      	ldr	r2, [r7, #8]
 8005a0e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005a16:	68ba      	ldr	r2, [r7, #8]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d812      	bhi.n	8005a44 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	1ad2      	subs	r2, r2, r3
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	699b      	ldr	r3, [r3, #24]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d302      	bcc.n	8005a32 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	617b      	str	r3, [r7, #20]
 8005a30:	e01b      	b.n	8005a6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005a32:	4b10      	ldr	r3, [pc, #64]	; (8005a74 <prvInsertTimerInActiveList+0x7c>)
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	3304      	adds	r3, #4
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	4610      	mov	r0, r2
 8005a3e:	f7fe fa3a 	bl	8003eb6 <vListInsert>
 8005a42:	e012      	b.n	8005a6a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d206      	bcs.n	8005a5a <prvInsertTimerInActiveList+0x62>
 8005a4c:	68ba      	ldr	r2, [r7, #8]
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d302      	bcc.n	8005a5a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005a54:	2301      	movs	r3, #1
 8005a56:	617b      	str	r3, [r7, #20]
 8005a58:	e007      	b.n	8005a6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005a5a:	4b07      	ldr	r3, [pc, #28]	; (8005a78 <prvInsertTimerInActiveList+0x80>)
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	3304      	adds	r3, #4
 8005a62:	4619      	mov	r1, r3
 8005a64:	4610      	mov	r0, r2
 8005a66:	f7fe fa26 	bl	8003eb6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005a6a:	697b      	ldr	r3, [r7, #20]
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3718      	adds	r7, #24
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	20000c7c 	.word	0x20000c7c
 8005a78:	20000c78 	.word	0x20000c78

08005a7c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b08e      	sub	sp, #56	; 0x38
 8005a80:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005a82:	e0c6      	b.n	8005c12 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	da17      	bge.n	8005aba <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005a8a:	1d3b      	adds	r3, r7, #4
 8005a8c:	3304      	adds	r3, #4
 8005a8e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d109      	bne.n	8005aaa <prvProcessReceivedCommands+0x2e>
 8005a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a9a:	f383 8811 	msr	BASEPRI, r3
 8005a9e:	f3bf 8f6f 	isb	sy
 8005aa2:	f3bf 8f4f 	dsb	sy
 8005aa6:	61fb      	str	r3, [r7, #28]
 8005aa8:	e7fe      	b.n	8005aa8 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ab0:	6850      	ldr	r0, [r2, #4]
 8005ab2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ab4:	6892      	ldr	r2, [r2, #8]
 8005ab6:	4611      	mov	r1, r2
 8005ab8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f2c0 80a7 	blt.w	8005c10 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac8:	695b      	ldr	r3, [r3, #20]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d004      	beq.n	8005ad8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad0:	3304      	adds	r3, #4
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f7fe fa28 	bl	8003f28 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005ad8:	463b      	mov	r3, r7
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7ff ff6c 	bl	80059b8 <prvSampleTimeNow>
 8005ae0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2b09      	cmp	r3, #9
 8005ae6:	f200 8094 	bhi.w	8005c12 <prvProcessReceivedCommands+0x196>
 8005aea:	a201      	add	r2, pc, #4	; (adr r2, 8005af0 <prvProcessReceivedCommands+0x74>)
 8005aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af0:	08005b19 	.word	0x08005b19
 8005af4:	08005b19 	.word	0x08005b19
 8005af8:	08005b19 	.word	0x08005b19
 8005afc:	08005b8b 	.word	0x08005b8b
 8005b00:	08005b9f 	.word	0x08005b9f
 8005b04:	08005be7 	.word	0x08005be7
 8005b08:	08005b19 	.word	0x08005b19
 8005b0c:	08005b19 	.word	0x08005b19
 8005b10:	08005b8b 	.word	0x08005b8b
 8005b14:	08005b9f 	.word	0x08005b9f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b1e:	f043 0301 	orr.w	r3, r3, #1
 8005b22:	b2da      	uxtb	r2, r3
 8005b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005b2a:	68ba      	ldr	r2, [r7, #8]
 8005b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b2e:	699b      	ldr	r3, [r3, #24]
 8005b30:	18d1      	adds	r1, r2, r3
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b38:	f7ff ff5e 	bl	80059f8 <prvInsertTimerInActiveList>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d067      	beq.n	8005c12 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b48:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b50:	f003 0304 	and.w	r3, r3, #4
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d05c      	beq.n	8005c12 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005b58:	68ba      	ldr	r2, [r7, #8]
 8005b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	441a      	add	r2, r3
 8005b60:	2300      	movs	r3, #0
 8005b62:	9300      	str	r3, [sp, #0]
 8005b64:	2300      	movs	r3, #0
 8005b66:	2100      	movs	r1, #0
 8005b68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b6a:	f7ff fe09 	bl	8005780 <xTimerGenericCommand>
 8005b6e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005b70:	6a3b      	ldr	r3, [r7, #32]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d14d      	bne.n	8005c12 <prvProcessReceivedCommands+0x196>
 8005b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7a:	f383 8811 	msr	BASEPRI, r3
 8005b7e:	f3bf 8f6f 	isb	sy
 8005b82:	f3bf 8f4f 	dsb	sy
 8005b86:	61bb      	str	r3, [r7, #24]
 8005b88:	e7fe      	b.n	8005b88 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b90:	f023 0301 	bic.w	r3, r3, #1
 8005b94:	b2da      	uxtb	r2, r3
 8005b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b98:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005b9c:	e039      	b.n	8005c12 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ba4:	f043 0301 	orr.w	r3, r3, #1
 8005ba8:	b2da      	uxtb	r2, r3
 8005baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005bb0:	68ba      	ldr	r2, [r7, #8]
 8005bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d109      	bne.n	8005bd2 <prvProcessReceivedCommands+0x156>
 8005bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc2:	f383 8811 	msr	BASEPRI, r3
 8005bc6:	f3bf 8f6f 	isb	sy
 8005bca:	f3bf 8f4f 	dsb	sy
 8005bce:	617b      	str	r3, [r7, #20]
 8005bd0:	e7fe      	b.n	8005bd0 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd4:	699a      	ldr	r2, [r3, #24]
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd8:	18d1      	adds	r1, r2, r3
 8005bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005be0:	f7ff ff0a 	bl	80059f8 <prvInsertTimerInActiveList>
					break;
 8005be4:	e015      	b.n	8005c12 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bec:	f003 0302 	and.w	r3, r3, #2
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d103      	bne.n	8005bfc <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8005bf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bf6:	f000 fbc5 	bl	8006384 <vPortFree>
 8005bfa:	e00a      	b.n	8005c12 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c02:	f023 0301 	bic.w	r3, r3, #1
 8005c06:	b2da      	uxtb	r2, r3
 8005c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005c0e:	e000      	b.n	8005c12 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005c10:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005c12:	4b07      	ldr	r3, [pc, #28]	; (8005c30 <prvProcessReceivedCommands+0x1b4>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	1d39      	adds	r1, r7, #4
 8005c18:	2200      	movs	r2, #0
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f7fe fc3a 	bl	8004494 <xQueueReceive>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f47f af2e 	bne.w	8005a84 <prvProcessReceivedCommands+0x8>
	}
}
 8005c28:	bf00      	nop
 8005c2a:	3730      	adds	r7, #48	; 0x30
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	20000c80 	.word	0x20000c80

08005c34 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b088      	sub	sp, #32
 8005c38:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005c3a:	e047      	b.n	8005ccc <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c3c:	4b2d      	ldr	r3, [pc, #180]	; (8005cf4 <prvSwitchTimerLists+0xc0>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c46:	4b2b      	ldr	r3, [pc, #172]	; (8005cf4 <prvSwitchTimerLists+0xc0>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	3304      	adds	r3, #4
 8005c54:	4618      	mov	r0, r3
 8005c56:	f7fe f967 	bl	8003f28 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c68:	f003 0304 	and.w	r3, r3, #4
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d02d      	beq.n	8005ccc <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	699b      	ldr	r3, [r3, #24]
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	4413      	add	r3, r2
 8005c78:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005c7a:	68ba      	ldr	r2, [r7, #8]
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d90e      	bls.n	8005ca0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005c8e:	4b19      	ldr	r3, [pc, #100]	; (8005cf4 <prvSwitchTimerLists+0xc0>)
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	3304      	adds	r3, #4
 8005c96:	4619      	mov	r1, r3
 8005c98:	4610      	mov	r0, r2
 8005c9a:	f7fe f90c 	bl	8003eb6 <vListInsert>
 8005c9e:	e015      	b.n	8005ccc <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	9300      	str	r3, [sp, #0]
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	693a      	ldr	r2, [r7, #16]
 8005ca8:	2100      	movs	r1, #0
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	f7ff fd68 	bl	8005780 <xTimerGenericCommand>
 8005cb0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d109      	bne.n	8005ccc <prvSwitchTimerLists+0x98>
 8005cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cbc:	f383 8811 	msr	BASEPRI, r3
 8005cc0:	f3bf 8f6f 	isb	sy
 8005cc4:	f3bf 8f4f 	dsb	sy
 8005cc8:	603b      	str	r3, [r7, #0]
 8005cca:	e7fe      	b.n	8005cca <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005ccc:	4b09      	ldr	r3, [pc, #36]	; (8005cf4 <prvSwitchTimerLists+0xc0>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d1b2      	bne.n	8005c3c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005cd6:	4b07      	ldr	r3, [pc, #28]	; (8005cf4 <prvSwitchTimerLists+0xc0>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005cdc:	4b06      	ldr	r3, [pc, #24]	; (8005cf8 <prvSwitchTimerLists+0xc4>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a04      	ldr	r2, [pc, #16]	; (8005cf4 <prvSwitchTimerLists+0xc0>)
 8005ce2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005ce4:	4a04      	ldr	r2, [pc, #16]	; (8005cf8 <prvSwitchTimerLists+0xc4>)
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	6013      	str	r3, [r2, #0]
}
 8005cea:	bf00      	nop
 8005cec:	3718      	adds	r7, #24
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	20000c78 	.word	0x20000c78
 8005cf8:	20000c7c 	.word	0x20000c7c

08005cfc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005d02:	f000 f963 	bl	8005fcc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005d06:	4b15      	ldr	r3, [pc, #84]	; (8005d5c <prvCheckForValidListAndQueue+0x60>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d120      	bne.n	8005d50 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005d0e:	4814      	ldr	r0, [pc, #80]	; (8005d60 <prvCheckForValidListAndQueue+0x64>)
 8005d10:	f7fe f880 	bl	8003e14 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005d14:	4813      	ldr	r0, [pc, #76]	; (8005d64 <prvCheckForValidListAndQueue+0x68>)
 8005d16:	f7fe f87d 	bl	8003e14 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005d1a:	4b13      	ldr	r3, [pc, #76]	; (8005d68 <prvCheckForValidListAndQueue+0x6c>)
 8005d1c:	4a10      	ldr	r2, [pc, #64]	; (8005d60 <prvCheckForValidListAndQueue+0x64>)
 8005d1e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005d20:	4b12      	ldr	r3, [pc, #72]	; (8005d6c <prvCheckForValidListAndQueue+0x70>)
 8005d22:	4a10      	ldr	r2, [pc, #64]	; (8005d64 <prvCheckForValidListAndQueue+0x68>)
 8005d24:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005d26:	2300      	movs	r3, #0
 8005d28:	9300      	str	r3, [sp, #0]
 8005d2a:	4b11      	ldr	r3, [pc, #68]	; (8005d70 <prvCheckForValidListAndQueue+0x74>)
 8005d2c:	4a11      	ldr	r2, [pc, #68]	; (8005d74 <prvCheckForValidListAndQueue+0x78>)
 8005d2e:	2110      	movs	r1, #16
 8005d30:	200a      	movs	r0, #10
 8005d32:	f7fe f98b 	bl	800404c <xQueueGenericCreateStatic>
 8005d36:	4602      	mov	r2, r0
 8005d38:	4b08      	ldr	r3, [pc, #32]	; (8005d5c <prvCheckForValidListAndQueue+0x60>)
 8005d3a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005d3c:	4b07      	ldr	r3, [pc, #28]	; (8005d5c <prvCheckForValidListAndQueue+0x60>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d005      	beq.n	8005d50 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005d44:	4b05      	ldr	r3, [pc, #20]	; (8005d5c <prvCheckForValidListAndQueue+0x60>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	490b      	ldr	r1, [pc, #44]	; (8005d78 <prvCheckForValidListAndQueue+0x7c>)
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7fe fd8e 	bl	800486c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d50:	f000 f96a 	bl	8006028 <vPortExitCritical>
}
 8005d54:	bf00      	nop
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	20000c80 	.word	0x20000c80
 8005d60:	20000c50 	.word	0x20000c50
 8005d64:	20000c64 	.word	0x20000c64
 8005d68:	20000c78 	.word	0x20000c78
 8005d6c:	20000c7c 	.word	0x20000c7c
 8005d70:	20000d2c 	.word	0x20000d2c
 8005d74:	20000c8c 	.word	0x20000c8c
 8005d78:	08006e70 	.word	0x08006e70

08005d7c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b085      	sub	sp, #20
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	3b04      	subs	r3, #4
 8005d8c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005d94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	3b04      	subs	r3, #4
 8005d9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	f023 0201 	bic.w	r2, r3, #1
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	3b04      	subs	r3, #4
 8005daa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005dac:	4a0c      	ldr	r2, [pc, #48]	; (8005de0 <pxPortInitialiseStack+0x64>)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	3b14      	subs	r3, #20
 8005db6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	3b04      	subs	r3, #4
 8005dc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f06f 0202 	mvn.w	r2, #2
 8005dca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	3b20      	subs	r3, #32
 8005dd0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3714      	adds	r7, #20
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr
 8005de0:	08005de5 	.word	0x08005de5

08005de4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005dea:	2300      	movs	r3, #0
 8005dec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005dee:	4b11      	ldr	r3, [pc, #68]	; (8005e34 <prvTaskExitError+0x50>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df6:	d009      	beq.n	8005e0c <prvTaskExitError+0x28>
 8005df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dfc:	f383 8811 	msr	BASEPRI, r3
 8005e00:	f3bf 8f6f 	isb	sy
 8005e04:	f3bf 8f4f 	dsb	sy
 8005e08:	60fb      	str	r3, [r7, #12]
 8005e0a:	e7fe      	b.n	8005e0a <prvTaskExitError+0x26>
 8005e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e10:	f383 8811 	msr	BASEPRI, r3
 8005e14:	f3bf 8f6f 	isb	sy
 8005e18:	f3bf 8f4f 	dsb	sy
 8005e1c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005e1e:	bf00      	nop
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d0fc      	beq.n	8005e20 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005e26:	bf00      	nop
 8005e28:	3714      	adds	r7, #20
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
 8005e32:	bf00      	nop
 8005e34:	2000000c 	.word	0x2000000c
	...

08005e40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005e40:	4b07      	ldr	r3, [pc, #28]	; (8005e60 <pxCurrentTCBConst2>)
 8005e42:	6819      	ldr	r1, [r3, #0]
 8005e44:	6808      	ldr	r0, [r1, #0]
 8005e46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e4a:	f380 8809 	msr	PSP, r0
 8005e4e:	f3bf 8f6f 	isb	sy
 8005e52:	f04f 0000 	mov.w	r0, #0
 8005e56:	f380 8811 	msr	BASEPRI, r0
 8005e5a:	4770      	bx	lr
 8005e5c:	f3af 8000 	nop.w

08005e60 <pxCurrentTCBConst2>:
 8005e60:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005e64:	bf00      	nop
 8005e66:	bf00      	nop

08005e68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005e68:	4808      	ldr	r0, [pc, #32]	; (8005e8c <prvPortStartFirstTask+0x24>)
 8005e6a:	6800      	ldr	r0, [r0, #0]
 8005e6c:	6800      	ldr	r0, [r0, #0]
 8005e6e:	f380 8808 	msr	MSP, r0
 8005e72:	f04f 0000 	mov.w	r0, #0
 8005e76:	f380 8814 	msr	CONTROL, r0
 8005e7a:	b662      	cpsie	i
 8005e7c:	b661      	cpsie	f
 8005e7e:	f3bf 8f4f 	dsb	sy
 8005e82:	f3bf 8f6f 	isb	sy
 8005e86:	df00      	svc	0
 8005e88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005e8a:	bf00      	nop
 8005e8c:	e000ed08 	.word	0xe000ed08

08005e90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005e96:	4b44      	ldr	r3, [pc, #272]	; (8005fa8 <xPortStartScheduler+0x118>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a44      	ldr	r2, [pc, #272]	; (8005fac <xPortStartScheduler+0x11c>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d109      	bne.n	8005eb4 <xPortStartScheduler+0x24>
 8005ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea4:	f383 8811 	msr	BASEPRI, r3
 8005ea8:	f3bf 8f6f 	isb	sy
 8005eac:	f3bf 8f4f 	dsb	sy
 8005eb0:	613b      	str	r3, [r7, #16]
 8005eb2:	e7fe      	b.n	8005eb2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005eb4:	4b3c      	ldr	r3, [pc, #240]	; (8005fa8 <xPortStartScheduler+0x118>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a3d      	ldr	r2, [pc, #244]	; (8005fb0 <xPortStartScheduler+0x120>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d109      	bne.n	8005ed2 <xPortStartScheduler+0x42>
 8005ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec2:	f383 8811 	msr	BASEPRI, r3
 8005ec6:	f3bf 8f6f 	isb	sy
 8005eca:	f3bf 8f4f 	dsb	sy
 8005ece:	60fb      	str	r3, [r7, #12]
 8005ed0:	e7fe      	b.n	8005ed0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005ed2:	4b38      	ldr	r3, [pc, #224]	; (8005fb4 <xPortStartScheduler+0x124>)
 8005ed4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	22ff      	movs	r2, #255	; 0xff
 8005ee2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005eec:	78fb      	ldrb	r3, [r7, #3]
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005ef4:	b2da      	uxtb	r2, r3
 8005ef6:	4b30      	ldr	r3, [pc, #192]	; (8005fb8 <xPortStartScheduler+0x128>)
 8005ef8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005efa:	4b30      	ldr	r3, [pc, #192]	; (8005fbc <xPortStartScheduler+0x12c>)
 8005efc:	2207      	movs	r2, #7
 8005efe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f00:	e009      	b.n	8005f16 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005f02:	4b2e      	ldr	r3, [pc, #184]	; (8005fbc <xPortStartScheduler+0x12c>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	3b01      	subs	r3, #1
 8005f08:	4a2c      	ldr	r2, [pc, #176]	; (8005fbc <xPortStartScheduler+0x12c>)
 8005f0a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005f0c:	78fb      	ldrb	r3, [r7, #3]
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	005b      	lsls	r3, r3, #1
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f16:	78fb      	ldrb	r3, [r7, #3]
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f1e:	2b80      	cmp	r3, #128	; 0x80
 8005f20:	d0ef      	beq.n	8005f02 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005f22:	4b26      	ldr	r3, [pc, #152]	; (8005fbc <xPortStartScheduler+0x12c>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f1c3 0307 	rsb	r3, r3, #7
 8005f2a:	2b04      	cmp	r3, #4
 8005f2c:	d009      	beq.n	8005f42 <xPortStartScheduler+0xb2>
 8005f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f32:	f383 8811 	msr	BASEPRI, r3
 8005f36:	f3bf 8f6f 	isb	sy
 8005f3a:	f3bf 8f4f 	dsb	sy
 8005f3e:	60bb      	str	r3, [r7, #8]
 8005f40:	e7fe      	b.n	8005f40 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005f42:	4b1e      	ldr	r3, [pc, #120]	; (8005fbc <xPortStartScheduler+0x12c>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	021b      	lsls	r3, r3, #8
 8005f48:	4a1c      	ldr	r2, [pc, #112]	; (8005fbc <xPortStartScheduler+0x12c>)
 8005f4a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005f4c:	4b1b      	ldr	r3, [pc, #108]	; (8005fbc <xPortStartScheduler+0x12c>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005f54:	4a19      	ldr	r2, [pc, #100]	; (8005fbc <xPortStartScheduler+0x12c>)
 8005f56:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	b2da      	uxtb	r2, r3
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005f60:	4b17      	ldr	r3, [pc, #92]	; (8005fc0 <xPortStartScheduler+0x130>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a16      	ldr	r2, [pc, #88]	; (8005fc0 <xPortStartScheduler+0x130>)
 8005f66:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005f6a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005f6c:	4b14      	ldr	r3, [pc, #80]	; (8005fc0 <xPortStartScheduler+0x130>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a13      	ldr	r2, [pc, #76]	; (8005fc0 <xPortStartScheduler+0x130>)
 8005f72:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005f76:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005f78:	f000 f8d6 	bl	8006128 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005f7c:	4b11      	ldr	r3, [pc, #68]	; (8005fc4 <xPortStartScheduler+0x134>)
 8005f7e:	2200      	movs	r2, #0
 8005f80:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005f82:	f000 f8f5 	bl	8006170 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005f86:	4b10      	ldr	r3, [pc, #64]	; (8005fc8 <xPortStartScheduler+0x138>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a0f      	ldr	r2, [pc, #60]	; (8005fc8 <xPortStartScheduler+0x138>)
 8005f8c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005f90:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005f92:	f7ff ff69 	bl	8005e68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005f96:	f7ff f86d 	bl	8005074 <vTaskSwitchContext>
	prvTaskExitError();
 8005f9a:	f7ff ff23 	bl	8005de4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3718      	adds	r7, #24
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	e000ed00 	.word	0xe000ed00
 8005fac:	410fc271 	.word	0x410fc271
 8005fb0:	410fc270 	.word	0x410fc270
 8005fb4:	e000e400 	.word	0xe000e400
 8005fb8:	20000d7c 	.word	0x20000d7c
 8005fbc:	20000d80 	.word	0x20000d80
 8005fc0:	e000ed20 	.word	0xe000ed20
 8005fc4:	2000000c 	.word	0x2000000c
 8005fc8:	e000ef34 	.word	0xe000ef34

08005fcc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd6:	f383 8811 	msr	BASEPRI, r3
 8005fda:	f3bf 8f6f 	isb	sy
 8005fde:	f3bf 8f4f 	dsb	sy
 8005fe2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005fe4:	4b0e      	ldr	r3, [pc, #56]	; (8006020 <vPortEnterCritical+0x54>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	3301      	adds	r3, #1
 8005fea:	4a0d      	ldr	r2, [pc, #52]	; (8006020 <vPortEnterCritical+0x54>)
 8005fec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005fee:	4b0c      	ldr	r3, [pc, #48]	; (8006020 <vPortEnterCritical+0x54>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d10e      	bne.n	8006014 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005ff6:	4b0b      	ldr	r3, [pc, #44]	; (8006024 <vPortEnterCritical+0x58>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d009      	beq.n	8006014 <vPortEnterCritical+0x48>
 8006000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006004:	f383 8811 	msr	BASEPRI, r3
 8006008:	f3bf 8f6f 	isb	sy
 800600c:	f3bf 8f4f 	dsb	sy
 8006010:	603b      	str	r3, [r7, #0]
 8006012:	e7fe      	b.n	8006012 <vPortEnterCritical+0x46>
	}
}
 8006014:	bf00      	nop
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr
 8006020:	2000000c 	.word	0x2000000c
 8006024:	e000ed04 	.word	0xe000ed04

08006028 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800602e:	4b11      	ldr	r3, [pc, #68]	; (8006074 <vPortExitCritical+0x4c>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d109      	bne.n	800604a <vPortExitCritical+0x22>
 8006036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800603a:	f383 8811 	msr	BASEPRI, r3
 800603e:	f3bf 8f6f 	isb	sy
 8006042:	f3bf 8f4f 	dsb	sy
 8006046:	607b      	str	r3, [r7, #4]
 8006048:	e7fe      	b.n	8006048 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800604a:	4b0a      	ldr	r3, [pc, #40]	; (8006074 <vPortExitCritical+0x4c>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	3b01      	subs	r3, #1
 8006050:	4a08      	ldr	r2, [pc, #32]	; (8006074 <vPortExitCritical+0x4c>)
 8006052:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006054:	4b07      	ldr	r3, [pc, #28]	; (8006074 <vPortExitCritical+0x4c>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d104      	bne.n	8006066 <vPortExitCritical+0x3e>
 800605c:	2300      	movs	r3, #0
 800605e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006066:	bf00      	nop
 8006068:	370c      	adds	r7, #12
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	2000000c 	.word	0x2000000c
	...

08006080 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006080:	f3ef 8009 	mrs	r0, PSP
 8006084:	f3bf 8f6f 	isb	sy
 8006088:	4b15      	ldr	r3, [pc, #84]	; (80060e0 <pxCurrentTCBConst>)
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	f01e 0f10 	tst.w	lr, #16
 8006090:	bf08      	it	eq
 8006092:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006096:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800609a:	6010      	str	r0, [r2, #0]
 800609c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80060a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80060a4:	f380 8811 	msr	BASEPRI, r0
 80060a8:	f3bf 8f4f 	dsb	sy
 80060ac:	f3bf 8f6f 	isb	sy
 80060b0:	f7fe ffe0 	bl	8005074 <vTaskSwitchContext>
 80060b4:	f04f 0000 	mov.w	r0, #0
 80060b8:	f380 8811 	msr	BASEPRI, r0
 80060bc:	bc09      	pop	{r0, r3}
 80060be:	6819      	ldr	r1, [r3, #0]
 80060c0:	6808      	ldr	r0, [r1, #0]
 80060c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060c6:	f01e 0f10 	tst.w	lr, #16
 80060ca:	bf08      	it	eq
 80060cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80060d0:	f380 8809 	msr	PSP, r0
 80060d4:	f3bf 8f6f 	isb	sy
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	f3af 8000 	nop.w

080060e0 <pxCurrentTCBConst>:
 80060e0:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80060e4:	bf00      	nop
 80060e6:	bf00      	nop

080060e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
	__asm volatile
 80060ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f2:	f383 8811 	msr	BASEPRI, r3
 80060f6:	f3bf 8f6f 	isb	sy
 80060fa:	f3bf 8f4f 	dsb	sy
 80060fe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006100:	f7fe ff00 	bl	8004f04 <xTaskIncrementTick>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d003      	beq.n	8006112 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800610a:	4b06      	ldr	r3, [pc, #24]	; (8006124 <SysTick_Handler+0x3c>)
 800610c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006110:	601a      	str	r2, [r3, #0]
 8006112:	2300      	movs	r3, #0
 8006114:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800611c:	bf00      	nop
 800611e:	3708      	adds	r7, #8
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}
 8006124:	e000ed04 	.word	0xe000ed04

08006128 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006128:	b480      	push	{r7}
 800612a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800612c:	4b0b      	ldr	r3, [pc, #44]	; (800615c <vPortSetupTimerInterrupt+0x34>)
 800612e:	2200      	movs	r2, #0
 8006130:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006132:	4b0b      	ldr	r3, [pc, #44]	; (8006160 <vPortSetupTimerInterrupt+0x38>)
 8006134:	2200      	movs	r2, #0
 8006136:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006138:	4b0a      	ldr	r3, [pc, #40]	; (8006164 <vPortSetupTimerInterrupt+0x3c>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a0a      	ldr	r2, [pc, #40]	; (8006168 <vPortSetupTimerInterrupt+0x40>)
 800613e:	fba2 2303 	umull	r2, r3, r2, r3
 8006142:	099b      	lsrs	r3, r3, #6
 8006144:	4a09      	ldr	r2, [pc, #36]	; (800616c <vPortSetupTimerInterrupt+0x44>)
 8006146:	3b01      	subs	r3, #1
 8006148:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800614a:	4b04      	ldr	r3, [pc, #16]	; (800615c <vPortSetupTimerInterrupt+0x34>)
 800614c:	2207      	movs	r2, #7
 800614e:	601a      	str	r2, [r3, #0]
}
 8006150:	bf00      	nop
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	e000e010 	.word	0xe000e010
 8006160:	e000e018 	.word	0xe000e018
 8006164:	20000000 	.word	0x20000000
 8006168:	10624dd3 	.word	0x10624dd3
 800616c:	e000e014 	.word	0xe000e014

08006170 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006170:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006180 <vPortEnableVFP+0x10>
 8006174:	6801      	ldr	r1, [r0, #0]
 8006176:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800617a:	6001      	str	r1, [r0, #0]
 800617c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800617e:	bf00      	nop
 8006180:	e000ed88 	.word	0xe000ed88

08006184 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006184:	b480      	push	{r7}
 8006186:	b085      	sub	sp, #20
 8006188:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800618a:	f3ef 8305 	mrs	r3, IPSR
 800618e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2b0f      	cmp	r3, #15
 8006194:	d913      	bls.n	80061be <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006196:	4a16      	ldr	r2, [pc, #88]	; (80061f0 <vPortValidateInterruptPriority+0x6c>)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	4413      	add	r3, r2
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80061a0:	4b14      	ldr	r3, [pc, #80]	; (80061f4 <vPortValidateInterruptPriority+0x70>)
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	7afa      	ldrb	r2, [r7, #11]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d209      	bcs.n	80061be <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80061aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ae:	f383 8811 	msr	BASEPRI, r3
 80061b2:	f3bf 8f6f 	isb	sy
 80061b6:	f3bf 8f4f 	dsb	sy
 80061ba:	607b      	str	r3, [r7, #4]
 80061bc:	e7fe      	b.n	80061bc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80061be:	4b0e      	ldr	r3, [pc, #56]	; (80061f8 <vPortValidateInterruptPriority+0x74>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80061c6:	4b0d      	ldr	r3, [pc, #52]	; (80061fc <vPortValidateInterruptPriority+0x78>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d909      	bls.n	80061e2 <vPortValidateInterruptPriority+0x5e>
 80061ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d2:	f383 8811 	msr	BASEPRI, r3
 80061d6:	f3bf 8f6f 	isb	sy
 80061da:	f3bf 8f4f 	dsb	sy
 80061de:	603b      	str	r3, [r7, #0]
 80061e0:	e7fe      	b.n	80061e0 <vPortValidateInterruptPriority+0x5c>
	}
 80061e2:	bf00      	nop
 80061e4:	3714      	adds	r7, #20
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr
 80061ee:	bf00      	nop
 80061f0:	e000e3f0 	.word	0xe000e3f0
 80061f4:	20000d7c 	.word	0x20000d7c
 80061f8:	e000ed0c 	.word	0xe000ed0c
 80061fc:	20000d80 	.word	0x20000d80

08006200 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b08a      	sub	sp, #40	; 0x28
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006208:	2300      	movs	r3, #0
 800620a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800620c:	f7fe fdc0 	bl	8004d90 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006210:	4b57      	ldr	r3, [pc, #348]	; (8006370 <pvPortMalloc+0x170>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d101      	bne.n	800621c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006218:	f000 f90c 	bl	8006434 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800621c:	4b55      	ldr	r3, [pc, #340]	; (8006374 <pvPortMalloc+0x174>)
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4013      	ands	r3, r2
 8006224:	2b00      	cmp	r3, #0
 8006226:	f040 808c 	bne.w	8006342 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d01c      	beq.n	800626a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006230:	2208      	movs	r2, #8
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4413      	add	r3, r2
 8006236:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f003 0307 	and.w	r3, r3, #7
 800623e:	2b00      	cmp	r3, #0
 8006240:	d013      	beq.n	800626a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f023 0307 	bic.w	r3, r3, #7
 8006248:	3308      	adds	r3, #8
 800624a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f003 0307 	and.w	r3, r3, #7
 8006252:	2b00      	cmp	r3, #0
 8006254:	d009      	beq.n	800626a <pvPortMalloc+0x6a>
 8006256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800625a:	f383 8811 	msr	BASEPRI, r3
 800625e:	f3bf 8f6f 	isb	sy
 8006262:	f3bf 8f4f 	dsb	sy
 8006266:	617b      	str	r3, [r7, #20]
 8006268:	e7fe      	b.n	8006268 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d068      	beq.n	8006342 <pvPortMalloc+0x142>
 8006270:	4b41      	ldr	r3, [pc, #260]	; (8006378 <pvPortMalloc+0x178>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	429a      	cmp	r2, r3
 8006278:	d863      	bhi.n	8006342 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800627a:	4b40      	ldr	r3, [pc, #256]	; (800637c <pvPortMalloc+0x17c>)
 800627c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800627e:	4b3f      	ldr	r3, [pc, #252]	; (800637c <pvPortMalloc+0x17c>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006284:	e004      	b.n	8006290 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006288:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800628a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	429a      	cmp	r2, r3
 8006298:	d903      	bls.n	80062a2 <pvPortMalloc+0xa2>
 800629a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d1f1      	bne.n	8006286 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80062a2:	4b33      	ldr	r3, [pc, #204]	; (8006370 <pvPortMalloc+0x170>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d04a      	beq.n	8006342 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80062ac:	6a3b      	ldr	r3, [r7, #32]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2208      	movs	r2, #8
 80062b2:	4413      	add	r3, r2
 80062b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80062b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	6a3b      	ldr	r3, [r7, #32]
 80062bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80062be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c0:	685a      	ldr	r2, [r3, #4]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	1ad2      	subs	r2, r2, r3
 80062c6:	2308      	movs	r3, #8
 80062c8:	005b      	lsls	r3, r3, #1
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d91e      	bls.n	800630c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80062ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4413      	add	r3, r2
 80062d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	f003 0307 	and.w	r3, r3, #7
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d009      	beq.n	80062f4 <pvPortMalloc+0xf4>
 80062e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e4:	f383 8811 	msr	BASEPRI, r3
 80062e8:	f3bf 8f6f 	isb	sy
 80062ec:	f3bf 8f4f 	dsb	sy
 80062f0:	613b      	str	r3, [r7, #16]
 80062f2:	e7fe      	b.n	80062f2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80062f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f6:	685a      	ldr	r2, [r3, #4]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	1ad2      	subs	r2, r2, r3
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006306:	69b8      	ldr	r0, [r7, #24]
 8006308:	f000 f8f6 	bl	80064f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800630c:	4b1a      	ldr	r3, [pc, #104]	; (8006378 <pvPortMalloc+0x178>)
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	4a18      	ldr	r2, [pc, #96]	; (8006378 <pvPortMalloc+0x178>)
 8006318:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800631a:	4b17      	ldr	r3, [pc, #92]	; (8006378 <pvPortMalloc+0x178>)
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	4b18      	ldr	r3, [pc, #96]	; (8006380 <pvPortMalloc+0x180>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	429a      	cmp	r2, r3
 8006324:	d203      	bcs.n	800632e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006326:	4b14      	ldr	r3, [pc, #80]	; (8006378 <pvPortMalloc+0x178>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a15      	ldr	r2, [pc, #84]	; (8006380 <pvPortMalloc+0x180>)
 800632c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800632e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006330:	685a      	ldr	r2, [r3, #4]
 8006332:	4b10      	ldr	r3, [pc, #64]	; (8006374 <pvPortMalloc+0x174>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	431a      	orrs	r2, r3
 8006338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800633c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633e:	2200      	movs	r2, #0
 8006340:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006342:	f7fe fd33 	bl	8004dac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	f003 0307 	and.w	r3, r3, #7
 800634c:	2b00      	cmp	r3, #0
 800634e:	d009      	beq.n	8006364 <pvPortMalloc+0x164>
 8006350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006354:	f383 8811 	msr	BASEPRI, r3
 8006358:	f3bf 8f6f 	isb	sy
 800635c:	f3bf 8f4f 	dsb	sy
 8006360:	60fb      	str	r3, [r7, #12]
 8006362:	e7fe      	b.n	8006362 <pvPortMalloc+0x162>
	return pvReturn;
 8006364:	69fb      	ldr	r3, [r7, #28]
}
 8006366:	4618      	mov	r0, r3
 8006368:	3728      	adds	r7, #40	; 0x28
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	20001944 	.word	0x20001944
 8006374:	20001950 	.word	0x20001950
 8006378:	20001948 	.word	0x20001948
 800637c:	2000193c 	.word	0x2000193c
 8006380:	2000194c 	.word	0x2000194c

08006384 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b086      	sub	sp, #24
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d046      	beq.n	8006424 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006396:	2308      	movs	r3, #8
 8006398:	425b      	negs	r3, r3
 800639a:	697a      	ldr	r2, [r7, #20]
 800639c:	4413      	add	r3, r2
 800639e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	685a      	ldr	r2, [r3, #4]
 80063a8:	4b20      	ldr	r3, [pc, #128]	; (800642c <vPortFree+0xa8>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4013      	ands	r3, r2
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d109      	bne.n	80063c6 <vPortFree+0x42>
 80063b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b6:	f383 8811 	msr	BASEPRI, r3
 80063ba:	f3bf 8f6f 	isb	sy
 80063be:	f3bf 8f4f 	dsb	sy
 80063c2:	60fb      	str	r3, [r7, #12]
 80063c4:	e7fe      	b.n	80063c4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d009      	beq.n	80063e2 <vPortFree+0x5e>
 80063ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d2:	f383 8811 	msr	BASEPRI, r3
 80063d6:	f3bf 8f6f 	isb	sy
 80063da:	f3bf 8f4f 	dsb	sy
 80063de:	60bb      	str	r3, [r7, #8]
 80063e0:	e7fe      	b.n	80063e0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	685a      	ldr	r2, [r3, #4]
 80063e6:	4b11      	ldr	r3, [pc, #68]	; (800642c <vPortFree+0xa8>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4013      	ands	r3, r2
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d019      	beq.n	8006424 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d115      	bne.n	8006424 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	685a      	ldr	r2, [r3, #4]
 80063fc:	4b0b      	ldr	r3, [pc, #44]	; (800642c <vPortFree+0xa8>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	43db      	mvns	r3, r3
 8006402:	401a      	ands	r2, r3
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006408:	f7fe fcc2 	bl	8004d90 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	685a      	ldr	r2, [r3, #4]
 8006410:	4b07      	ldr	r3, [pc, #28]	; (8006430 <vPortFree+0xac>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4413      	add	r3, r2
 8006416:	4a06      	ldr	r2, [pc, #24]	; (8006430 <vPortFree+0xac>)
 8006418:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800641a:	6938      	ldr	r0, [r7, #16]
 800641c:	f000 f86c 	bl	80064f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006420:	f7fe fcc4 	bl	8004dac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006424:	bf00      	nop
 8006426:	3718      	adds	r7, #24
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}
 800642c:	20001950 	.word	0x20001950
 8006430:	20001948 	.word	0x20001948

08006434 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800643a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800643e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006440:	4b27      	ldr	r3, [pc, #156]	; (80064e0 <prvHeapInit+0xac>)
 8006442:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f003 0307 	and.w	r3, r3, #7
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00c      	beq.n	8006468 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	3307      	adds	r3, #7
 8006452:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f023 0307 	bic.w	r3, r3, #7
 800645a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800645c:	68ba      	ldr	r2, [r7, #8]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	4a1f      	ldr	r2, [pc, #124]	; (80064e0 <prvHeapInit+0xac>)
 8006464:	4413      	add	r3, r2
 8006466:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800646c:	4a1d      	ldr	r2, [pc, #116]	; (80064e4 <prvHeapInit+0xb0>)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006472:	4b1c      	ldr	r3, [pc, #112]	; (80064e4 <prvHeapInit+0xb0>)
 8006474:	2200      	movs	r2, #0
 8006476:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	68ba      	ldr	r2, [r7, #8]
 800647c:	4413      	add	r3, r2
 800647e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006480:	2208      	movs	r2, #8
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	1a9b      	subs	r3, r3, r2
 8006486:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f023 0307 	bic.w	r3, r3, #7
 800648e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	4a15      	ldr	r2, [pc, #84]	; (80064e8 <prvHeapInit+0xb4>)
 8006494:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006496:	4b14      	ldr	r3, [pc, #80]	; (80064e8 <prvHeapInit+0xb4>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2200      	movs	r2, #0
 800649c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800649e:	4b12      	ldr	r3, [pc, #72]	; (80064e8 <prvHeapInit+0xb4>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	2200      	movs	r2, #0
 80064a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	1ad2      	subs	r2, r2, r3
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80064b4:	4b0c      	ldr	r3, [pc, #48]	; (80064e8 <prvHeapInit+0xb4>)
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	4a0a      	ldr	r2, [pc, #40]	; (80064ec <prvHeapInit+0xb8>)
 80064c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	4a09      	ldr	r2, [pc, #36]	; (80064f0 <prvHeapInit+0xbc>)
 80064ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80064cc:	4b09      	ldr	r3, [pc, #36]	; (80064f4 <prvHeapInit+0xc0>)
 80064ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80064d2:	601a      	str	r2, [r3, #0]
}
 80064d4:	bf00      	nop
 80064d6:	3714      	adds	r7, #20
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr
 80064e0:	20000d84 	.word	0x20000d84
 80064e4:	2000193c 	.word	0x2000193c
 80064e8:	20001944 	.word	0x20001944
 80064ec:	2000194c 	.word	0x2000194c
 80064f0:	20001948 	.word	0x20001948
 80064f4:	20001950 	.word	0x20001950

080064f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80064f8:	b480      	push	{r7}
 80064fa:	b085      	sub	sp, #20
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006500:	4b28      	ldr	r3, [pc, #160]	; (80065a4 <prvInsertBlockIntoFreeList+0xac>)
 8006502:	60fb      	str	r3, [r7, #12]
 8006504:	e002      	b.n	800650c <prvInsertBlockIntoFreeList+0x14>
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	60fb      	str	r3, [r7, #12]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	429a      	cmp	r2, r3
 8006514:	d8f7      	bhi.n	8006506 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	68ba      	ldr	r2, [r7, #8]
 8006520:	4413      	add	r3, r2
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	429a      	cmp	r2, r3
 8006526:	d108      	bne.n	800653a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	685a      	ldr	r2, [r3, #4]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	441a      	add	r2, r3
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	68ba      	ldr	r2, [r7, #8]
 8006544:	441a      	add	r2, r3
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	429a      	cmp	r2, r3
 800654c:	d118      	bne.n	8006580 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	4b15      	ldr	r3, [pc, #84]	; (80065a8 <prvInsertBlockIntoFreeList+0xb0>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	429a      	cmp	r2, r3
 8006558:	d00d      	beq.n	8006576 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	685a      	ldr	r2, [r3, #4]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	441a      	add	r2, r3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	601a      	str	r2, [r3, #0]
 8006574:	e008      	b.n	8006588 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006576:	4b0c      	ldr	r3, [pc, #48]	; (80065a8 <prvInsertBlockIntoFreeList+0xb0>)
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	601a      	str	r2, [r3, #0]
 800657e:	e003      	b.n	8006588 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	429a      	cmp	r2, r3
 800658e:	d002      	beq.n	8006596 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006596:	bf00      	nop
 8006598:	3714      	adds	r7, #20
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop
 80065a4:	2000193c 	.word	0x2000193c
 80065a8:	20001944 	.word	0x20001944

080065ac <__errno>:
 80065ac:	4b01      	ldr	r3, [pc, #4]	; (80065b4 <__errno+0x8>)
 80065ae:	6818      	ldr	r0, [r3, #0]
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	20000010 	.word	0x20000010

080065b8 <__libc_init_array>:
 80065b8:	b570      	push	{r4, r5, r6, lr}
 80065ba:	4e0d      	ldr	r6, [pc, #52]	; (80065f0 <__libc_init_array+0x38>)
 80065bc:	4c0d      	ldr	r4, [pc, #52]	; (80065f4 <__libc_init_array+0x3c>)
 80065be:	1ba4      	subs	r4, r4, r6
 80065c0:	10a4      	asrs	r4, r4, #2
 80065c2:	2500      	movs	r5, #0
 80065c4:	42a5      	cmp	r5, r4
 80065c6:	d109      	bne.n	80065dc <__libc_init_array+0x24>
 80065c8:	4e0b      	ldr	r6, [pc, #44]	; (80065f8 <__libc_init_array+0x40>)
 80065ca:	4c0c      	ldr	r4, [pc, #48]	; (80065fc <__libc_init_array+0x44>)
 80065cc:	f000 fc28 	bl	8006e20 <_init>
 80065d0:	1ba4      	subs	r4, r4, r6
 80065d2:	10a4      	asrs	r4, r4, #2
 80065d4:	2500      	movs	r5, #0
 80065d6:	42a5      	cmp	r5, r4
 80065d8:	d105      	bne.n	80065e6 <__libc_init_array+0x2e>
 80065da:	bd70      	pop	{r4, r5, r6, pc}
 80065dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80065e0:	4798      	blx	r3
 80065e2:	3501      	adds	r5, #1
 80065e4:	e7ee      	b.n	80065c4 <__libc_init_array+0xc>
 80065e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80065ea:	4798      	blx	r3
 80065ec:	3501      	adds	r5, #1
 80065ee:	e7f2      	b.n	80065d6 <__libc_init_array+0x1e>
 80065f0:	08006f44 	.word	0x08006f44
 80065f4:	08006f44 	.word	0x08006f44
 80065f8:	08006f44 	.word	0x08006f44
 80065fc:	08006f48 	.word	0x08006f48

08006600 <memcpy>:
 8006600:	b510      	push	{r4, lr}
 8006602:	1e43      	subs	r3, r0, #1
 8006604:	440a      	add	r2, r1
 8006606:	4291      	cmp	r1, r2
 8006608:	d100      	bne.n	800660c <memcpy+0xc>
 800660a:	bd10      	pop	{r4, pc}
 800660c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006610:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006614:	e7f7      	b.n	8006606 <memcpy+0x6>

08006616 <memset>:
 8006616:	4402      	add	r2, r0
 8006618:	4603      	mov	r3, r0
 800661a:	4293      	cmp	r3, r2
 800661c:	d100      	bne.n	8006620 <memset+0xa>
 800661e:	4770      	bx	lr
 8006620:	f803 1b01 	strb.w	r1, [r3], #1
 8006624:	e7f9      	b.n	800661a <memset+0x4>
	...

08006628 <siprintf>:
 8006628:	b40e      	push	{r1, r2, r3}
 800662a:	b500      	push	{lr}
 800662c:	b09c      	sub	sp, #112	; 0x70
 800662e:	ab1d      	add	r3, sp, #116	; 0x74
 8006630:	9002      	str	r0, [sp, #8]
 8006632:	9006      	str	r0, [sp, #24]
 8006634:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006638:	4809      	ldr	r0, [pc, #36]	; (8006660 <siprintf+0x38>)
 800663a:	9107      	str	r1, [sp, #28]
 800663c:	9104      	str	r1, [sp, #16]
 800663e:	4909      	ldr	r1, [pc, #36]	; (8006664 <siprintf+0x3c>)
 8006640:	f853 2b04 	ldr.w	r2, [r3], #4
 8006644:	9105      	str	r1, [sp, #20]
 8006646:	6800      	ldr	r0, [r0, #0]
 8006648:	9301      	str	r3, [sp, #4]
 800664a:	a902      	add	r1, sp, #8
 800664c:	f000 f866 	bl	800671c <_svfiprintf_r>
 8006650:	9b02      	ldr	r3, [sp, #8]
 8006652:	2200      	movs	r2, #0
 8006654:	701a      	strb	r2, [r3, #0]
 8006656:	b01c      	add	sp, #112	; 0x70
 8006658:	f85d eb04 	ldr.w	lr, [sp], #4
 800665c:	b003      	add	sp, #12
 800665e:	4770      	bx	lr
 8006660:	20000010 	.word	0x20000010
 8006664:	ffff0208 	.word	0xffff0208

08006668 <__ssputs_r>:
 8006668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800666c:	688e      	ldr	r6, [r1, #8]
 800666e:	429e      	cmp	r6, r3
 8006670:	4682      	mov	sl, r0
 8006672:	460c      	mov	r4, r1
 8006674:	4690      	mov	r8, r2
 8006676:	4699      	mov	r9, r3
 8006678:	d837      	bhi.n	80066ea <__ssputs_r+0x82>
 800667a:	898a      	ldrh	r2, [r1, #12]
 800667c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006680:	d031      	beq.n	80066e6 <__ssputs_r+0x7e>
 8006682:	6825      	ldr	r5, [r4, #0]
 8006684:	6909      	ldr	r1, [r1, #16]
 8006686:	1a6f      	subs	r7, r5, r1
 8006688:	6965      	ldr	r5, [r4, #20]
 800668a:	2302      	movs	r3, #2
 800668c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006690:	fb95 f5f3 	sdiv	r5, r5, r3
 8006694:	f109 0301 	add.w	r3, r9, #1
 8006698:	443b      	add	r3, r7
 800669a:	429d      	cmp	r5, r3
 800669c:	bf38      	it	cc
 800669e:	461d      	movcc	r5, r3
 80066a0:	0553      	lsls	r3, r2, #21
 80066a2:	d530      	bpl.n	8006706 <__ssputs_r+0x9e>
 80066a4:	4629      	mov	r1, r5
 80066a6:	f000 fb21 	bl	8006cec <_malloc_r>
 80066aa:	4606      	mov	r6, r0
 80066ac:	b950      	cbnz	r0, 80066c4 <__ssputs_r+0x5c>
 80066ae:	230c      	movs	r3, #12
 80066b0:	f8ca 3000 	str.w	r3, [sl]
 80066b4:	89a3      	ldrh	r3, [r4, #12]
 80066b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066ba:	81a3      	strh	r3, [r4, #12]
 80066bc:	f04f 30ff 	mov.w	r0, #4294967295
 80066c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066c4:	463a      	mov	r2, r7
 80066c6:	6921      	ldr	r1, [r4, #16]
 80066c8:	f7ff ff9a 	bl	8006600 <memcpy>
 80066cc:	89a3      	ldrh	r3, [r4, #12]
 80066ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80066d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066d6:	81a3      	strh	r3, [r4, #12]
 80066d8:	6126      	str	r6, [r4, #16]
 80066da:	6165      	str	r5, [r4, #20]
 80066dc:	443e      	add	r6, r7
 80066de:	1bed      	subs	r5, r5, r7
 80066e0:	6026      	str	r6, [r4, #0]
 80066e2:	60a5      	str	r5, [r4, #8]
 80066e4:	464e      	mov	r6, r9
 80066e6:	454e      	cmp	r6, r9
 80066e8:	d900      	bls.n	80066ec <__ssputs_r+0x84>
 80066ea:	464e      	mov	r6, r9
 80066ec:	4632      	mov	r2, r6
 80066ee:	4641      	mov	r1, r8
 80066f0:	6820      	ldr	r0, [r4, #0]
 80066f2:	f000 fa93 	bl	8006c1c <memmove>
 80066f6:	68a3      	ldr	r3, [r4, #8]
 80066f8:	1b9b      	subs	r3, r3, r6
 80066fa:	60a3      	str	r3, [r4, #8]
 80066fc:	6823      	ldr	r3, [r4, #0]
 80066fe:	441e      	add	r6, r3
 8006700:	6026      	str	r6, [r4, #0]
 8006702:	2000      	movs	r0, #0
 8006704:	e7dc      	b.n	80066c0 <__ssputs_r+0x58>
 8006706:	462a      	mov	r2, r5
 8006708:	f000 fb4a 	bl	8006da0 <_realloc_r>
 800670c:	4606      	mov	r6, r0
 800670e:	2800      	cmp	r0, #0
 8006710:	d1e2      	bne.n	80066d8 <__ssputs_r+0x70>
 8006712:	6921      	ldr	r1, [r4, #16]
 8006714:	4650      	mov	r0, sl
 8006716:	f000 fa9b 	bl	8006c50 <_free_r>
 800671a:	e7c8      	b.n	80066ae <__ssputs_r+0x46>

0800671c <_svfiprintf_r>:
 800671c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006720:	461d      	mov	r5, r3
 8006722:	898b      	ldrh	r3, [r1, #12]
 8006724:	061f      	lsls	r7, r3, #24
 8006726:	b09d      	sub	sp, #116	; 0x74
 8006728:	4680      	mov	r8, r0
 800672a:	460c      	mov	r4, r1
 800672c:	4616      	mov	r6, r2
 800672e:	d50f      	bpl.n	8006750 <_svfiprintf_r+0x34>
 8006730:	690b      	ldr	r3, [r1, #16]
 8006732:	b96b      	cbnz	r3, 8006750 <_svfiprintf_r+0x34>
 8006734:	2140      	movs	r1, #64	; 0x40
 8006736:	f000 fad9 	bl	8006cec <_malloc_r>
 800673a:	6020      	str	r0, [r4, #0]
 800673c:	6120      	str	r0, [r4, #16]
 800673e:	b928      	cbnz	r0, 800674c <_svfiprintf_r+0x30>
 8006740:	230c      	movs	r3, #12
 8006742:	f8c8 3000 	str.w	r3, [r8]
 8006746:	f04f 30ff 	mov.w	r0, #4294967295
 800674a:	e0c8      	b.n	80068de <_svfiprintf_r+0x1c2>
 800674c:	2340      	movs	r3, #64	; 0x40
 800674e:	6163      	str	r3, [r4, #20]
 8006750:	2300      	movs	r3, #0
 8006752:	9309      	str	r3, [sp, #36]	; 0x24
 8006754:	2320      	movs	r3, #32
 8006756:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800675a:	2330      	movs	r3, #48	; 0x30
 800675c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006760:	9503      	str	r5, [sp, #12]
 8006762:	f04f 0b01 	mov.w	fp, #1
 8006766:	4637      	mov	r7, r6
 8006768:	463d      	mov	r5, r7
 800676a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800676e:	b10b      	cbz	r3, 8006774 <_svfiprintf_r+0x58>
 8006770:	2b25      	cmp	r3, #37	; 0x25
 8006772:	d13e      	bne.n	80067f2 <_svfiprintf_r+0xd6>
 8006774:	ebb7 0a06 	subs.w	sl, r7, r6
 8006778:	d00b      	beq.n	8006792 <_svfiprintf_r+0x76>
 800677a:	4653      	mov	r3, sl
 800677c:	4632      	mov	r2, r6
 800677e:	4621      	mov	r1, r4
 8006780:	4640      	mov	r0, r8
 8006782:	f7ff ff71 	bl	8006668 <__ssputs_r>
 8006786:	3001      	adds	r0, #1
 8006788:	f000 80a4 	beq.w	80068d4 <_svfiprintf_r+0x1b8>
 800678c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800678e:	4453      	add	r3, sl
 8006790:	9309      	str	r3, [sp, #36]	; 0x24
 8006792:	783b      	ldrb	r3, [r7, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	f000 809d 	beq.w	80068d4 <_svfiprintf_r+0x1b8>
 800679a:	2300      	movs	r3, #0
 800679c:	f04f 32ff 	mov.w	r2, #4294967295
 80067a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067a4:	9304      	str	r3, [sp, #16]
 80067a6:	9307      	str	r3, [sp, #28]
 80067a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80067ac:	931a      	str	r3, [sp, #104]	; 0x68
 80067ae:	462f      	mov	r7, r5
 80067b0:	2205      	movs	r2, #5
 80067b2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80067b6:	4850      	ldr	r0, [pc, #320]	; (80068f8 <_svfiprintf_r+0x1dc>)
 80067b8:	f7f9 fd0a 	bl	80001d0 <memchr>
 80067bc:	9b04      	ldr	r3, [sp, #16]
 80067be:	b9d0      	cbnz	r0, 80067f6 <_svfiprintf_r+0xda>
 80067c0:	06d9      	lsls	r1, r3, #27
 80067c2:	bf44      	itt	mi
 80067c4:	2220      	movmi	r2, #32
 80067c6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80067ca:	071a      	lsls	r2, r3, #28
 80067cc:	bf44      	itt	mi
 80067ce:	222b      	movmi	r2, #43	; 0x2b
 80067d0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80067d4:	782a      	ldrb	r2, [r5, #0]
 80067d6:	2a2a      	cmp	r2, #42	; 0x2a
 80067d8:	d015      	beq.n	8006806 <_svfiprintf_r+0xea>
 80067da:	9a07      	ldr	r2, [sp, #28]
 80067dc:	462f      	mov	r7, r5
 80067de:	2000      	movs	r0, #0
 80067e0:	250a      	movs	r5, #10
 80067e2:	4639      	mov	r1, r7
 80067e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067e8:	3b30      	subs	r3, #48	; 0x30
 80067ea:	2b09      	cmp	r3, #9
 80067ec:	d94d      	bls.n	800688a <_svfiprintf_r+0x16e>
 80067ee:	b1b8      	cbz	r0, 8006820 <_svfiprintf_r+0x104>
 80067f0:	e00f      	b.n	8006812 <_svfiprintf_r+0xf6>
 80067f2:	462f      	mov	r7, r5
 80067f4:	e7b8      	b.n	8006768 <_svfiprintf_r+0x4c>
 80067f6:	4a40      	ldr	r2, [pc, #256]	; (80068f8 <_svfiprintf_r+0x1dc>)
 80067f8:	1a80      	subs	r0, r0, r2
 80067fa:	fa0b f000 	lsl.w	r0, fp, r0
 80067fe:	4318      	orrs	r0, r3
 8006800:	9004      	str	r0, [sp, #16]
 8006802:	463d      	mov	r5, r7
 8006804:	e7d3      	b.n	80067ae <_svfiprintf_r+0x92>
 8006806:	9a03      	ldr	r2, [sp, #12]
 8006808:	1d11      	adds	r1, r2, #4
 800680a:	6812      	ldr	r2, [r2, #0]
 800680c:	9103      	str	r1, [sp, #12]
 800680e:	2a00      	cmp	r2, #0
 8006810:	db01      	blt.n	8006816 <_svfiprintf_r+0xfa>
 8006812:	9207      	str	r2, [sp, #28]
 8006814:	e004      	b.n	8006820 <_svfiprintf_r+0x104>
 8006816:	4252      	negs	r2, r2
 8006818:	f043 0302 	orr.w	r3, r3, #2
 800681c:	9207      	str	r2, [sp, #28]
 800681e:	9304      	str	r3, [sp, #16]
 8006820:	783b      	ldrb	r3, [r7, #0]
 8006822:	2b2e      	cmp	r3, #46	; 0x2e
 8006824:	d10c      	bne.n	8006840 <_svfiprintf_r+0x124>
 8006826:	787b      	ldrb	r3, [r7, #1]
 8006828:	2b2a      	cmp	r3, #42	; 0x2a
 800682a:	d133      	bne.n	8006894 <_svfiprintf_r+0x178>
 800682c:	9b03      	ldr	r3, [sp, #12]
 800682e:	1d1a      	adds	r2, r3, #4
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	9203      	str	r2, [sp, #12]
 8006834:	2b00      	cmp	r3, #0
 8006836:	bfb8      	it	lt
 8006838:	f04f 33ff 	movlt.w	r3, #4294967295
 800683c:	3702      	adds	r7, #2
 800683e:	9305      	str	r3, [sp, #20]
 8006840:	4d2e      	ldr	r5, [pc, #184]	; (80068fc <_svfiprintf_r+0x1e0>)
 8006842:	7839      	ldrb	r1, [r7, #0]
 8006844:	2203      	movs	r2, #3
 8006846:	4628      	mov	r0, r5
 8006848:	f7f9 fcc2 	bl	80001d0 <memchr>
 800684c:	b138      	cbz	r0, 800685e <_svfiprintf_r+0x142>
 800684e:	2340      	movs	r3, #64	; 0x40
 8006850:	1b40      	subs	r0, r0, r5
 8006852:	fa03 f000 	lsl.w	r0, r3, r0
 8006856:	9b04      	ldr	r3, [sp, #16]
 8006858:	4303      	orrs	r3, r0
 800685a:	3701      	adds	r7, #1
 800685c:	9304      	str	r3, [sp, #16]
 800685e:	7839      	ldrb	r1, [r7, #0]
 8006860:	4827      	ldr	r0, [pc, #156]	; (8006900 <_svfiprintf_r+0x1e4>)
 8006862:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006866:	2206      	movs	r2, #6
 8006868:	1c7e      	adds	r6, r7, #1
 800686a:	f7f9 fcb1 	bl	80001d0 <memchr>
 800686e:	2800      	cmp	r0, #0
 8006870:	d038      	beq.n	80068e4 <_svfiprintf_r+0x1c8>
 8006872:	4b24      	ldr	r3, [pc, #144]	; (8006904 <_svfiprintf_r+0x1e8>)
 8006874:	bb13      	cbnz	r3, 80068bc <_svfiprintf_r+0x1a0>
 8006876:	9b03      	ldr	r3, [sp, #12]
 8006878:	3307      	adds	r3, #7
 800687a:	f023 0307 	bic.w	r3, r3, #7
 800687e:	3308      	adds	r3, #8
 8006880:	9303      	str	r3, [sp, #12]
 8006882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006884:	444b      	add	r3, r9
 8006886:	9309      	str	r3, [sp, #36]	; 0x24
 8006888:	e76d      	b.n	8006766 <_svfiprintf_r+0x4a>
 800688a:	fb05 3202 	mla	r2, r5, r2, r3
 800688e:	2001      	movs	r0, #1
 8006890:	460f      	mov	r7, r1
 8006892:	e7a6      	b.n	80067e2 <_svfiprintf_r+0xc6>
 8006894:	2300      	movs	r3, #0
 8006896:	3701      	adds	r7, #1
 8006898:	9305      	str	r3, [sp, #20]
 800689a:	4619      	mov	r1, r3
 800689c:	250a      	movs	r5, #10
 800689e:	4638      	mov	r0, r7
 80068a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068a4:	3a30      	subs	r2, #48	; 0x30
 80068a6:	2a09      	cmp	r2, #9
 80068a8:	d903      	bls.n	80068b2 <_svfiprintf_r+0x196>
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d0c8      	beq.n	8006840 <_svfiprintf_r+0x124>
 80068ae:	9105      	str	r1, [sp, #20]
 80068b0:	e7c6      	b.n	8006840 <_svfiprintf_r+0x124>
 80068b2:	fb05 2101 	mla	r1, r5, r1, r2
 80068b6:	2301      	movs	r3, #1
 80068b8:	4607      	mov	r7, r0
 80068ba:	e7f0      	b.n	800689e <_svfiprintf_r+0x182>
 80068bc:	ab03      	add	r3, sp, #12
 80068be:	9300      	str	r3, [sp, #0]
 80068c0:	4622      	mov	r2, r4
 80068c2:	4b11      	ldr	r3, [pc, #68]	; (8006908 <_svfiprintf_r+0x1ec>)
 80068c4:	a904      	add	r1, sp, #16
 80068c6:	4640      	mov	r0, r8
 80068c8:	f3af 8000 	nop.w
 80068cc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80068d0:	4681      	mov	r9, r0
 80068d2:	d1d6      	bne.n	8006882 <_svfiprintf_r+0x166>
 80068d4:	89a3      	ldrh	r3, [r4, #12]
 80068d6:	065b      	lsls	r3, r3, #25
 80068d8:	f53f af35 	bmi.w	8006746 <_svfiprintf_r+0x2a>
 80068dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068de:	b01d      	add	sp, #116	; 0x74
 80068e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068e4:	ab03      	add	r3, sp, #12
 80068e6:	9300      	str	r3, [sp, #0]
 80068e8:	4622      	mov	r2, r4
 80068ea:	4b07      	ldr	r3, [pc, #28]	; (8006908 <_svfiprintf_r+0x1ec>)
 80068ec:	a904      	add	r1, sp, #16
 80068ee:	4640      	mov	r0, r8
 80068f0:	f000 f882 	bl	80069f8 <_printf_i>
 80068f4:	e7ea      	b.n	80068cc <_svfiprintf_r+0x1b0>
 80068f6:	bf00      	nop
 80068f8:	08006f08 	.word	0x08006f08
 80068fc:	08006f0e 	.word	0x08006f0e
 8006900:	08006f12 	.word	0x08006f12
 8006904:	00000000 	.word	0x00000000
 8006908:	08006669 	.word	0x08006669

0800690c <_printf_common>:
 800690c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006910:	4691      	mov	r9, r2
 8006912:	461f      	mov	r7, r3
 8006914:	688a      	ldr	r2, [r1, #8]
 8006916:	690b      	ldr	r3, [r1, #16]
 8006918:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800691c:	4293      	cmp	r3, r2
 800691e:	bfb8      	it	lt
 8006920:	4613      	movlt	r3, r2
 8006922:	f8c9 3000 	str.w	r3, [r9]
 8006926:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800692a:	4606      	mov	r6, r0
 800692c:	460c      	mov	r4, r1
 800692e:	b112      	cbz	r2, 8006936 <_printf_common+0x2a>
 8006930:	3301      	adds	r3, #1
 8006932:	f8c9 3000 	str.w	r3, [r9]
 8006936:	6823      	ldr	r3, [r4, #0]
 8006938:	0699      	lsls	r1, r3, #26
 800693a:	bf42      	ittt	mi
 800693c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006940:	3302      	addmi	r3, #2
 8006942:	f8c9 3000 	strmi.w	r3, [r9]
 8006946:	6825      	ldr	r5, [r4, #0]
 8006948:	f015 0506 	ands.w	r5, r5, #6
 800694c:	d107      	bne.n	800695e <_printf_common+0x52>
 800694e:	f104 0a19 	add.w	sl, r4, #25
 8006952:	68e3      	ldr	r3, [r4, #12]
 8006954:	f8d9 2000 	ldr.w	r2, [r9]
 8006958:	1a9b      	subs	r3, r3, r2
 800695a:	42ab      	cmp	r3, r5
 800695c:	dc28      	bgt.n	80069b0 <_printf_common+0xa4>
 800695e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006962:	6822      	ldr	r2, [r4, #0]
 8006964:	3300      	adds	r3, #0
 8006966:	bf18      	it	ne
 8006968:	2301      	movne	r3, #1
 800696a:	0692      	lsls	r2, r2, #26
 800696c:	d42d      	bmi.n	80069ca <_printf_common+0xbe>
 800696e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006972:	4639      	mov	r1, r7
 8006974:	4630      	mov	r0, r6
 8006976:	47c0      	blx	r8
 8006978:	3001      	adds	r0, #1
 800697a:	d020      	beq.n	80069be <_printf_common+0xb2>
 800697c:	6823      	ldr	r3, [r4, #0]
 800697e:	68e5      	ldr	r5, [r4, #12]
 8006980:	f8d9 2000 	ldr.w	r2, [r9]
 8006984:	f003 0306 	and.w	r3, r3, #6
 8006988:	2b04      	cmp	r3, #4
 800698a:	bf08      	it	eq
 800698c:	1aad      	subeq	r5, r5, r2
 800698e:	68a3      	ldr	r3, [r4, #8]
 8006990:	6922      	ldr	r2, [r4, #16]
 8006992:	bf0c      	ite	eq
 8006994:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006998:	2500      	movne	r5, #0
 800699a:	4293      	cmp	r3, r2
 800699c:	bfc4      	itt	gt
 800699e:	1a9b      	subgt	r3, r3, r2
 80069a0:	18ed      	addgt	r5, r5, r3
 80069a2:	f04f 0900 	mov.w	r9, #0
 80069a6:	341a      	adds	r4, #26
 80069a8:	454d      	cmp	r5, r9
 80069aa:	d11a      	bne.n	80069e2 <_printf_common+0xd6>
 80069ac:	2000      	movs	r0, #0
 80069ae:	e008      	b.n	80069c2 <_printf_common+0xb6>
 80069b0:	2301      	movs	r3, #1
 80069b2:	4652      	mov	r2, sl
 80069b4:	4639      	mov	r1, r7
 80069b6:	4630      	mov	r0, r6
 80069b8:	47c0      	blx	r8
 80069ba:	3001      	adds	r0, #1
 80069bc:	d103      	bne.n	80069c6 <_printf_common+0xba>
 80069be:	f04f 30ff 	mov.w	r0, #4294967295
 80069c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069c6:	3501      	adds	r5, #1
 80069c8:	e7c3      	b.n	8006952 <_printf_common+0x46>
 80069ca:	18e1      	adds	r1, r4, r3
 80069cc:	1c5a      	adds	r2, r3, #1
 80069ce:	2030      	movs	r0, #48	; 0x30
 80069d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80069d4:	4422      	add	r2, r4
 80069d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80069da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80069de:	3302      	adds	r3, #2
 80069e0:	e7c5      	b.n	800696e <_printf_common+0x62>
 80069e2:	2301      	movs	r3, #1
 80069e4:	4622      	mov	r2, r4
 80069e6:	4639      	mov	r1, r7
 80069e8:	4630      	mov	r0, r6
 80069ea:	47c0      	blx	r8
 80069ec:	3001      	adds	r0, #1
 80069ee:	d0e6      	beq.n	80069be <_printf_common+0xb2>
 80069f0:	f109 0901 	add.w	r9, r9, #1
 80069f4:	e7d8      	b.n	80069a8 <_printf_common+0x9c>
	...

080069f8 <_printf_i>:
 80069f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80069fc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006a00:	460c      	mov	r4, r1
 8006a02:	7e09      	ldrb	r1, [r1, #24]
 8006a04:	b085      	sub	sp, #20
 8006a06:	296e      	cmp	r1, #110	; 0x6e
 8006a08:	4617      	mov	r7, r2
 8006a0a:	4606      	mov	r6, r0
 8006a0c:	4698      	mov	r8, r3
 8006a0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a10:	f000 80b3 	beq.w	8006b7a <_printf_i+0x182>
 8006a14:	d822      	bhi.n	8006a5c <_printf_i+0x64>
 8006a16:	2963      	cmp	r1, #99	; 0x63
 8006a18:	d036      	beq.n	8006a88 <_printf_i+0x90>
 8006a1a:	d80a      	bhi.n	8006a32 <_printf_i+0x3a>
 8006a1c:	2900      	cmp	r1, #0
 8006a1e:	f000 80b9 	beq.w	8006b94 <_printf_i+0x19c>
 8006a22:	2958      	cmp	r1, #88	; 0x58
 8006a24:	f000 8083 	beq.w	8006b2e <_printf_i+0x136>
 8006a28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a2c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006a30:	e032      	b.n	8006a98 <_printf_i+0xa0>
 8006a32:	2964      	cmp	r1, #100	; 0x64
 8006a34:	d001      	beq.n	8006a3a <_printf_i+0x42>
 8006a36:	2969      	cmp	r1, #105	; 0x69
 8006a38:	d1f6      	bne.n	8006a28 <_printf_i+0x30>
 8006a3a:	6820      	ldr	r0, [r4, #0]
 8006a3c:	6813      	ldr	r3, [r2, #0]
 8006a3e:	0605      	lsls	r5, r0, #24
 8006a40:	f103 0104 	add.w	r1, r3, #4
 8006a44:	d52a      	bpl.n	8006a9c <_printf_i+0xa4>
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	6011      	str	r1, [r2, #0]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	da03      	bge.n	8006a56 <_printf_i+0x5e>
 8006a4e:	222d      	movs	r2, #45	; 0x2d
 8006a50:	425b      	negs	r3, r3
 8006a52:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006a56:	486f      	ldr	r0, [pc, #444]	; (8006c14 <_printf_i+0x21c>)
 8006a58:	220a      	movs	r2, #10
 8006a5a:	e039      	b.n	8006ad0 <_printf_i+0xd8>
 8006a5c:	2973      	cmp	r1, #115	; 0x73
 8006a5e:	f000 809d 	beq.w	8006b9c <_printf_i+0x1a4>
 8006a62:	d808      	bhi.n	8006a76 <_printf_i+0x7e>
 8006a64:	296f      	cmp	r1, #111	; 0x6f
 8006a66:	d020      	beq.n	8006aaa <_printf_i+0xb2>
 8006a68:	2970      	cmp	r1, #112	; 0x70
 8006a6a:	d1dd      	bne.n	8006a28 <_printf_i+0x30>
 8006a6c:	6823      	ldr	r3, [r4, #0]
 8006a6e:	f043 0320 	orr.w	r3, r3, #32
 8006a72:	6023      	str	r3, [r4, #0]
 8006a74:	e003      	b.n	8006a7e <_printf_i+0x86>
 8006a76:	2975      	cmp	r1, #117	; 0x75
 8006a78:	d017      	beq.n	8006aaa <_printf_i+0xb2>
 8006a7a:	2978      	cmp	r1, #120	; 0x78
 8006a7c:	d1d4      	bne.n	8006a28 <_printf_i+0x30>
 8006a7e:	2378      	movs	r3, #120	; 0x78
 8006a80:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006a84:	4864      	ldr	r0, [pc, #400]	; (8006c18 <_printf_i+0x220>)
 8006a86:	e055      	b.n	8006b34 <_printf_i+0x13c>
 8006a88:	6813      	ldr	r3, [r2, #0]
 8006a8a:	1d19      	adds	r1, r3, #4
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	6011      	str	r1, [r2, #0]
 8006a90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e08c      	b.n	8006bb6 <_printf_i+0x1be>
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	6011      	str	r1, [r2, #0]
 8006aa0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006aa4:	bf18      	it	ne
 8006aa6:	b21b      	sxthne	r3, r3
 8006aa8:	e7cf      	b.n	8006a4a <_printf_i+0x52>
 8006aaa:	6813      	ldr	r3, [r2, #0]
 8006aac:	6825      	ldr	r5, [r4, #0]
 8006aae:	1d18      	adds	r0, r3, #4
 8006ab0:	6010      	str	r0, [r2, #0]
 8006ab2:	0628      	lsls	r0, r5, #24
 8006ab4:	d501      	bpl.n	8006aba <_printf_i+0xc2>
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	e002      	b.n	8006ac0 <_printf_i+0xc8>
 8006aba:	0668      	lsls	r0, r5, #25
 8006abc:	d5fb      	bpl.n	8006ab6 <_printf_i+0xbe>
 8006abe:	881b      	ldrh	r3, [r3, #0]
 8006ac0:	4854      	ldr	r0, [pc, #336]	; (8006c14 <_printf_i+0x21c>)
 8006ac2:	296f      	cmp	r1, #111	; 0x6f
 8006ac4:	bf14      	ite	ne
 8006ac6:	220a      	movne	r2, #10
 8006ac8:	2208      	moveq	r2, #8
 8006aca:	2100      	movs	r1, #0
 8006acc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ad0:	6865      	ldr	r5, [r4, #4]
 8006ad2:	60a5      	str	r5, [r4, #8]
 8006ad4:	2d00      	cmp	r5, #0
 8006ad6:	f2c0 8095 	blt.w	8006c04 <_printf_i+0x20c>
 8006ada:	6821      	ldr	r1, [r4, #0]
 8006adc:	f021 0104 	bic.w	r1, r1, #4
 8006ae0:	6021      	str	r1, [r4, #0]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d13d      	bne.n	8006b62 <_printf_i+0x16a>
 8006ae6:	2d00      	cmp	r5, #0
 8006ae8:	f040 808e 	bne.w	8006c08 <_printf_i+0x210>
 8006aec:	4665      	mov	r5, ip
 8006aee:	2a08      	cmp	r2, #8
 8006af0:	d10b      	bne.n	8006b0a <_printf_i+0x112>
 8006af2:	6823      	ldr	r3, [r4, #0]
 8006af4:	07db      	lsls	r3, r3, #31
 8006af6:	d508      	bpl.n	8006b0a <_printf_i+0x112>
 8006af8:	6923      	ldr	r3, [r4, #16]
 8006afa:	6862      	ldr	r2, [r4, #4]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	bfde      	ittt	le
 8006b00:	2330      	movle	r3, #48	; 0x30
 8006b02:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006b06:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006b0a:	ebac 0305 	sub.w	r3, ip, r5
 8006b0e:	6123      	str	r3, [r4, #16]
 8006b10:	f8cd 8000 	str.w	r8, [sp]
 8006b14:	463b      	mov	r3, r7
 8006b16:	aa03      	add	r2, sp, #12
 8006b18:	4621      	mov	r1, r4
 8006b1a:	4630      	mov	r0, r6
 8006b1c:	f7ff fef6 	bl	800690c <_printf_common>
 8006b20:	3001      	adds	r0, #1
 8006b22:	d14d      	bne.n	8006bc0 <_printf_i+0x1c8>
 8006b24:	f04f 30ff 	mov.w	r0, #4294967295
 8006b28:	b005      	add	sp, #20
 8006b2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b2e:	4839      	ldr	r0, [pc, #228]	; (8006c14 <_printf_i+0x21c>)
 8006b30:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006b34:	6813      	ldr	r3, [r2, #0]
 8006b36:	6821      	ldr	r1, [r4, #0]
 8006b38:	1d1d      	adds	r5, r3, #4
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	6015      	str	r5, [r2, #0]
 8006b3e:	060a      	lsls	r2, r1, #24
 8006b40:	d50b      	bpl.n	8006b5a <_printf_i+0x162>
 8006b42:	07ca      	lsls	r2, r1, #31
 8006b44:	bf44      	itt	mi
 8006b46:	f041 0120 	orrmi.w	r1, r1, #32
 8006b4a:	6021      	strmi	r1, [r4, #0]
 8006b4c:	b91b      	cbnz	r3, 8006b56 <_printf_i+0x15e>
 8006b4e:	6822      	ldr	r2, [r4, #0]
 8006b50:	f022 0220 	bic.w	r2, r2, #32
 8006b54:	6022      	str	r2, [r4, #0]
 8006b56:	2210      	movs	r2, #16
 8006b58:	e7b7      	b.n	8006aca <_printf_i+0xd2>
 8006b5a:	064d      	lsls	r5, r1, #25
 8006b5c:	bf48      	it	mi
 8006b5e:	b29b      	uxthmi	r3, r3
 8006b60:	e7ef      	b.n	8006b42 <_printf_i+0x14a>
 8006b62:	4665      	mov	r5, ip
 8006b64:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b68:	fb02 3311 	mls	r3, r2, r1, r3
 8006b6c:	5cc3      	ldrb	r3, [r0, r3]
 8006b6e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006b72:	460b      	mov	r3, r1
 8006b74:	2900      	cmp	r1, #0
 8006b76:	d1f5      	bne.n	8006b64 <_printf_i+0x16c>
 8006b78:	e7b9      	b.n	8006aee <_printf_i+0xf6>
 8006b7a:	6813      	ldr	r3, [r2, #0]
 8006b7c:	6825      	ldr	r5, [r4, #0]
 8006b7e:	6961      	ldr	r1, [r4, #20]
 8006b80:	1d18      	adds	r0, r3, #4
 8006b82:	6010      	str	r0, [r2, #0]
 8006b84:	0628      	lsls	r0, r5, #24
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	d501      	bpl.n	8006b8e <_printf_i+0x196>
 8006b8a:	6019      	str	r1, [r3, #0]
 8006b8c:	e002      	b.n	8006b94 <_printf_i+0x19c>
 8006b8e:	066a      	lsls	r2, r5, #25
 8006b90:	d5fb      	bpl.n	8006b8a <_printf_i+0x192>
 8006b92:	8019      	strh	r1, [r3, #0]
 8006b94:	2300      	movs	r3, #0
 8006b96:	6123      	str	r3, [r4, #16]
 8006b98:	4665      	mov	r5, ip
 8006b9a:	e7b9      	b.n	8006b10 <_printf_i+0x118>
 8006b9c:	6813      	ldr	r3, [r2, #0]
 8006b9e:	1d19      	adds	r1, r3, #4
 8006ba0:	6011      	str	r1, [r2, #0]
 8006ba2:	681d      	ldr	r5, [r3, #0]
 8006ba4:	6862      	ldr	r2, [r4, #4]
 8006ba6:	2100      	movs	r1, #0
 8006ba8:	4628      	mov	r0, r5
 8006baa:	f7f9 fb11 	bl	80001d0 <memchr>
 8006bae:	b108      	cbz	r0, 8006bb4 <_printf_i+0x1bc>
 8006bb0:	1b40      	subs	r0, r0, r5
 8006bb2:	6060      	str	r0, [r4, #4]
 8006bb4:	6863      	ldr	r3, [r4, #4]
 8006bb6:	6123      	str	r3, [r4, #16]
 8006bb8:	2300      	movs	r3, #0
 8006bba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bbe:	e7a7      	b.n	8006b10 <_printf_i+0x118>
 8006bc0:	6923      	ldr	r3, [r4, #16]
 8006bc2:	462a      	mov	r2, r5
 8006bc4:	4639      	mov	r1, r7
 8006bc6:	4630      	mov	r0, r6
 8006bc8:	47c0      	blx	r8
 8006bca:	3001      	adds	r0, #1
 8006bcc:	d0aa      	beq.n	8006b24 <_printf_i+0x12c>
 8006bce:	6823      	ldr	r3, [r4, #0]
 8006bd0:	079b      	lsls	r3, r3, #30
 8006bd2:	d413      	bmi.n	8006bfc <_printf_i+0x204>
 8006bd4:	68e0      	ldr	r0, [r4, #12]
 8006bd6:	9b03      	ldr	r3, [sp, #12]
 8006bd8:	4298      	cmp	r0, r3
 8006bda:	bfb8      	it	lt
 8006bdc:	4618      	movlt	r0, r3
 8006bde:	e7a3      	b.n	8006b28 <_printf_i+0x130>
 8006be0:	2301      	movs	r3, #1
 8006be2:	464a      	mov	r2, r9
 8006be4:	4639      	mov	r1, r7
 8006be6:	4630      	mov	r0, r6
 8006be8:	47c0      	blx	r8
 8006bea:	3001      	adds	r0, #1
 8006bec:	d09a      	beq.n	8006b24 <_printf_i+0x12c>
 8006bee:	3501      	adds	r5, #1
 8006bf0:	68e3      	ldr	r3, [r4, #12]
 8006bf2:	9a03      	ldr	r2, [sp, #12]
 8006bf4:	1a9b      	subs	r3, r3, r2
 8006bf6:	42ab      	cmp	r3, r5
 8006bf8:	dcf2      	bgt.n	8006be0 <_printf_i+0x1e8>
 8006bfa:	e7eb      	b.n	8006bd4 <_printf_i+0x1dc>
 8006bfc:	2500      	movs	r5, #0
 8006bfe:	f104 0919 	add.w	r9, r4, #25
 8006c02:	e7f5      	b.n	8006bf0 <_printf_i+0x1f8>
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d1ac      	bne.n	8006b62 <_printf_i+0x16a>
 8006c08:	7803      	ldrb	r3, [r0, #0]
 8006c0a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c0e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c12:	e76c      	b.n	8006aee <_printf_i+0xf6>
 8006c14:	08006f19 	.word	0x08006f19
 8006c18:	08006f2a 	.word	0x08006f2a

08006c1c <memmove>:
 8006c1c:	4288      	cmp	r0, r1
 8006c1e:	b510      	push	{r4, lr}
 8006c20:	eb01 0302 	add.w	r3, r1, r2
 8006c24:	d807      	bhi.n	8006c36 <memmove+0x1a>
 8006c26:	1e42      	subs	r2, r0, #1
 8006c28:	4299      	cmp	r1, r3
 8006c2a:	d00a      	beq.n	8006c42 <memmove+0x26>
 8006c2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c30:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006c34:	e7f8      	b.n	8006c28 <memmove+0xc>
 8006c36:	4283      	cmp	r3, r0
 8006c38:	d9f5      	bls.n	8006c26 <memmove+0xa>
 8006c3a:	1881      	adds	r1, r0, r2
 8006c3c:	1ad2      	subs	r2, r2, r3
 8006c3e:	42d3      	cmn	r3, r2
 8006c40:	d100      	bne.n	8006c44 <memmove+0x28>
 8006c42:	bd10      	pop	{r4, pc}
 8006c44:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c48:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006c4c:	e7f7      	b.n	8006c3e <memmove+0x22>
	...

08006c50 <_free_r>:
 8006c50:	b538      	push	{r3, r4, r5, lr}
 8006c52:	4605      	mov	r5, r0
 8006c54:	2900      	cmp	r1, #0
 8006c56:	d045      	beq.n	8006ce4 <_free_r+0x94>
 8006c58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c5c:	1f0c      	subs	r4, r1, #4
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	bfb8      	it	lt
 8006c62:	18e4      	addlt	r4, r4, r3
 8006c64:	f000 f8d2 	bl	8006e0c <__malloc_lock>
 8006c68:	4a1f      	ldr	r2, [pc, #124]	; (8006ce8 <_free_r+0x98>)
 8006c6a:	6813      	ldr	r3, [r2, #0]
 8006c6c:	4610      	mov	r0, r2
 8006c6e:	b933      	cbnz	r3, 8006c7e <_free_r+0x2e>
 8006c70:	6063      	str	r3, [r4, #4]
 8006c72:	6014      	str	r4, [r2, #0]
 8006c74:	4628      	mov	r0, r5
 8006c76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c7a:	f000 b8c8 	b.w	8006e0e <__malloc_unlock>
 8006c7e:	42a3      	cmp	r3, r4
 8006c80:	d90c      	bls.n	8006c9c <_free_r+0x4c>
 8006c82:	6821      	ldr	r1, [r4, #0]
 8006c84:	1862      	adds	r2, r4, r1
 8006c86:	4293      	cmp	r3, r2
 8006c88:	bf04      	itt	eq
 8006c8a:	681a      	ldreq	r2, [r3, #0]
 8006c8c:	685b      	ldreq	r3, [r3, #4]
 8006c8e:	6063      	str	r3, [r4, #4]
 8006c90:	bf04      	itt	eq
 8006c92:	1852      	addeq	r2, r2, r1
 8006c94:	6022      	streq	r2, [r4, #0]
 8006c96:	6004      	str	r4, [r0, #0]
 8006c98:	e7ec      	b.n	8006c74 <_free_r+0x24>
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	685a      	ldr	r2, [r3, #4]
 8006c9e:	b10a      	cbz	r2, 8006ca4 <_free_r+0x54>
 8006ca0:	42a2      	cmp	r2, r4
 8006ca2:	d9fa      	bls.n	8006c9a <_free_r+0x4a>
 8006ca4:	6819      	ldr	r1, [r3, #0]
 8006ca6:	1858      	adds	r0, r3, r1
 8006ca8:	42a0      	cmp	r0, r4
 8006caa:	d10b      	bne.n	8006cc4 <_free_r+0x74>
 8006cac:	6820      	ldr	r0, [r4, #0]
 8006cae:	4401      	add	r1, r0
 8006cb0:	1858      	adds	r0, r3, r1
 8006cb2:	4282      	cmp	r2, r0
 8006cb4:	6019      	str	r1, [r3, #0]
 8006cb6:	d1dd      	bne.n	8006c74 <_free_r+0x24>
 8006cb8:	6810      	ldr	r0, [r2, #0]
 8006cba:	6852      	ldr	r2, [r2, #4]
 8006cbc:	605a      	str	r2, [r3, #4]
 8006cbe:	4401      	add	r1, r0
 8006cc0:	6019      	str	r1, [r3, #0]
 8006cc2:	e7d7      	b.n	8006c74 <_free_r+0x24>
 8006cc4:	d902      	bls.n	8006ccc <_free_r+0x7c>
 8006cc6:	230c      	movs	r3, #12
 8006cc8:	602b      	str	r3, [r5, #0]
 8006cca:	e7d3      	b.n	8006c74 <_free_r+0x24>
 8006ccc:	6820      	ldr	r0, [r4, #0]
 8006cce:	1821      	adds	r1, r4, r0
 8006cd0:	428a      	cmp	r2, r1
 8006cd2:	bf04      	itt	eq
 8006cd4:	6811      	ldreq	r1, [r2, #0]
 8006cd6:	6852      	ldreq	r2, [r2, #4]
 8006cd8:	6062      	str	r2, [r4, #4]
 8006cda:	bf04      	itt	eq
 8006cdc:	1809      	addeq	r1, r1, r0
 8006cde:	6021      	streq	r1, [r4, #0]
 8006ce0:	605c      	str	r4, [r3, #4]
 8006ce2:	e7c7      	b.n	8006c74 <_free_r+0x24>
 8006ce4:	bd38      	pop	{r3, r4, r5, pc}
 8006ce6:	bf00      	nop
 8006ce8:	20001954 	.word	0x20001954

08006cec <_malloc_r>:
 8006cec:	b570      	push	{r4, r5, r6, lr}
 8006cee:	1ccd      	adds	r5, r1, #3
 8006cf0:	f025 0503 	bic.w	r5, r5, #3
 8006cf4:	3508      	adds	r5, #8
 8006cf6:	2d0c      	cmp	r5, #12
 8006cf8:	bf38      	it	cc
 8006cfa:	250c      	movcc	r5, #12
 8006cfc:	2d00      	cmp	r5, #0
 8006cfe:	4606      	mov	r6, r0
 8006d00:	db01      	blt.n	8006d06 <_malloc_r+0x1a>
 8006d02:	42a9      	cmp	r1, r5
 8006d04:	d903      	bls.n	8006d0e <_malloc_r+0x22>
 8006d06:	230c      	movs	r3, #12
 8006d08:	6033      	str	r3, [r6, #0]
 8006d0a:	2000      	movs	r0, #0
 8006d0c:	bd70      	pop	{r4, r5, r6, pc}
 8006d0e:	f000 f87d 	bl	8006e0c <__malloc_lock>
 8006d12:	4a21      	ldr	r2, [pc, #132]	; (8006d98 <_malloc_r+0xac>)
 8006d14:	6814      	ldr	r4, [r2, #0]
 8006d16:	4621      	mov	r1, r4
 8006d18:	b991      	cbnz	r1, 8006d40 <_malloc_r+0x54>
 8006d1a:	4c20      	ldr	r4, [pc, #128]	; (8006d9c <_malloc_r+0xb0>)
 8006d1c:	6823      	ldr	r3, [r4, #0]
 8006d1e:	b91b      	cbnz	r3, 8006d28 <_malloc_r+0x3c>
 8006d20:	4630      	mov	r0, r6
 8006d22:	f000 f863 	bl	8006dec <_sbrk_r>
 8006d26:	6020      	str	r0, [r4, #0]
 8006d28:	4629      	mov	r1, r5
 8006d2a:	4630      	mov	r0, r6
 8006d2c:	f000 f85e 	bl	8006dec <_sbrk_r>
 8006d30:	1c43      	adds	r3, r0, #1
 8006d32:	d124      	bne.n	8006d7e <_malloc_r+0x92>
 8006d34:	230c      	movs	r3, #12
 8006d36:	6033      	str	r3, [r6, #0]
 8006d38:	4630      	mov	r0, r6
 8006d3a:	f000 f868 	bl	8006e0e <__malloc_unlock>
 8006d3e:	e7e4      	b.n	8006d0a <_malloc_r+0x1e>
 8006d40:	680b      	ldr	r3, [r1, #0]
 8006d42:	1b5b      	subs	r3, r3, r5
 8006d44:	d418      	bmi.n	8006d78 <_malloc_r+0x8c>
 8006d46:	2b0b      	cmp	r3, #11
 8006d48:	d90f      	bls.n	8006d6a <_malloc_r+0x7e>
 8006d4a:	600b      	str	r3, [r1, #0]
 8006d4c:	50cd      	str	r5, [r1, r3]
 8006d4e:	18cc      	adds	r4, r1, r3
 8006d50:	4630      	mov	r0, r6
 8006d52:	f000 f85c 	bl	8006e0e <__malloc_unlock>
 8006d56:	f104 000b 	add.w	r0, r4, #11
 8006d5a:	1d23      	adds	r3, r4, #4
 8006d5c:	f020 0007 	bic.w	r0, r0, #7
 8006d60:	1ac3      	subs	r3, r0, r3
 8006d62:	d0d3      	beq.n	8006d0c <_malloc_r+0x20>
 8006d64:	425a      	negs	r2, r3
 8006d66:	50e2      	str	r2, [r4, r3]
 8006d68:	e7d0      	b.n	8006d0c <_malloc_r+0x20>
 8006d6a:	428c      	cmp	r4, r1
 8006d6c:	684b      	ldr	r3, [r1, #4]
 8006d6e:	bf16      	itet	ne
 8006d70:	6063      	strne	r3, [r4, #4]
 8006d72:	6013      	streq	r3, [r2, #0]
 8006d74:	460c      	movne	r4, r1
 8006d76:	e7eb      	b.n	8006d50 <_malloc_r+0x64>
 8006d78:	460c      	mov	r4, r1
 8006d7a:	6849      	ldr	r1, [r1, #4]
 8006d7c:	e7cc      	b.n	8006d18 <_malloc_r+0x2c>
 8006d7e:	1cc4      	adds	r4, r0, #3
 8006d80:	f024 0403 	bic.w	r4, r4, #3
 8006d84:	42a0      	cmp	r0, r4
 8006d86:	d005      	beq.n	8006d94 <_malloc_r+0xa8>
 8006d88:	1a21      	subs	r1, r4, r0
 8006d8a:	4630      	mov	r0, r6
 8006d8c:	f000 f82e 	bl	8006dec <_sbrk_r>
 8006d90:	3001      	adds	r0, #1
 8006d92:	d0cf      	beq.n	8006d34 <_malloc_r+0x48>
 8006d94:	6025      	str	r5, [r4, #0]
 8006d96:	e7db      	b.n	8006d50 <_malloc_r+0x64>
 8006d98:	20001954 	.word	0x20001954
 8006d9c:	20001958 	.word	0x20001958

08006da0 <_realloc_r>:
 8006da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006da2:	4607      	mov	r7, r0
 8006da4:	4614      	mov	r4, r2
 8006da6:	460e      	mov	r6, r1
 8006da8:	b921      	cbnz	r1, 8006db4 <_realloc_r+0x14>
 8006daa:	4611      	mov	r1, r2
 8006dac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006db0:	f7ff bf9c 	b.w	8006cec <_malloc_r>
 8006db4:	b922      	cbnz	r2, 8006dc0 <_realloc_r+0x20>
 8006db6:	f7ff ff4b 	bl	8006c50 <_free_r>
 8006dba:	4625      	mov	r5, r4
 8006dbc:	4628      	mov	r0, r5
 8006dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dc0:	f000 f826 	bl	8006e10 <_malloc_usable_size_r>
 8006dc4:	42a0      	cmp	r0, r4
 8006dc6:	d20f      	bcs.n	8006de8 <_realloc_r+0x48>
 8006dc8:	4621      	mov	r1, r4
 8006dca:	4638      	mov	r0, r7
 8006dcc:	f7ff ff8e 	bl	8006cec <_malloc_r>
 8006dd0:	4605      	mov	r5, r0
 8006dd2:	2800      	cmp	r0, #0
 8006dd4:	d0f2      	beq.n	8006dbc <_realloc_r+0x1c>
 8006dd6:	4631      	mov	r1, r6
 8006dd8:	4622      	mov	r2, r4
 8006dda:	f7ff fc11 	bl	8006600 <memcpy>
 8006dde:	4631      	mov	r1, r6
 8006de0:	4638      	mov	r0, r7
 8006de2:	f7ff ff35 	bl	8006c50 <_free_r>
 8006de6:	e7e9      	b.n	8006dbc <_realloc_r+0x1c>
 8006de8:	4635      	mov	r5, r6
 8006dea:	e7e7      	b.n	8006dbc <_realloc_r+0x1c>

08006dec <_sbrk_r>:
 8006dec:	b538      	push	{r3, r4, r5, lr}
 8006dee:	4c06      	ldr	r4, [pc, #24]	; (8006e08 <_sbrk_r+0x1c>)
 8006df0:	2300      	movs	r3, #0
 8006df2:	4605      	mov	r5, r0
 8006df4:	4608      	mov	r0, r1
 8006df6:	6023      	str	r3, [r4, #0]
 8006df8:	f7f9 ff42 	bl	8000c80 <_sbrk>
 8006dfc:	1c43      	adds	r3, r0, #1
 8006dfe:	d102      	bne.n	8006e06 <_sbrk_r+0x1a>
 8006e00:	6823      	ldr	r3, [r4, #0]
 8006e02:	b103      	cbz	r3, 8006e06 <_sbrk_r+0x1a>
 8006e04:	602b      	str	r3, [r5, #0]
 8006e06:	bd38      	pop	{r3, r4, r5, pc}
 8006e08:	20001ac0 	.word	0x20001ac0

08006e0c <__malloc_lock>:
 8006e0c:	4770      	bx	lr

08006e0e <__malloc_unlock>:
 8006e0e:	4770      	bx	lr

08006e10 <_malloc_usable_size_r>:
 8006e10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e14:	1f18      	subs	r0, r3, #4
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	bfbc      	itt	lt
 8006e1a:	580b      	ldrlt	r3, [r1, r0]
 8006e1c:	18c0      	addlt	r0, r0, r3
 8006e1e:	4770      	bx	lr

08006e20 <_init>:
 8006e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e22:	bf00      	nop
 8006e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e26:	bc08      	pop	{r3}
 8006e28:	469e      	mov	lr, r3
 8006e2a:	4770      	bx	lr

08006e2c <_fini>:
 8006e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e2e:	bf00      	nop
 8006e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e32:	bc08      	pop	{r3}
 8006e34:	469e      	mov	lr, r3
 8006e36:	4770      	bx	lr
