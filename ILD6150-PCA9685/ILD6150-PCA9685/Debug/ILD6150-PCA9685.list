
ILD6150-PCA9685.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08006544  08006544  00016544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006614  08006614  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006614  08006614  00016614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800661c  0800661c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800661c  0800661c  0001661c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006620  08006620  00016620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006624  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a40  20000010  08006634  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a50  08006634  00021a50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e74a  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000034fe  00000000  00000000  0003e78a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018f8  00000000  00000000  00041c88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001770  00000000  00000000  00043580  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000036ae  00000000  00000000  00044cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013ce3  00000000  00000000  0004839e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d4f2a  00000000  00000000  0005c081  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00130fab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069d8  00000000  00000000  00131028  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800652c 	.word	0x0800652c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	0800652c 	.word	0x0800652c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fbd5 	bl	8000c82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f828 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f906 	bl	80006ec <MX_GPIO_Init>
  MX_I2C1_Init();
 80004e0:	f000 f896 	bl	8000610 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80004e4:	f000 f8d2 	bl	800068c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004e8:	f003 faa8 	bl	8003a3c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004ec:	4a09      	ldr	r2, [pc, #36]	; (8000514 <main+0x44>)
 80004ee:	2100      	movs	r1, #0
 80004f0:	4809      	ldr	r0, [pc, #36]	; (8000518 <main+0x48>)
 80004f2:	f003 fb0d 	bl	8003b10 <osThreadNew>
 80004f6:	4602      	mov	r2, r0
 80004f8:	4b08      	ldr	r3, [pc, #32]	; (800051c <main+0x4c>)
 80004fa:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  comUsartTaskHandle = osThreadNew(ComUsartTask, NULL, &comUsartTask_attributes);
 80004fc:	4a08      	ldr	r2, [pc, #32]	; (8000520 <main+0x50>)
 80004fe:	2100      	movs	r1, #0
 8000500:	4808      	ldr	r0, [pc, #32]	; (8000524 <main+0x54>)
 8000502:	f003 fb05 	bl	8003b10 <osThreadNew>
 8000506:	4602      	mov	r2, r0
 8000508:	4b07      	ldr	r3, [pc, #28]	; (8000528 <main+0x58>)
 800050a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800050c:	f003 faca 	bl	8003aa4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000510:	e7fe      	b.n	8000510 <main+0x40>
 8000512:	bf00      	nop
 8000514:	08006584 	.word	0x08006584
 8000518:	080008d9 	.word	0x080008d9
 800051c:	200018ec 	.word	0x200018ec
 8000520:	080065a8 	.word	0x080065a8
 8000524:	08000895 	.word	0x08000895
 8000528:	200019bc 	.word	0x200019bc

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b0ac      	sub	sp, #176	; 0xb0
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000536:	2244      	movs	r2, #68	; 0x44
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f005 ffed 	bl	800651a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000550:	1d3b      	adds	r3, r7, #4
 8000552:	2254      	movs	r2, #84	; 0x54
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f005 ffdf 	bl	800651a <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800055c:	f001 f9d8 	bl	8001910 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000560:	4b2a      	ldr	r3, [pc, #168]	; (800060c <SystemClock_Config+0xe0>)
 8000562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000566:	4a29      	ldr	r2, [pc, #164]	; (800060c <SystemClock_Config+0xe0>)
 8000568:	f023 0318 	bic.w	r3, r3, #24
 800056c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000570:	2314      	movs	r3, #20
 8000572:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000574:	2301      	movs	r3, #1
 8000576:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000578:	2301      	movs	r3, #1
 800057a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800057e:	2300      	movs	r3, #0
 8000580:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000584:	2360      	movs	r3, #96	; 0x60
 8000586:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800058a:	2300      	movs	r3, #0
 800058c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000590:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000594:	4618      	mov	r0, r3
 8000596:	f001 fa2f 	bl	80019f8 <HAL_RCC_OscConfig>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80005a0:	f000 f9e8 	bl	8000974 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a4:	230f      	movs	r3, #15
 80005a6:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005a8:	2300      	movs	r3, #0
 80005aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f001 fe3a 	bl	8002238 <HAL_RCC_ClockConfig>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80005ca:	f000 f9d3 	bl	8000974 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80005ce:	2342      	movs	r3, #66	; 0x42
 80005d0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80005d2:	2304      	movs	r3, #4
 80005d4:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	4618      	mov	r0, r3
 80005de:	f002 f85f 	bl	80026a0 <HAL_RCCEx_PeriphCLKConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005e8:	f000 f9c4 	bl	8000974 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005ec:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005f0:	f001 f9ac 	bl	800194c <HAL_PWREx_ControlVoltageScaling>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80005fa:	f000 f9bb 	bl	8000974 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005fe:	f002 fa41 	bl	8002a84 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000602:	bf00      	nop
 8000604:	37b0      	adds	r7, #176	; 0xb0
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40021000 	.word	0x40021000

08000610 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000614:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <MX_I2C1_Init+0x74>)
 8000616:	4a1c      	ldr	r2, [pc, #112]	; (8000688 <MX_I2C1_Init+0x78>)
 8000618:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 800061a:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <MX_I2C1_Init+0x74>)
 800061c:	f640 6214 	movw	r2, #3604	; 0xe14
 8000620:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000622:	4b18      	ldr	r3, [pc, #96]	; (8000684 <MX_I2C1_Init+0x74>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000628:	4b16      	ldr	r3, [pc, #88]	; (8000684 <MX_I2C1_Init+0x74>)
 800062a:	2201      	movs	r2, #1
 800062c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800062e:	4b15      	ldr	r3, [pc, #84]	; (8000684 <MX_I2C1_Init+0x74>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000634:	4b13      	ldr	r3, [pc, #76]	; (8000684 <MX_I2C1_Init+0x74>)
 8000636:	2200      	movs	r2, #0
 8000638:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800063a:	4b12      	ldr	r3, [pc, #72]	; (8000684 <MX_I2C1_Init+0x74>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000640:	4b10      	ldr	r3, [pc, #64]	; (8000684 <MX_I2C1_Init+0x74>)
 8000642:	2200      	movs	r2, #0
 8000644:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000646:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_I2C1_Init+0x74>)
 8000648:	2200      	movs	r2, #0
 800064a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800064c:	480d      	ldr	r0, [pc, #52]	; (8000684 <MX_I2C1_Init+0x74>)
 800064e:	f000 fdcf 	bl	80011f0 <HAL_I2C_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000658:	f000 f98c 	bl	8000974 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800065c:	2100      	movs	r1, #0
 800065e:	4809      	ldr	r0, [pc, #36]	; (8000684 <MX_I2C1_Init+0x74>)
 8000660:	f001 f8be 	bl	80017e0 <HAL_I2CEx_ConfigAnalogFilter>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800066a:	f000 f983 	bl	8000974 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800066e:	2100      	movs	r1, #0
 8000670:	4804      	ldr	r0, [pc, #16]	; (8000684 <MX_I2C1_Init+0x74>)
 8000672:	f001 f900 	bl	8001876 <HAL_I2CEx_ConfigDigitalFilter>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800067c:	f000 f97a 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	200018f0 	.word	0x200018f0
 8000688:	40005400 	.word	0x40005400

0800068c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000690:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <MX_USART2_UART_Init+0x58>)
 8000692:	4a15      	ldr	r2, [pc, #84]	; (80006e8 <MX_USART2_UART_Init+0x5c>)
 8000694:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000696:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <MX_USART2_UART_Init+0x58>)
 8000698:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800069c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800069e:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <MX_USART2_UART_Init+0x58>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006a4:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <MX_USART2_UART_Init+0x58>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80006aa:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <MX_USART2_UART_Init+0x58>)
 80006ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006b0:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006b2:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <MX_USART2_UART_Init+0x58>)
 80006b4:	220c      	movs	r2, #12
 80006b6:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b8:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <MX_USART2_UART_Init+0x58>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <MX_USART2_UART_Init+0x58>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006c4:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <MX_USART2_UART_Init+0x58>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ca:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_USART2_UART_Init+0x58>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006d0:	4804      	ldr	r0, [pc, #16]	; (80006e4 <MX_USART2_UART_Init+0x58>)
 80006d2:	f002 fd57 	bl	8003184 <HAL_UART_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
 80006dc:	f000 f94a 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	2000193c 	.word	0x2000193c
 80006e8:	40004400 	.word	0x40004400

080006ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b088      	sub	sp, #32
 80006f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f2:	f107 030c 	add.w	r3, r7, #12
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
 8000700:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000702:	4b1d      	ldr	r3, [pc, #116]	; (8000778 <MX_GPIO_Init+0x8c>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000706:	4a1c      	ldr	r2, [pc, #112]	; (8000778 <MX_GPIO_Init+0x8c>)
 8000708:	f043 0304 	orr.w	r3, r3, #4
 800070c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800070e:	4b1a      	ldr	r3, [pc, #104]	; (8000778 <MX_GPIO_Init+0x8c>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000712:	f003 0304 	and.w	r3, r3, #4
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	4b17      	ldr	r3, [pc, #92]	; (8000778 <MX_GPIO_Init+0x8c>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071e:	4a16      	ldr	r2, [pc, #88]	; (8000778 <MX_GPIO_Init+0x8c>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000726:	4b14      	ldr	r3, [pc, #80]	; (8000778 <MX_GPIO_Init+0x8c>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000732:	4b11      	ldr	r3, [pc, #68]	; (8000778 <MX_GPIO_Init+0x8c>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	4a10      	ldr	r2, [pc, #64]	; (8000778 <MX_GPIO_Init+0x8c>)
 8000738:	f043 0302 	orr.w	r3, r3, #2
 800073c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <MX_GPIO_Init+0x8c>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	f003 0302 	and.w	r3, r3, #2
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	2108      	movs	r1, #8
 800074e:	480b      	ldr	r0, [pc, #44]	; (800077c <MX_GPIO_Init+0x90>)
 8000750:	f000 fd1c 	bl	800118c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000754:	2308      	movs	r3, #8
 8000756:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000758:	2301      	movs	r3, #1
 800075a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000760:	2300      	movs	r3, #0
 8000762:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	4619      	mov	r1, r3
 800076a:	4804      	ldr	r0, [pc, #16]	; (800077c <MX_GPIO_Init+0x90>)
 800076c:	f000 fba4 	bl	8000eb8 <HAL_GPIO_Init>

}
 8000770:	bf00      	nop
 8000772:	3720      	adds	r7, #32
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40021000 	.word	0x40021000
 800077c:	48000400 	.word	0x48000400

08000780 <pca9685_init>:
	HAL_I2C_Master_Receive(hi2c,address,res,1,1);
	return res;
}

void pca9685_init(I2C_HandleTypeDef *hi2c, uint8_t address)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af02      	add	r7, sp, #8
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	460b      	mov	r3, r1
 800078a:	70fb      	strb	r3, [r7, #3]
 #define PCA9685_MODE1 0x00
 uint8_t initStruct[2];
 uint8_t prescale = 0x03; // hardcoded
 800078c:	2303      	movs	r3, #3
 800078e:	73fb      	strb	r3, [r7, #15]
 HAL_I2C_Master_Transmit(hi2c, address, PCA9685_MODE1, 1, 1);
 8000790:	78fb      	ldrb	r3, [r7, #3]
 8000792:	b299      	uxth	r1, r3
 8000794:	2301      	movs	r3, #1
 8000796:	9300      	str	r3, [sp, #0]
 8000798:	2301      	movs	r3, #1
 800079a:	2200      	movs	r2, #0
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f000 fdb7 	bl	8001310 <HAL_I2C_Master_Transmit>
 uint8_t oldmode = 0x00; // hardcoded
 80007a2:	2300      	movs	r3, #0
 80007a4:	73bb      	strb	r3, [r7, #14]
 //uint8_t oldmode = PCA9685_read(hi2c,address,PCA9685_MODE1);
 // HAL_I2C_Master_Receive(hi2c, address, &oldmode, 1, 1);
 uint8_t newmode = ((oldmode & 0x7F) | 0x10);
 80007a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80007aa:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 80007ae:	b25b      	sxtb	r3, r3
 80007b0:	f043 0310 	orr.w	r3, r3, #16
 80007b4:	b25b      	sxtb	r3, r3
 80007b6:	737b      	strb	r3, [r7, #13]
 initStruct[0] = PCA9685_MODE1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	723b      	strb	r3, [r7, #8]
 initStruct[1] = newmode;
 80007bc:	7b7b      	ldrb	r3, [r7, #13]
 80007be:	727b      	strb	r3, [r7, #9]
 HAL_I2C_Master_Transmit(hi2c, address, initStruct, 2, 1);
 80007c0:	78fb      	ldrb	r3, [r7, #3]
 80007c2:	b299      	uxth	r1, r3
 80007c4:	f107 0208 	add.w	r2, r7, #8
 80007c8:	2301      	movs	r3, #1
 80007ca:	9300      	str	r3, [sp, #0]
 80007cc:	2302      	movs	r3, #2
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f000 fd9e 	bl	8001310 <HAL_I2C_Master_Transmit>
 //initStruct[0] = 0xFE;
 initStruct[1] = prescale;
 80007d4:	7bfb      	ldrb	r3, [r7, #15]
 80007d6:	727b      	strb	r3, [r7, #9]
 HAL_I2C_Master_Transmit(hi2c, address, initStruct, 2, 1);
 80007d8:	78fb      	ldrb	r3, [r7, #3]
 80007da:	b299      	uxth	r1, r3
 80007dc:	f107 0208 	add.w	r2, r7, #8
 80007e0:	2301      	movs	r3, #1
 80007e2:	9300      	str	r3, [sp, #0]
 80007e4:	2302      	movs	r3, #2
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f000 fd92 	bl	8001310 <HAL_I2C_Master_Transmit>
 //initStruct[0] = PCA9685_MODE1;
 initStruct[1] = oldmode;
 80007ec:	7bbb      	ldrb	r3, [r7, #14]
 80007ee:	727b      	strb	r3, [r7, #9]
 HAL_I2C_Master_Transmit(hi2c, address, initStruct, 2, 1);
 80007f0:	78fb      	ldrb	r3, [r7, #3]
 80007f2:	b299      	uxth	r1, r3
 80007f4:	f107 0208 	add.w	r2, r7, #8
 80007f8:	2301      	movs	r3, #1
 80007fa:	9300      	str	r3, [sp, #0]
 80007fc:	2302      	movs	r3, #2
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f000 fd86 	bl	8001310 <HAL_I2C_Master_Transmit>
 osDelay(5);
 8000804:	2005      	movs	r0, #5
 8000806:	f003 fa29 	bl	8003c5c <osDelay>
 initStruct[1] = (oldmode | 0xA1);
 800080a:	7bbb      	ldrb	r3, [r7, #14]
 800080c:	f063 035e 	orn	r3, r3, #94	; 0x5e
 8000810:	b2db      	uxtb	r3, r3
 8000812:	727b      	strb	r3, [r7, #9]
 HAL_I2C_Master_Transmit(hi2c, address, initStruct, 2, 1);
 8000814:	78fb      	ldrb	r3, [r7, #3]
 8000816:	b299      	uxth	r1, r3
 8000818:	f107 0208 	add.w	r2, r7, #8
 800081c:	2301      	movs	r3, #1
 800081e:	9300      	str	r3, [sp, #0]
 8000820:	2302      	movs	r3, #2
 8000822:	6878      	ldr	r0, [r7, #4]
 8000824:	f000 fd74 	bl	8001310 <HAL_I2C_Master_Transmit>

}
 8000828:	bf00      	nop
 800082a:	3710      	adds	r7, #16
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <pca9685_all_pwm>:
	uint8_t outputBuffer[] = {0x06 + 4*num, on, (on >> 8), off, (off >> 8)};
	HAL_I2C_Master_Transmit(hi2c, address, outputBuffer, sizeof(outputBuffer), 1);
}

HAL_StatusTypeDef pca9685_all_pwm(I2C_HandleTypeDef *hi2c, uint8_t address, uint16_t on, uint16_t off)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b088      	sub	sp, #32
 8000834:	af02      	add	r7, sp, #8
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	4608      	mov	r0, r1
 800083a:	4611      	mov	r1, r2
 800083c:	461a      	mov	r2, r3
 800083e:	4603      	mov	r3, r0
 8000840:	72fb      	strb	r3, [r7, #11]
 8000842:	460b      	mov	r3, r1
 8000844:	813b      	strh	r3, [r7, #8]
 8000846:	4613      	mov	r3, r2
 8000848:	80fb      	strh	r3, [r7, #6]
	uint8_t ALL_LED_ON = 0xFA;
 800084a:	23fa      	movs	r3, #250	; 0xfa
 800084c:	75fb      	strb	r3, [r7, #23]
	uint8_t outputBuffer[] = {ALL_LED_ON, on, (on >> 8), off, (off >> 8)};
 800084e:	7dfb      	ldrb	r3, [r7, #23]
 8000850:	743b      	strb	r3, [r7, #16]
 8000852:	893b      	ldrh	r3, [r7, #8]
 8000854:	b2db      	uxtb	r3, r3
 8000856:	747b      	strb	r3, [r7, #17]
 8000858:	893b      	ldrh	r3, [r7, #8]
 800085a:	0a1b      	lsrs	r3, r3, #8
 800085c:	b29b      	uxth	r3, r3
 800085e:	b2db      	uxtb	r3, r3
 8000860:	74bb      	strb	r3, [r7, #18]
 8000862:	88fb      	ldrh	r3, [r7, #6]
 8000864:	b2db      	uxtb	r3, r3
 8000866:	74fb      	strb	r3, [r7, #19]
 8000868:	88fb      	ldrh	r3, [r7, #6]
 800086a:	0a1b      	lsrs	r3, r3, #8
 800086c:	b29b      	uxth	r3, r3
 800086e:	b2db      	uxtb	r3, r3
 8000870:	753b      	strb	r3, [r7, #20]
	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(hi2c, address, outputBuffer, sizeof(outputBuffer), 1);
 8000872:	7afb      	ldrb	r3, [r7, #11]
 8000874:	b299      	uxth	r1, r3
 8000876:	f107 0210 	add.w	r2, r7, #16
 800087a:	2301      	movs	r3, #1
 800087c:	9300      	str	r3, [sp, #0]
 800087e:	2305      	movs	r3, #5
 8000880:	68f8      	ldr	r0, [r7, #12]
 8000882:	f000 fd45 	bl	8001310 <HAL_I2C_Master_Transmit>
 8000886:	4603      	mov	r3, r0
 8000888:	75bb      	strb	r3, [r7, #22]
	return status;
 800088a:	7dbb      	ldrb	r3, [r7, #22]
}
 800088c:	4618      	mov	r0, r3
 800088e:	3718      	adds	r7, #24
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <ComUsartTask>:

void ComUsartTask(void *argument){
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	uint8_t outputBuffer[] = {0,1,0,0,0,0,1,0,1,0};
 800089c:	4a0b      	ldr	r2, [pc, #44]	; (80008cc <ComUsartTask+0x38>)
 800089e:	f107 030c 	add.w	r3, r7, #12
 80008a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80008a4:	c303      	stmia	r3!, {r0, r1}
 80008a6:	801a      	strh	r2, [r3, #0]
	for(;;)
	{
		HAL_UART_Transmit(&huart2, outputBuffer, sizeof(outputBuffer), 500);
 80008a8:	f107 010c 	add.w	r1, r7, #12
 80008ac:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80008b0:	220a      	movs	r2, #10
 80008b2:	4807      	ldr	r0, [pc, #28]	; (80008d0 <ComUsartTask+0x3c>)
 80008b4:	f002 fcb4 	bl	8003220 <HAL_UART_Transmit>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 80008b8:	2108      	movs	r1, #8
 80008ba:	4806      	ldr	r0, [pc, #24]	; (80008d4 <ComUsartTask+0x40>)
 80008bc:	f000 fc7e 	bl	80011bc <HAL_GPIO_TogglePin>
		osDelay(500);
 80008c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008c4:	f003 f9ca 	bl	8003c5c <osDelay>
		HAL_UART_Transmit(&huart2, outputBuffer, sizeof(outputBuffer), 500);
 80008c8:	e7ee      	b.n	80008a8 <ComUsartTask+0x14>
 80008ca:	bf00      	nop
 80008cc:	08006560 	.word	0x08006560
 80008d0:	2000193c 	.word	0x2000193c
 80008d4:	48000400 	.word	0x48000400

080008d8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	 uint8_t I2C_address = 0x80;
 80008e0:	2380      	movs	r3, #128	; 0x80
 80008e2:	73fb      	strb	r3, [r7, #15]
	 pca9685_init(&hi2c1, I2C_address);
 80008e4:	7bfb      	ldrb	r3, [r7, #15]
 80008e6:	4619      	mov	r1, r3
 80008e8:	4818      	ldr	r0, [pc, #96]	; (800094c <StartDefaultTask+0x74>)
 80008ea:	f7ff ff49 	bl	8000780 <pca9685_init>
	 //pca9685_pwm(&hi2c1, I2C_address, 0, 0, 4095);
	 /* Infinite loop */
	 for(;;)
	 {
		 for(int i=0; i<255; i++){
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
 80008f2:	e012      	b.n	800091a <StartDefaultTask+0x42>
			pca9685_all_pwm(&hi2c1, I2C_address, 0, 4095-(16*i));
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	b29b      	uxth	r3, r3
 80008f8:	011b      	lsls	r3, r3, #4
 80008fa:	b29b      	uxth	r3, r3
 80008fc:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8000900:	330f      	adds	r3, #15
 8000902:	b29b      	uxth	r3, r3
 8000904:	7bf9      	ldrb	r1, [r7, #15]
 8000906:	2200      	movs	r2, #0
 8000908:	4810      	ldr	r0, [pc, #64]	; (800094c <StartDefaultTask+0x74>)
 800090a:	f7ff ff91 	bl	8000830 <pca9685_all_pwm>
			osDelay(5);
 800090e:	2005      	movs	r0, #5
 8000910:	f003 f9a4 	bl	8003c5c <osDelay>
		 for(int i=0; i<255; i++){
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	3301      	adds	r3, #1
 8000918:	617b      	str	r3, [r7, #20]
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	2bfe      	cmp	r3, #254	; 0xfe
 800091e:	dde9      	ble.n	80008f4 <StartDefaultTask+0x1c>
		 }

	 	 for(int i=0; i<255; i++){
 8000920:	2300      	movs	r3, #0
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	e00e      	b.n	8000944 <StartDefaultTask+0x6c>
	 		 pca9685_all_pwm(&hi2c1, I2C_address, 0, (16*i));
 8000926:	693b      	ldr	r3, [r7, #16]
 8000928:	b29b      	uxth	r3, r3
 800092a:	011b      	lsls	r3, r3, #4
 800092c:	b29b      	uxth	r3, r3
 800092e:	7bf9      	ldrb	r1, [r7, #15]
 8000930:	2200      	movs	r2, #0
 8000932:	4806      	ldr	r0, [pc, #24]	; (800094c <StartDefaultTask+0x74>)
 8000934:	f7ff ff7c 	bl	8000830 <pca9685_all_pwm>
	 		 osDelay(5);
 8000938:	2005      	movs	r0, #5
 800093a:	f003 f98f 	bl	8003c5c <osDelay>
	 	 for(int i=0; i<255; i++){
 800093e:	693b      	ldr	r3, [r7, #16]
 8000940:	3301      	adds	r3, #1
 8000942:	613b      	str	r3, [r7, #16]
 8000944:	693b      	ldr	r3, [r7, #16]
 8000946:	2bfe      	cmp	r3, #254	; 0xfe
 8000948:	dded      	ble.n	8000926 <StartDefaultTask+0x4e>
		 for(int i=0; i<255; i++){
 800094a:	e7d0      	b.n	80008ee <StartDefaultTask+0x16>
 800094c:	200018f0 	.word	0x200018f0

08000950 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a04      	ldr	r2, [pc, #16]	; (8000970 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d101      	bne.n	8000966 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000962:	f000 f9a7 	bl	8000cb4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40001000 	.word	0x40001000

08000974 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000978:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800097a:	e7fe      	b.n	800097a <Error_Handler+0x6>

0800097c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <HAL_MspInit+0x4c>)
 8000984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000986:	4a10      	ldr	r2, [pc, #64]	; (80009c8 <HAL_MspInit+0x4c>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	6613      	str	r3, [r2, #96]	; 0x60
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <HAL_MspInit+0x4c>)
 8000990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <HAL_MspInit+0x4c>)
 800099c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800099e:	4a0a      	ldr	r2, [pc, #40]	; (80009c8 <HAL_MspInit+0x4c>)
 80009a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a4:	6593      	str	r3, [r2, #88]	; 0x58
 80009a6:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <HAL_MspInit+0x4c>)
 80009a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	210f      	movs	r1, #15
 80009b6:	f06f 0001 	mvn.w	r0, #1
 80009ba:	f000 fa53 	bl	8000e64 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40021000 	.word	0x40021000

080009cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08a      	sub	sp, #40	; 0x28
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a17      	ldr	r2, [pc, #92]	; (8000a48 <HAL_I2C_MspInit+0x7c>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d127      	bne.n	8000a3e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ee:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <HAL_I2C_MspInit+0x80>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f2:	4a16      	ldr	r2, [pc, #88]	; (8000a4c <HAL_I2C_MspInit+0x80>)
 80009f4:	f043 0302 	orr.w	r3, r3, #2
 80009f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009fa:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <HAL_I2C_MspInit+0x80>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a06:	23c0      	movs	r3, #192	; 0xc0
 8000a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a0a:	2312      	movs	r3, #18
 8000a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a12:	2303      	movs	r3, #3
 8000a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a16:	2304      	movs	r3, #4
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	4619      	mov	r1, r3
 8000a20:	480b      	ldr	r0, [pc, #44]	; (8000a50 <HAL_I2C_MspInit+0x84>)
 8000a22:	f000 fa49 	bl	8000eb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a26:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <HAL_I2C_MspInit+0x80>)
 8000a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a2a:	4a08      	ldr	r2, [pc, #32]	; (8000a4c <HAL_I2C_MspInit+0x80>)
 8000a2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a30:	6593      	str	r3, [r2, #88]	; 0x58
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <HAL_I2C_MspInit+0x80>)
 8000a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a3e:	bf00      	nop
 8000a40:	3728      	adds	r7, #40	; 0x28
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40005400 	.word	0x40005400
 8000a4c:	40021000 	.word	0x40021000
 8000a50:	48000400 	.word	0x48000400

08000a54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08a      	sub	sp, #40	; 0x28
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a17      	ldr	r2, [pc, #92]	; (8000ad0 <HAL_UART_MspInit+0x7c>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d128      	bne.n	8000ac8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a76:	4b17      	ldr	r3, [pc, #92]	; (8000ad4 <HAL_UART_MspInit+0x80>)
 8000a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a7a:	4a16      	ldr	r2, [pc, #88]	; (8000ad4 <HAL_UART_MspInit+0x80>)
 8000a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a80:	6593      	str	r3, [r2, #88]	; 0x58
 8000a82:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <HAL_UART_MspInit+0x80>)
 8000a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8e:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <HAL_UART_MspInit+0x80>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	4a10      	ldr	r2, [pc, #64]	; (8000ad4 <HAL_UART_MspInit+0x80>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <HAL_UART_MspInit+0x80>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000aa6:	230c      	movs	r3, #12
 8000aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ab6:	2307      	movs	r3, #7
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	4619      	mov	r1, r3
 8000ac0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac4:	f000 f9f8 	bl	8000eb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ac8:	bf00      	nop
 8000aca:	3728      	adds	r7, #40	; 0x28
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40004400 	.word	0x40004400
 8000ad4:	40021000 	.word	0x40021000

08000ad8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08c      	sub	sp, #48	; 0x30
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	6879      	ldr	r1, [r7, #4]
 8000aec:	2036      	movs	r0, #54	; 0x36
 8000aee:	f000 f9b9 	bl	8000e64 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000af2:	2036      	movs	r0, #54	; 0x36
 8000af4:	f000 f9d2 	bl	8000e9c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000af8:	4b1e      	ldr	r3, [pc, #120]	; (8000b74 <HAL_InitTick+0x9c>)
 8000afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000afc:	4a1d      	ldr	r2, [pc, #116]	; (8000b74 <HAL_InitTick+0x9c>)
 8000afe:	f043 0310 	orr.w	r3, r3, #16
 8000b02:	6593      	str	r3, [r2, #88]	; 0x58
 8000b04:	4b1b      	ldr	r3, [pc, #108]	; (8000b74 <HAL_InitTick+0x9c>)
 8000b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b08:	f003 0310 	and.w	r3, r3, #16
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b10:	f107 0210 	add.w	r2, r7, #16
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	4611      	mov	r1, r2
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f001 fd2e 	bl	800257c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b20:	f001 fd00 	bl	8002524 <HAL_RCC_GetPCLK1Freq>
 8000b24:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b28:	4a13      	ldr	r2, [pc, #76]	; (8000b78 <HAL_InitTick+0xa0>)
 8000b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b2e:	0c9b      	lsrs	r3, r3, #18
 8000b30:	3b01      	subs	r3, #1
 8000b32:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b34:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <HAL_InitTick+0xa4>)
 8000b36:	4a12      	ldr	r2, [pc, #72]	; (8000b80 <HAL_InitTick+0xa8>)
 8000b38:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b3a:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <HAL_InitTick+0xa4>)
 8000b3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b40:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b42:	4a0e      	ldr	r2, [pc, #56]	; (8000b7c <HAL_InitTick+0xa4>)
 8000b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b46:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b48:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <HAL_InitTick+0xa4>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <HAL_InitTick+0xa4>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000b54:	4809      	ldr	r0, [pc, #36]	; (8000b7c <HAL_InitTick+0xa4>)
 8000b56:	f002 f895 	bl	8002c84 <HAL_TIM_Base_Init>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d104      	bne.n	8000b6a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000b60:	4806      	ldr	r0, [pc, #24]	; (8000b7c <HAL_InitTick+0xa4>)
 8000b62:	f002 f8f1 	bl	8002d48 <HAL_TIM_Base_Start_IT>
 8000b66:	4603      	mov	r3, r0
 8000b68:	e000      	b.n	8000b6c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3730      	adds	r7, #48	; 0x30
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40021000 	.word	0x40021000
 8000b78:	431bde83 	.word	0x431bde83
 8000b7c:	200019c0 	.word	0x200019c0
 8000b80:	40001000 	.word	0x40001000

08000b84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <NMI_Handler+0x4>

08000b8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8e:	e7fe      	b.n	8000b8e <HardFault_Handler+0x4>

08000b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <MemManage_Handler+0x4>

08000b96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9a:	e7fe      	b.n	8000b9a <BusFault_Handler+0x4>

08000b9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <UsageFault_Handler+0x4>

08000ba2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bb4:	4802      	ldr	r0, [pc, #8]	; (8000bc0 <TIM6_DAC_IRQHandler+0x10>)
 8000bb6:	f002 f91b 	bl	8002df0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	200019c0 	.word	0x200019c0

08000bc4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bc8:	4b17      	ldr	r3, [pc, #92]	; (8000c28 <SystemInit+0x64>)
 8000bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bce:	4a16      	ldr	r2, [pc, #88]	; (8000c28 <SystemInit+0x64>)
 8000bd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000bd8:	4b14      	ldr	r3, [pc, #80]	; (8000c2c <SystemInit+0x68>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a13      	ldr	r2, [pc, #76]	; (8000c2c <SystemInit+0x68>)
 8000bde:	f043 0301 	orr.w	r3, r3, #1
 8000be2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000be4:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <SystemInit+0x68>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000bea:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <SystemInit+0x68>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a0f      	ldr	r2, [pc, #60]	; (8000c2c <SystemInit+0x68>)
 8000bf0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000bf4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000bf8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <SystemInit+0x68>)
 8000bfc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c00:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c02:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <SystemInit+0x68>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a09      	ldr	r2, [pc, #36]	; (8000c2c <SystemInit+0x68>)
 8000c08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c0c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000c0e:	4b07      	ldr	r3, [pc, #28]	; (8000c2c <SystemInit+0x68>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c14:	4b04      	ldr	r3, [pc, #16]	; (8000c28 <SystemInit+0x64>)
 8000c16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c1a:	609a      	str	r2, [r3, #8]
#endif
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	e000ed00 	.word	0xe000ed00
 8000c2c:	40021000 	.word	0x40021000

08000c30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c68 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c34:	f7ff ffc6 	bl	8000bc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c38:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c3a:	e003      	b.n	8000c44 <LoopCopyDataInit>

08000c3c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c3c:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c3e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c40:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c42:	3104      	adds	r1, #4

08000c44 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c44:	480a      	ldr	r0, [pc, #40]	; (8000c70 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c46:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000c48:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c4a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c4c:	d3f6      	bcc.n	8000c3c <CopyDataInit>
	ldr	r2, =_sbss
 8000c4e:	4a0a      	ldr	r2, [pc, #40]	; (8000c78 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000c50:	e002      	b.n	8000c58 <LoopFillZerobss>

08000c52 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000c52:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000c54:	f842 3b04 	str.w	r3, [r2], #4

08000c58 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000c58:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <LoopForever+0x16>)
	cmp	r2, r3
 8000c5a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c5c:	d3f9      	bcc.n	8000c52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c5e:	f005 fc2d 	bl	80064bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c62:	f7ff fc35 	bl	80004d0 <main>

08000c66 <LoopForever>:

LoopForever:
    b LoopForever
 8000c66:	e7fe      	b.n	8000c66 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c68:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000c6c:	08006624 	.word	0x08006624
	ldr	r0, =_sdata
 8000c70:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c74:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000c78:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000c7c:	20001a50 	.word	0x20001a50

08000c80 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c80:	e7fe      	b.n	8000c80 <ADC1_IRQHandler>

08000c82 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c8c:	2003      	movs	r0, #3
 8000c8e:	f000 f8de 	bl	8000e4e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c92:	2000      	movs	r0, #0
 8000c94:	f7ff ff20 	bl	8000ad8 <HAL_InitTick>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d002      	beq.n	8000ca4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	71fb      	strb	r3, [r7, #7]
 8000ca2:	e001      	b.n	8000ca8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ca4:	f7ff fe6a 	bl	800097c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
	...

08000cb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_IncTick+0x20>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <HAL_IncTick+0x24>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	4a04      	ldr	r2, [pc, #16]	; (8000cd8 <HAL_IncTick+0x24>)
 8000cc6:	6013      	str	r3, [r2, #0]
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	20000008 	.word	0x20000008
 8000cd8:	20001a0c 	.word	0x20001a0c

08000cdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce0:	4b03      	ldr	r3, [pc, #12]	; (8000cf0 <HAL_GetTick+0x14>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	20001a0c 	.word	0x20001a0c

08000cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f003 0307 	and.w	r3, r3, #7
 8000d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d04:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <__NVIC_SetPriorityGrouping+0x44>)
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d0a:	68ba      	ldr	r2, [r7, #8]
 8000d0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d10:	4013      	ands	r3, r2
 8000d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d26:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <__NVIC_SetPriorityGrouping+0x44>)
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	60d3      	str	r3, [r2, #12]
}
 8000d2c:	bf00      	nop
 8000d2e:	3714      	adds	r7, #20
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d40:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <__NVIC_GetPriorityGrouping+0x18>)
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	0a1b      	lsrs	r3, r3, #8
 8000d46:	f003 0307 	and.w	r3, r3, #7
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	db0b      	blt.n	8000d82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	f003 021f 	and.w	r2, r3, #31
 8000d70:	4907      	ldr	r1, [pc, #28]	; (8000d90 <__NVIC_EnableIRQ+0x38>)
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	095b      	lsrs	r3, r3, #5
 8000d78:	2001      	movs	r0, #1
 8000d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	e000e100 	.word	0xe000e100

08000d94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	6039      	str	r1, [r7, #0]
 8000d9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	db0a      	blt.n	8000dbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	b2da      	uxtb	r2, r3
 8000dac:	490c      	ldr	r1, [pc, #48]	; (8000de0 <__NVIC_SetPriority+0x4c>)
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	0112      	lsls	r2, r2, #4
 8000db4:	b2d2      	uxtb	r2, r2
 8000db6:	440b      	add	r3, r1
 8000db8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dbc:	e00a      	b.n	8000dd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	b2da      	uxtb	r2, r3
 8000dc2:	4908      	ldr	r1, [pc, #32]	; (8000de4 <__NVIC_SetPriority+0x50>)
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	f003 030f 	and.w	r3, r3, #15
 8000dca:	3b04      	subs	r3, #4
 8000dcc:	0112      	lsls	r2, r2, #4
 8000dce:	b2d2      	uxtb	r2, r2
 8000dd0:	440b      	add	r3, r1
 8000dd2:	761a      	strb	r2, [r3, #24]
}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	e000e100 	.word	0xe000e100
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b089      	sub	sp, #36	; 0x24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	f003 0307 	and.w	r3, r3, #7
 8000dfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	f1c3 0307 	rsb	r3, r3, #7
 8000e02:	2b04      	cmp	r3, #4
 8000e04:	bf28      	it	cs
 8000e06:	2304      	movcs	r3, #4
 8000e08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	3304      	adds	r3, #4
 8000e0e:	2b06      	cmp	r3, #6
 8000e10:	d902      	bls.n	8000e18 <NVIC_EncodePriority+0x30>
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	3b03      	subs	r3, #3
 8000e16:	e000      	b.n	8000e1a <NVIC_EncodePriority+0x32>
 8000e18:	2300      	movs	r3, #0
 8000e1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	43da      	mvns	r2, r3
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	401a      	ands	r2, r3
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e30:	f04f 31ff 	mov.w	r1, #4294967295
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3a:	43d9      	mvns	r1, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e40:	4313      	orrs	r3, r2
         );
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3724      	adds	r7, #36	; 0x24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b082      	sub	sp, #8
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f7ff ff4c 	bl	8000cf4 <__NVIC_SetPriorityGrouping>
}
 8000e5c:	bf00      	nop
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
 8000e70:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e76:	f7ff ff61 	bl	8000d3c <__NVIC_GetPriorityGrouping>
 8000e7a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	68b9      	ldr	r1, [r7, #8]
 8000e80:	6978      	ldr	r0, [r7, #20]
 8000e82:	f7ff ffb1 	bl	8000de8 <NVIC_EncodePriority>
 8000e86:	4602      	mov	r2, r0
 8000e88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e8c:	4611      	mov	r1, r2
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff ff80 	bl	8000d94 <__NVIC_SetPriority>
}
 8000e94:	bf00      	nop
 8000e96:	3718      	adds	r7, #24
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff ff54 	bl	8000d58 <__NVIC_EnableIRQ>
}
 8000eb0:	bf00      	nop
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b087      	sub	sp, #28
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ec6:	e148      	b.n	800115a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	2101      	movs	r1, #1
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	f000 813a 	beq.w	8001154 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d00b      	beq.n	8000f00 <HAL_GPIO_Init+0x48>
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d007      	beq.n	8000f00 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ef4:	2b11      	cmp	r3, #17
 8000ef6:	d003      	beq.n	8000f00 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	2b12      	cmp	r3, #18
 8000efe:	d130      	bne.n	8000f62 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	2203      	movs	r2, #3
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	43db      	mvns	r3, r3
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	4013      	ands	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	68da      	ldr	r2, [r3, #12]
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f36:	2201      	movs	r2, #1
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	4013      	ands	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	091b      	lsrs	r3, r3, #4
 8000f4c:	f003 0201 	and.w	r2, r3, #1
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43db      	mvns	r3, r3
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	4013      	ands	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	689a      	ldr	r2, [r3, #8]
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d003      	beq.n	8000fa2 <HAL_GPIO_Init+0xea>
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	2b12      	cmp	r3, #18
 8000fa0:	d123      	bne.n	8000fea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	08da      	lsrs	r2, r3, #3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	3208      	adds	r2, #8
 8000faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	220f      	movs	r2, #15
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	691a      	ldr	r2, [r3, #16]
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	f003 0307 	and.w	r3, r3, #7
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	08da      	lsrs	r2, r3, #3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3208      	adds	r2, #8
 8000fe4:	6939      	ldr	r1, [r7, #16]
 8000fe6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	2203      	movs	r2, #3
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	4013      	ands	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f003 0203 	and.w	r2, r3, #3
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	4313      	orrs	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001026:	2b00      	cmp	r3, #0
 8001028:	f000 8094 	beq.w	8001154 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102c:	4b52      	ldr	r3, [pc, #328]	; (8001178 <HAL_GPIO_Init+0x2c0>)
 800102e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001030:	4a51      	ldr	r2, [pc, #324]	; (8001178 <HAL_GPIO_Init+0x2c0>)
 8001032:	f043 0301 	orr.w	r3, r3, #1
 8001036:	6613      	str	r3, [r2, #96]	; 0x60
 8001038:	4b4f      	ldr	r3, [pc, #316]	; (8001178 <HAL_GPIO_Init+0x2c0>)
 800103a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	60bb      	str	r3, [r7, #8]
 8001042:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001044:	4a4d      	ldr	r2, [pc, #308]	; (800117c <HAL_GPIO_Init+0x2c4>)
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	089b      	lsrs	r3, r3, #2
 800104a:	3302      	adds	r3, #2
 800104c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001050:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	f003 0303 	and.w	r3, r3, #3
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	220f      	movs	r2, #15
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	4013      	ands	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800106e:	d00d      	beq.n	800108c <HAL_GPIO_Init+0x1d4>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4a43      	ldr	r2, [pc, #268]	; (8001180 <HAL_GPIO_Init+0x2c8>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d007      	beq.n	8001088 <HAL_GPIO_Init+0x1d0>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4a42      	ldr	r2, [pc, #264]	; (8001184 <HAL_GPIO_Init+0x2cc>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d101      	bne.n	8001084 <HAL_GPIO_Init+0x1cc>
 8001080:	2302      	movs	r3, #2
 8001082:	e004      	b.n	800108e <HAL_GPIO_Init+0x1d6>
 8001084:	2307      	movs	r3, #7
 8001086:	e002      	b.n	800108e <HAL_GPIO_Init+0x1d6>
 8001088:	2301      	movs	r3, #1
 800108a:	e000      	b.n	800108e <HAL_GPIO_Init+0x1d6>
 800108c:	2300      	movs	r3, #0
 800108e:	697a      	ldr	r2, [r7, #20]
 8001090:	f002 0203 	and.w	r2, r2, #3
 8001094:	0092      	lsls	r2, r2, #2
 8001096:	4093      	lsls	r3, r2
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4313      	orrs	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800109e:	4937      	ldr	r1, [pc, #220]	; (800117c <HAL_GPIO_Init+0x2c4>)
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	089b      	lsrs	r3, r3, #2
 80010a4:	3302      	adds	r3, #2
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010ac:	4b36      	ldr	r3, [pc, #216]	; (8001188 <HAL_GPIO_Init+0x2d0>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	43db      	mvns	r3, r3
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	4013      	ands	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d003      	beq.n	80010d0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010d0:	4a2d      	ldr	r2, [pc, #180]	; (8001188 <HAL_GPIO_Init+0x2d0>)
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80010d6:	4b2c      	ldr	r3, [pc, #176]	; (8001188 <HAL_GPIO_Init+0x2d0>)
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	43db      	mvns	r3, r3
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	4013      	ands	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010fa:	4a23      	ldr	r2, [pc, #140]	; (8001188 <HAL_GPIO_Init+0x2d0>)
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001100:	4b21      	ldr	r3, [pc, #132]	; (8001188 <HAL_GPIO_Init+0x2d0>)
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	43db      	mvns	r3, r3
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	4013      	ands	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	4313      	orrs	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001124:	4a18      	ldr	r2, [pc, #96]	; (8001188 <HAL_GPIO_Init+0x2d0>)
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800112a:	4b17      	ldr	r3, [pc, #92]	; (8001188 <HAL_GPIO_Init+0x2d0>)
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	43db      	mvns	r3, r3
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	4013      	ands	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	4313      	orrs	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800114e:	4a0e      	ldr	r2, [pc, #56]	; (8001188 <HAL_GPIO_Init+0x2d0>)
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	3301      	adds	r3, #1
 8001158:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	fa22 f303 	lsr.w	r3, r2, r3
 8001164:	2b00      	cmp	r3, #0
 8001166:	f47f aeaf 	bne.w	8000ec8 <HAL_GPIO_Init+0x10>
  }
}
 800116a:	bf00      	nop
 800116c:	371c      	adds	r7, #28
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	40021000 	.word	0x40021000
 800117c:	40010000 	.word	0x40010000
 8001180:	48000400 	.word	0x48000400
 8001184:	48000800 	.word	0x48000800
 8001188:	40010400 	.word	0x40010400

0800118c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	460b      	mov	r3, r1
 8001196:	807b      	strh	r3, [r7, #2]
 8001198:	4613      	mov	r3, r2
 800119a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800119c:	787b      	ldrb	r3, [r7, #1]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011a2:	887a      	ldrh	r2, [r7, #2]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011a8:	e002      	b.n	80011b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011aa:	887a      	ldrh	r2, [r7, #2]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	460b      	mov	r3, r1
 80011c6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	695b      	ldr	r3, [r3, #20]
 80011cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011ce:	887a      	ldrh	r2, [r7, #2]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4013      	ands	r3, r2
 80011d4:	041a      	lsls	r2, r3, #16
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	43d9      	mvns	r1, r3
 80011da:	887b      	ldrh	r3, [r7, #2]
 80011dc:	400b      	ands	r3, r1
 80011de:	431a      	orrs	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	619a      	str	r2, [r3, #24]
}
 80011e4:	bf00      	nop
 80011e6:	3714      	adds	r7, #20
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d101      	bne.n	8001202 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e081      	b.n	8001306 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001208:	b2db      	uxtb	r3, r3
 800120a:	2b00      	cmp	r3, #0
 800120c:	d106      	bne.n	800121c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2200      	movs	r2, #0
 8001212:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff fbd8 	bl	80009cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2224      	movs	r2, #36	; 0x24
 8001220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f022 0201 	bic.w	r2, r2, #1
 8001232:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685a      	ldr	r2, [r3, #4]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001240:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	689a      	ldr	r2, [r3, #8]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001250:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d107      	bne.n	800126a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	689a      	ldr	r2, [r3, #8]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	e006      	b.n	8001278 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689a      	ldr	r2, [r3, #8]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001276:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	2b02      	cmp	r3, #2
 800127e:	d104      	bne.n	800128a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001288:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	6812      	ldr	r2, [r2, #0]
 8001294:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001298:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800129c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	68da      	ldr	r2, [r3, #12]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	691a      	ldr	r2, [r3, #16]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	ea42 0103 	orr.w	r1, r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	699b      	ldr	r3, [r3, #24]
 80012be:	021a      	lsls	r2, r3, #8
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	430a      	orrs	r2, r1
 80012c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	69d9      	ldr	r1, [r3, #28]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a1a      	ldr	r2, [r3, #32]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	430a      	orrs	r2, r1
 80012d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f042 0201 	orr.w	r2, r2, #1
 80012e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2220      	movs	r2, #32
 80012f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b088      	sub	sp, #32
 8001314:	af02      	add	r7, sp, #8
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	607a      	str	r2, [r7, #4]
 800131a:	461a      	mov	r2, r3
 800131c:	460b      	mov	r3, r1
 800131e:	817b      	strh	r3, [r7, #10]
 8001320:	4613      	mov	r3, r2
 8001322:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2b20      	cmp	r3, #32
 800132e:	f040 80da 	bne.w	80014e6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001338:	2b01      	cmp	r3, #1
 800133a:	d101      	bne.n	8001340 <HAL_I2C_Master_Transmit+0x30>
 800133c:	2302      	movs	r3, #2
 800133e:	e0d3      	b.n	80014e8 <HAL_I2C_Master_Transmit+0x1d8>
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	2201      	movs	r2, #1
 8001344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001348:	f7ff fcc8 	bl	8000cdc <HAL_GetTick>
 800134c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	2319      	movs	r3, #25
 8001354:	2201      	movs	r2, #1
 8001356:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800135a:	68f8      	ldr	r0, [r7, #12]
 800135c:	f000 f8f0 	bl	8001540 <I2C_WaitOnFlagUntilTimeout>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e0be      	b.n	80014e8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2221      	movs	r2, #33	; 0x21
 800136e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	2210      	movs	r2, #16
 8001376:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2200      	movs	r2, #0
 800137e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	893a      	ldrh	r2, [r7, #8]
 800138a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	2200      	movs	r2, #0
 8001390:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001396:	b29b      	uxth	r3, r3
 8001398:	2bff      	cmp	r3, #255	; 0xff
 800139a:	d90e      	bls.n	80013ba <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	22ff      	movs	r2, #255	; 0xff
 80013a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	8979      	ldrh	r1, [r7, #10]
 80013aa:	4b51      	ldr	r3, [pc, #324]	; (80014f0 <HAL_I2C_Master_Transmit+0x1e0>)
 80013ac:	9300      	str	r3, [sp, #0]
 80013ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013b2:	68f8      	ldr	r0, [r7, #12]
 80013b4:	f000 f9e6 	bl	8001784 <I2C_TransferConfig>
 80013b8:	e06c      	b.n	8001494 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013be:	b29a      	uxth	r2, r3
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	8979      	ldrh	r1, [r7, #10]
 80013cc:	4b48      	ldr	r3, [pc, #288]	; (80014f0 <HAL_I2C_Master_Transmit+0x1e0>)
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013d4:	68f8      	ldr	r0, [r7, #12]
 80013d6:	f000 f9d5 	bl	8001784 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80013da:	e05b      	b.n	8001494 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013dc:	697a      	ldr	r2, [r7, #20]
 80013de:	6a39      	ldr	r1, [r7, #32]
 80013e0:	68f8      	ldr	r0, [r7, #12]
 80013e2:	f000 f8ed 	bl	80015c0 <I2C_WaitOnTXISFlagUntilTimeout>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e07b      	b.n	80014e8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f4:	781a      	ldrb	r2, [r3, #0]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001400:	1c5a      	adds	r2, r3, #1
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800140a:	b29b      	uxth	r3, r3
 800140c:	3b01      	subs	r3, #1
 800140e:	b29a      	uxth	r2, r3
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001418:	3b01      	subs	r3, #1
 800141a:	b29a      	uxth	r2, r3
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001424:	b29b      	uxth	r3, r3
 8001426:	2b00      	cmp	r3, #0
 8001428:	d034      	beq.n	8001494 <HAL_I2C_Master_Transmit+0x184>
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800142e:	2b00      	cmp	r3, #0
 8001430:	d130      	bne.n	8001494 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	9300      	str	r3, [sp, #0]
 8001436:	6a3b      	ldr	r3, [r7, #32]
 8001438:	2200      	movs	r2, #0
 800143a:	2180      	movs	r1, #128	; 0x80
 800143c:	68f8      	ldr	r0, [r7, #12]
 800143e:	f000 f87f 	bl	8001540 <I2C_WaitOnFlagUntilTimeout>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e04d      	b.n	80014e8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001450:	b29b      	uxth	r3, r3
 8001452:	2bff      	cmp	r3, #255	; 0xff
 8001454:	d90e      	bls.n	8001474 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	22ff      	movs	r2, #255	; 0xff
 800145a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001460:	b2da      	uxtb	r2, r3
 8001462:	8979      	ldrh	r1, [r7, #10]
 8001464:	2300      	movs	r3, #0
 8001466:	9300      	str	r3, [sp, #0]
 8001468:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800146c:	68f8      	ldr	r0, [r7, #12]
 800146e:	f000 f989 	bl	8001784 <I2C_TransferConfig>
 8001472:	e00f      	b.n	8001494 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001478:	b29a      	uxth	r2, r3
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001482:	b2da      	uxtb	r2, r3
 8001484:	8979      	ldrh	r1, [r7, #10]
 8001486:	2300      	movs	r3, #0
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800148e:	68f8      	ldr	r0, [r7, #12]
 8001490:	f000 f978 	bl	8001784 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001498:	b29b      	uxth	r3, r3
 800149a:	2b00      	cmp	r3, #0
 800149c:	d19e      	bne.n	80013dc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800149e:	697a      	ldr	r2, [r7, #20]
 80014a0:	6a39      	ldr	r1, [r7, #32]
 80014a2:	68f8      	ldr	r0, [r7, #12]
 80014a4:	f000 f8cc 	bl	8001640 <I2C_WaitOnSTOPFlagUntilTimeout>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e01a      	b.n	80014e8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2220      	movs	r2, #32
 80014b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6859      	ldr	r1, [r3, #4]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <HAL_I2C_Master_Transmit+0x1e4>)
 80014c6:	400b      	ands	r3, r1
 80014c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2220      	movs	r2, #32
 80014ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2200      	movs	r2, #0
 80014d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80014e2:	2300      	movs	r3, #0
 80014e4:	e000      	b.n	80014e8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80014e6:	2302      	movs	r3, #2
  }
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3718      	adds	r7, #24
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	80002000 	.word	0x80002000
 80014f4:	fe00e800 	.word	0xfe00e800

080014f8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b02      	cmp	r3, #2
 800150c:	d103      	bne.n	8001516 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2200      	movs	r2, #0
 8001514:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	2b01      	cmp	r3, #1
 8001522:	d007      	beq.n	8001534 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	699a      	ldr	r2, [r3, #24]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f042 0201 	orr.w	r2, r2, #1
 8001532:	619a      	str	r2, [r3, #24]
  }
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	603b      	str	r3, [r7, #0]
 800154c:	4613      	mov	r3, r2
 800154e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001550:	e022      	b.n	8001598 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001558:	d01e      	beq.n	8001598 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800155a:	f7ff fbbf 	bl	8000cdc <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	683a      	ldr	r2, [r7, #0]
 8001566:	429a      	cmp	r2, r3
 8001568:	d302      	bcc.n	8001570 <I2C_WaitOnFlagUntilTimeout+0x30>
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d113      	bne.n	8001598 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001574:	f043 0220 	orr.w	r2, r3, #32
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2220      	movs	r2, #32
 8001580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2200      	movs	r2, #0
 8001590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e00f      	b.n	80015b8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	699a      	ldr	r2, [r3, #24]
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	4013      	ands	r3, r2
 80015a2:	68ba      	ldr	r2, [r7, #8]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	bf0c      	ite	eq
 80015a8:	2301      	moveq	r3, #1
 80015aa:	2300      	movne	r3, #0
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	461a      	mov	r2, r3
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d0cd      	beq.n	8001552 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80015b6:	2300      	movs	r3, #0
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3710      	adds	r7, #16
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80015cc:	e02c      	b.n	8001628 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	68b9      	ldr	r1, [r7, #8]
 80015d2:	68f8      	ldr	r0, [r7, #12]
 80015d4:	f000 f870 	bl	80016b8 <I2C_IsAcknowledgeFailed>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e02a      	b.n	8001638 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e8:	d01e      	beq.n	8001628 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015ea:	f7ff fb77 	bl	8000cdc <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	68ba      	ldr	r2, [r7, #8]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d302      	bcc.n	8001600 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d113      	bne.n	8001628 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001604:	f043 0220 	orr.w	r2, r3, #32
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2220      	movs	r2, #32
 8001610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2200      	movs	r2, #0
 8001618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2200      	movs	r2, #0
 8001620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e007      	b.n	8001638 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b02      	cmp	r3, #2
 8001634:	d1cb      	bne.n	80015ce <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001636:	2300      	movs	r3, #0
}
 8001638:	4618      	mov	r0, r3
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800164c:	e028      	b.n	80016a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	68b9      	ldr	r1, [r7, #8]
 8001652:	68f8      	ldr	r0, [r7, #12]
 8001654:	f000 f830 	bl	80016b8 <I2C_IsAcknowledgeFailed>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e026      	b.n	80016b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001662:	f7ff fb3b 	bl	8000cdc <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	68ba      	ldr	r2, [r7, #8]
 800166e:	429a      	cmp	r2, r3
 8001670:	d302      	bcc.n	8001678 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d113      	bne.n	80016a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167c:	f043 0220 	orr.w	r2, r3, #32
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2220      	movs	r2, #32
 8001688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2200      	movs	r2, #0
 8001690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2200      	movs	r2, #0
 8001698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e007      	b.n	80016b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	f003 0320 	and.w	r3, r3, #32
 80016aa:	2b20      	cmp	r3, #32
 80016ac:	d1cf      	bne.n	800164e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	f003 0310 	and.w	r3, r3, #16
 80016ce:	2b10      	cmp	r3, #16
 80016d0:	d151      	bne.n	8001776 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016d2:	e022      	b.n	800171a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016da:	d01e      	beq.n	800171a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016dc:	f7ff fafe 	bl	8000cdc <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	68ba      	ldr	r2, [r7, #8]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d302      	bcc.n	80016f2 <I2C_IsAcknowledgeFailed+0x3a>
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d113      	bne.n	800171a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f6:	f043 0220 	orr.w	r2, r3, #32
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2220      	movs	r2, #32
 8001702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e02e      	b.n	8001778 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	f003 0320 	and.w	r3, r3, #32
 8001724:	2b20      	cmp	r3, #32
 8001726:	d1d5      	bne.n	80016d4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2210      	movs	r2, #16
 800172e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2220      	movs	r2, #32
 8001736:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001738:	68f8      	ldr	r0, [r7, #12]
 800173a:	f7ff fedd 	bl	80014f8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6859      	ldr	r1, [r3, #4]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	4b0d      	ldr	r3, [pc, #52]	; (8001780 <I2C_IsAcknowledgeFailed+0xc8>)
 800174a:	400b      	ands	r3, r1
 800174c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001752:	f043 0204 	orr.w	r2, r3, #4
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2220      	movs	r2, #32
 800175e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2200      	movs	r2, #0
 8001766:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e000      	b.n	8001778 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001776:	2300      	movs	r3, #0
}
 8001778:	4618      	mov	r0, r3
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	fe00e800 	.word	0xfe00e800

08001784 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	607b      	str	r3, [r7, #4]
 800178e:	460b      	mov	r3, r1
 8001790:	817b      	strh	r3, [r7, #10]
 8001792:	4613      	mov	r3, r2
 8001794:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	0d5b      	lsrs	r3, r3, #21
 80017a0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80017a4:	4b0d      	ldr	r3, [pc, #52]	; (80017dc <I2C_TransferConfig+0x58>)
 80017a6:	430b      	orrs	r3, r1
 80017a8:	43db      	mvns	r3, r3
 80017aa:	ea02 0103 	and.w	r1, r2, r3
 80017ae:	897b      	ldrh	r3, [r7, #10]
 80017b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80017b4:	7a7b      	ldrb	r3, [r7, #9]
 80017b6:	041b      	lsls	r3, r3, #16
 80017b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80017bc:	431a      	orrs	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	431a      	orrs	r2, r3
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	431a      	orrs	r2, r3
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	430a      	orrs	r2, r1
 80017cc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80017ce:	bf00      	nop
 80017d0:	3714      	adds	r7, #20
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	03ff63ff 	.word	0x03ff63ff

080017e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b20      	cmp	r3, #32
 80017f4:	d138      	bne.n	8001868 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d101      	bne.n	8001804 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001800:	2302      	movs	r3, #2
 8001802:	e032      	b.n	800186a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2224      	movs	r2, #36	; 0x24
 8001810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f022 0201 	bic.w	r2, r2, #1
 8001822:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001832:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6819      	ldr	r1, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	683a      	ldr	r2, [r7, #0]
 8001840:	430a      	orrs	r2, r1
 8001842:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f042 0201 	orr.w	r2, r2, #1
 8001852:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2220      	movs	r2, #32
 8001858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001864:	2300      	movs	r3, #0
 8001866:	e000      	b.n	800186a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001868:	2302      	movs	r3, #2
  }
}
 800186a:	4618      	mov	r0, r3
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001876:	b480      	push	{r7}
 8001878:	b085      	sub	sp, #20
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001886:	b2db      	uxtb	r3, r3
 8001888:	2b20      	cmp	r3, #32
 800188a:	d139      	bne.n	8001900 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001892:	2b01      	cmp	r3, #1
 8001894:	d101      	bne.n	800189a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001896:	2302      	movs	r3, #2
 8001898:	e033      	b.n	8001902 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2201      	movs	r2, #1
 800189e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2224      	movs	r2, #36	; 0x24
 80018a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f022 0201 	bic.w	r2, r2, #1
 80018b8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80018c8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	021b      	lsls	r3, r3, #8
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f042 0201 	orr.w	r2, r2, #1
 80018ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2220      	movs	r2, #32
 80018f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80018fc:	2300      	movs	r3, #0
 80018fe:	e000      	b.n	8001902 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001900:	2302      	movs	r3, #2
  }
}
 8001902:	4618      	mov	r0, r3
 8001904:	3714      	adds	r7, #20
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
	...

08001910 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001914:	4b05      	ldr	r3, [pc, #20]	; (800192c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a04      	ldr	r2, [pc, #16]	; (800192c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800191a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800191e:	6013      	str	r3, [r2, #0]
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	40007000 	.word	0x40007000

08001930 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001934:	4b04      	ldr	r3, [pc, #16]	; (8001948 <HAL_PWREx_GetVoltageRange+0x18>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800193c:	4618      	mov	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40007000 	.word	0x40007000

0800194c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800195a:	d130      	bne.n	80019be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800195c:	4b23      	ldr	r3, [pc, #140]	; (80019ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001968:	d038      	beq.n	80019dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800196a:	4b20      	ldr	r3, [pc, #128]	; (80019ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001972:	4a1e      	ldr	r2, [pc, #120]	; (80019ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001974:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001978:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800197a:	4b1d      	ldr	r3, [pc, #116]	; (80019f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2232      	movs	r2, #50	; 0x32
 8001980:	fb02 f303 	mul.w	r3, r2, r3
 8001984:	4a1b      	ldr	r2, [pc, #108]	; (80019f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001986:	fba2 2303 	umull	r2, r3, r2, r3
 800198a:	0c9b      	lsrs	r3, r3, #18
 800198c:	3301      	adds	r3, #1
 800198e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001990:	e002      	b.n	8001998 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	3b01      	subs	r3, #1
 8001996:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001998:	4b14      	ldr	r3, [pc, #80]	; (80019ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019a4:	d102      	bne.n	80019ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1f2      	bne.n	8001992 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019ac:	4b0f      	ldr	r3, [pc, #60]	; (80019ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019ae:	695b      	ldr	r3, [r3, #20]
 80019b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019b8:	d110      	bne.n	80019dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e00f      	b.n	80019de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80019be:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019ca:	d007      	beq.n	80019dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80019cc:	4b07      	ldr	r3, [pc, #28]	; (80019ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019d4:	4a05      	ldr	r2, [pc, #20]	; (80019ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3714      	adds	r7, #20
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	40007000 	.word	0x40007000
 80019f0:	20000000 	.word	0x20000000
 80019f4:	431bde83 	.word	0x431bde83

080019f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b088      	sub	sp, #32
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d102      	bne.n	8001a0c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	f000 bc11 	b.w	800222e <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a0c:	4ba0      	ldr	r3, [pc, #640]	; (8001c90 <HAL_RCC_OscConfig+0x298>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f003 030c 	and.w	r3, r3, #12
 8001a14:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a16:	4b9e      	ldr	r3, [pc, #632]	; (8001c90 <HAL_RCC_OscConfig+0x298>)
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	f003 0303 	and.w	r3, r3, #3
 8001a1e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0310 	and.w	r3, r3, #16
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f000 80e4 	beq.w	8001bf6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d007      	beq.n	8001a44 <HAL_RCC_OscConfig+0x4c>
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	2b0c      	cmp	r3, #12
 8001a38:	f040 808b 	bne.w	8001b52 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	f040 8087 	bne.w	8001b52 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a44:	4b92      	ldr	r3, [pc, #584]	; (8001c90 <HAL_RCC_OscConfig+0x298>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d005      	beq.n	8001a5c <HAL_RCC_OscConfig+0x64>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d101      	bne.n	8001a5c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e3e8      	b.n	800222e <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a1a      	ldr	r2, [r3, #32]
 8001a60:	4b8b      	ldr	r3, [pc, #556]	; (8001c90 <HAL_RCC_OscConfig+0x298>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0308 	and.w	r3, r3, #8
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d004      	beq.n	8001a76 <HAL_RCC_OscConfig+0x7e>
 8001a6c:	4b88      	ldr	r3, [pc, #544]	; (8001c90 <HAL_RCC_OscConfig+0x298>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a74:	e005      	b.n	8001a82 <HAL_RCC_OscConfig+0x8a>
 8001a76:	4b86      	ldr	r3, [pc, #536]	; (8001c90 <HAL_RCC_OscConfig+0x298>)
 8001a78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a7c:	091b      	lsrs	r3, r3, #4
 8001a7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d223      	bcs.n	8001ace <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a1b      	ldr	r3, [r3, #32]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f000 fda8 	bl	80025e0 <RCC_SetFlashLatencyFromMSIRange>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e3c9      	b.n	800222e <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a9a:	4b7d      	ldr	r3, [pc, #500]	; (8001c90 <HAL_RCC_OscConfig+0x298>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a7c      	ldr	r2, [pc, #496]	; (8001c90 <HAL_RCC_OscConfig+0x298>)
 8001aa0:	f043 0308 	orr.w	r3, r3, #8
 8001aa4:	6013      	str	r3, [r2, #0]
 8001aa6:	4b7a      	ldr	r3, [pc, #488]	; (8001c90 <HAL_RCC_OscConfig+0x298>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a1b      	ldr	r3, [r3, #32]
 8001ab2:	4977      	ldr	r1, [pc, #476]	; (8001c90 <HAL_RCC_OscConfig+0x298>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ab8:	4b75      	ldr	r3, [pc, #468]	; (8001c90 <HAL_RCC_OscConfig+0x298>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	69db      	ldr	r3, [r3, #28]
 8001ac4:	021b      	lsls	r3, r3, #8
 8001ac6:	4972      	ldr	r1, [pc, #456]	; (8001c90 <HAL_RCC_OscConfig+0x298>)
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	604b      	str	r3, [r1, #4]
 8001acc:	e025      	b.n	8001b1a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ace:	4b70      	ldr	r3, [pc, #448]	; (8001c90 <HAL_RCC_OscConfig+0x298>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a6f      	ldr	r2, [pc, #444]	; (8001c90 <HAL_RCC_OscConfig+0x298>)
 8001ad4:	f043 0308 	orr.w	r3, r3, #8
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	4b6d      	ldr	r3, [pc, #436]	; (8001c90 <HAL_RCC_OscConfig+0x298>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a1b      	ldr	r3, [r3, #32]
 8001ae6:	496a      	ldr	r1, [pc, #424]	; (8001c90 <HAL_RCC_OscConfig+0x298>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001aec:	4b68      	ldr	r3, [pc, #416]	; (8001c90 <HAL_RCC_OscConfig+0x298>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	69db      	ldr	r3, [r3, #28]
 8001af8:	021b      	lsls	r3, r3, #8
 8001afa:	4965      	ldr	r1, [pc, #404]	; (8001c90 <HAL_RCC_OscConfig+0x298>)
 8001afc:	4313      	orrs	r3, r2
 8001afe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d109      	bne.n	8001b1a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a1b      	ldr	r3, [r3, #32]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f000 fd68 	bl	80025e0 <RCC_SetFlashLatencyFromMSIRange>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e389      	b.n	800222e <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b1a:	f000 fc6f 	bl	80023fc <HAL_RCC_GetSysClockFreq>
 8001b1e:	4601      	mov	r1, r0
 8001b20:	4b5b      	ldr	r3, [pc, #364]	; (8001c90 <HAL_RCC_OscConfig+0x298>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	091b      	lsrs	r3, r3, #4
 8001b26:	f003 030f 	and.w	r3, r3, #15
 8001b2a:	4a5a      	ldr	r2, [pc, #360]	; (8001c94 <HAL_RCC_OscConfig+0x29c>)
 8001b2c:	5cd3      	ldrb	r3, [r2, r3]
 8001b2e:	f003 031f 	and.w	r3, r3, #31
 8001b32:	fa21 f303 	lsr.w	r3, r1, r3
 8001b36:	4a58      	ldr	r2, [pc, #352]	; (8001c98 <HAL_RCC_OscConfig+0x2a0>)
 8001b38:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b3a:	4b58      	ldr	r3, [pc, #352]	; (8001c9c <HAL_RCC_OscConfig+0x2a4>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7fe ffca 	bl	8000ad8 <HAL_InitTick>
 8001b44:	4603      	mov	r3, r0
 8001b46:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d052      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001b4e:	7bfb      	ldrb	r3, [r7, #15]
 8001b50:	e36d      	b.n	800222e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d032      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b5a:	4b4d      	ldr	r3, [pc, #308]	; (8001c90 <HAL_RCC_OscConfig+0x298>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a4c      	ldr	r2, [pc, #304]	; (8001c90 <HAL_RCC_OscConfig+0x298>)
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b66:	f7ff f8b9 	bl	8000cdc <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b6e:	f7ff f8b5 	bl	8000cdc <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e356      	b.n	800222e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b80:	4b43      	ldr	r3, [pc, #268]	; (8001c90 <HAL_RCC_OscConfig+0x298>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d0f0      	beq.n	8001b6e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b8c:	4b40      	ldr	r3, [pc, #256]	; (8001c90 <HAL_RCC_OscConfig+0x298>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a3f      	ldr	r2, [pc, #252]	; (8001c90 <HAL_RCC_OscConfig+0x298>)
 8001b92:	f043 0308 	orr.w	r3, r3, #8
 8001b96:	6013      	str	r3, [r2, #0]
 8001b98:	4b3d      	ldr	r3, [pc, #244]	; (8001c90 <HAL_RCC_OscConfig+0x298>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a1b      	ldr	r3, [r3, #32]
 8001ba4:	493a      	ldr	r1, [pc, #232]	; (8001c90 <HAL_RCC_OscConfig+0x298>)
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001baa:	4b39      	ldr	r3, [pc, #228]	; (8001c90 <HAL_RCC_OscConfig+0x298>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	021b      	lsls	r3, r3, #8
 8001bb8:	4935      	ldr	r1, [pc, #212]	; (8001c90 <HAL_RCC_OscConfig+0x298>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	604b      	str	r3, [r1, #4]
 8001bbe:	e01a      	b.n	8001bf6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001bc0:	4b33      	ldr	r3, [pc, #204]	; (8001c90 <HAL_RCC_OscConfig+0x298>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a32      	ldr	r2, [pc, #200]	; (8001c90 <HAL_RCC_OscConfig+0x298>)
 8001bc6:	f023 0301 	bic.w	r3, r3, #1
 8001bca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bcc:	f7ff f886 	bl	8000cdc <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bd4:	f7ff f882 	bl	8000cdc <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e323      	b.n	800222e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001be6:	4b2a      	ldr	r3, [pc, #168]	; (8001c90 <HAL_RCC_OscConfig+0x298>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1f0      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x1dc>
 8001bf2:	e000      	b.n	8001bf6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bf4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d073      	beq.n	8001cea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	2b08      	cmp	r3, #8
 8001c06:	d005      	beq.n	8001c14 <HAL_RCC_OscConfig+0x21c>
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	2b0c      	cmp	r3, #12
 8001c0c:	d10e      	bne.n	8001c2c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	2b03      	cmp	r3, #3
 8001c12:	d10b      	bne.n	8001c2c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c14:	4b1e      	ldr	r3, [pc, #120]	; (8001c90 <HAL_RCC_OscConfig+0x298>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d063      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x2f0>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d15f      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e300      	b.n	800222e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c34:	d106      	bne.n	8001c44 <HAL_RCC_OscConfig+0x24c>
 8001c36:	4b16      	ldr	r3, [pc, #88]	; (8001c90 <HAL_RCC_OscConfig+0x298>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a15      	ldr	r2, [pc, #84]	; (8001c90 <HAL_RCC_OscConfig+0x298>)
 8001c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c40:	6013      	str	r3, [r2, #0]
 8001c42:	e01d      	b.n	8001c80 <HAL_RCC_OscConfig+0x288>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c4c:	d10c      	bne.n	8001c68 <HAL_RCC_OscConfig+0x270>
 8001c4e:	4b10      	ldr	r3, [pc, #64]	; (8001c90 <HAL_RCC_OscConfig+0x298>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a0f      	ldr	r2, [pc, #60]	; (8001c90 <HAL_RCC_OscConfig+0x298>)
 8001c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c58:	6013      	str	r3, [r2, #0]
 8001c5a:	4b0d      	ldr	r3, [pc, #52]	; (8001c90 <HAL_RCC_OscConfig+0x298>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a0c      	ldr	r2, [pc, #48]	; (8001c90 <HAL_RCC_OscConfig+0x298>)
 8001c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c64:	6013      	str	r3, [r2, #0]
 8001c66:	e00b      	b.n	8001c80 <HAL_RCC_OscConfig+0x288>
 8001c68:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <HAL_RCC_OscConfig+0x298>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a08      	ldr	r2, [pc, #32]	; (8001c90 <HAL_RCC_OscConfig+0x298>)
 8001c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c72:	6013      	str	r3, [r2, #0]
 8001c74:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <HAL_RCC_OscConfig+0x298>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a05      	ldr	r2, [pc, #20]	; (8001c90 <HAL_RCC_OscConfig+0x298>)
 8001c7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d01b      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c88:	f7ff f828 	bl	8000cdc <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c8e:	e010      	b.n	8001cb2 <HAL_RCC_OscConfig+0x2ba>
 8001c90:	40021000 	.word	0x40021000
 8001c94:	080065cc 	.word	0x080065cc
 8001c98:	20000000 	.word	0x20000000
 8001c9c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca0:	f7ff f81c 	bl	8000cdc <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b64      	cmp	r3, #100	; 0x64
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e2bd      	b.n	800222e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cb2:	4baf      	ldr	r3, [pc, #700]	; (8001f70 <HAL_RCC_OscConfig+0x578>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0f0      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x2a8>
 8001cbe:	e014      	b.n	8001cea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc0:	f7ff f80c 	bl	8000cdc <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc8:	f7ff f808 	bl	8000cdc <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b64      	cmp	r3, #100	; 0x64
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e2a9      	b.n	800222e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cda:	4ba5      	ldr	r3, [pc, #660]	; (8001f70 <HAL_RCC_OscConfig+0x578>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1f0      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x2d0>
 8001ce6:	e000      	b.n	8001cea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d060      	beq.n	8001db8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	2b04      	cmp	r3, #4
 8001cfa:	d005      	beq.n	8001d08 <HAL_RCC_OscConfig+0x310>
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	2b0c      	cmp	r3, #12
 8001d00:	d119      	bne.n	8001d36 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d116      	bne.n	8001d36 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d08:	4b99      	ldr	r3, [pc, #612]	; (8001f70 <HAL_RCC_OscConfig+0x578>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d005      	beq.n	8001d20 <HAL_RCC_OscConfig+0x328>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d101      	bne.n	8001d20 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e286      	b.n	800222e <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d20:	4b93      	ldr	r3, [pc, #588]	; (8001f70 <HAL_RCC_OscConfig+0x578>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	061b      	lsls	r3, r3, #24
 8001d2e:	4990      	ldr	r1, [pc, #576]	; (8001f70 <HAL_RCC_OscConfig+0x578>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d34:	e040      	b.n	8001db8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d023      	beq.n	8001d86 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d3e:	4b8c      	ldr	r3, [pc, #560]	; (8001f70 <HAL_RCC_OscConfig+0x578>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a8b      	ldr	r2, [pc, #556]	; (8001f70 <HAL_RCC_OscConfig+0x578>)
 8001d44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d4a:	f7fe ffc7 	bl	8000cdc <HAL_GetTick>
 8001d4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d50:	e008      	b.n	8001d64 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d52:	f7fe ffc3 	bl	8000cdc <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d901      	bls.n	8001d64 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e264      	b.n	800222e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d64:	4b82      	ldr	r3, [pc, #520]	; (8001f70 <HAL_RCC_OscConfig+0x578>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d0f0      	beq.n	8001d52 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d70:	4b7f      	ldr	r3, [pc, #508]	; (8001f70 <HAL_RCC_OscConfig+0x578>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	061b      	lsls	r3, r3, #24
 8001d7e:	497c      	ldr	r1, [pc, #496]	; (8001f70 <HAL_RCC_OscConfig+0x578>)
 8001d80:	4313      	orrs	r3, r2
 8001d82:	604b      	str	r3, [r1, #4]
 8001d84:	e018      	b.n	8001db8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d86:	4b7a      	ldr	r3, [pc, #488]	; (8001f70 <HAL_RCC_OscConfig+0x578>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a79      	ldr	r2, [pc, #484]	; (8001f70 <HAL_RCC_OscConfig+0x578>)
 8001d8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d92:	f7fe ffa3 	bl	8000cdc <HAL_GetTick>
 8001d96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d98:	e008      	b.n	8001dac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d9a:	f7fe ff9f 	bl	8000cdc <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e240      	b.n	800222e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dac:	4b70      	ldr	r3, [pc, #448]	; (8001f70 <HAL_RCC_OscConfig+0x578>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1f0      	bne.n	8001d9a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0308 	and.w	r3, r3, #8
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d03c      	beq.n	8001e3e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	695b      	ldr	r3, [r3, #20]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d01c      	beq.n	8001e06 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dcc:	4b68      	ldr	r3, [pc, #416]	; (8001f70 <HAL_RCC_OscConfig+0x578>)
 8001dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dd2:	4a67      	ldr	r2, [pc, #412]	; (8001f70 <HAL_RCC_OscConfig+0x578>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ddc:	f7fe ff7e 	bl	8000cdc <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001de4:	f7fe ff7a 	bl	8000cdc <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e21b      	b.n	800222e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001df6:	4b5e      	ldr	r3, [pc, #376]	; (8001f70 <HAL_RCC_OscConfig+0x578>)
 8001df8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0ef      	beq.n	8001de4 <HAL_RCC_OscConfig+0x3ec>
 8001e04:	e01b      	b.n	8001e3e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e06:	4b5a      	ldr	r3, [pc, #360]	; (8001f70 <HAL_RCC_OscConfig+0x578>)
 8001e08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e0c:	4a58      	ldr	r2, [pc, #352]	; (8001f70 <HAL_RCC_OscConfig+0x578>)
 8001e0e:	f023 0301 	bic.w	r3, r3, #1
 8001e12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e16:	f7fe ff61 	bl	8000cdc <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e1e:	f7fe ff5d 	bl	8000cdc <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e1fe      	b.n	800222e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e30:	4b4f      	ldr	r3, [pc, #316]	; (8001f70 <HAL_RCC_OscConfig+0x578>)
 8001e32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1ef      	bne.n	8001e1e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0304 	and.w	r3, r3, #4
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 80a6 	beq.w	8001f98 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e50:	4b47      	ldr	r3, [pc, #284]	; (8001f70 <HAL_RCC_OscConfig+0x578>)
 8001e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d10d      	bne.n	8001e78 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e5c:	4b44      	ldr	r3, [pc, #272]	; (8001f70 <HAL_RCC_OscConfig+0x578>)
 8001e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e60:	4a43      	ldr	r2, [pc, #268]	; (8001f70 <HAL_RCC_OscConfig+0x578>)
 8001e62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e66:	6593      	str	r3, [r2, #88]	; 0x58
 8001e68:	4b41      	ldr	r3, [pc, #260]	; (8001f70 <HAL_RCC_OscConfig+0x578>)
 8001e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e70:	60bb      	str	r3, [r7, #8]
 8001e72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e74:	2301      	movs	r3, #1
 8001e76:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e78:	4b3e      	ldr	r3, [pc, #248]	; (8001f74 <HAL_RCC_OscConfig+0x57c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d118      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e84:	4b3b      	ldr	r3, [pc, #236]	; (8001f74 <HAL_RCC_OscConfig+0x57c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a3a      	ldr	r2, [pc, #232]	; (8001f74 <HAL_RCC_OscConfig+0x57c>)
 8001e8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e90:	f7fe ff24 	bl	8000cdc <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e98:	f7fe ff20 	bl	8000cdc <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e1c1      	b.n	800222e <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eaa:	4b32      	ldr	r3, [pc, #200]	; (8001f74 <HAL_RCC_OscConfig+0x57c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0f0      	beq.n	8001e98 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d108      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x4d8>
 8001ebe:	4b2c      	ldr	r3, [pc, #176]	; (8001f70 <HAL_RCC_OscConfig+0x578>)
 8001ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec4:	4a2a      	ldr	r2, [pc, #168]	; (8001f70 <HAL_RCC_OscConfig+0x578>)
 8001ec6:	f043 0301 	orr.w	r3, r3, #1
 8001eca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ece:	e024      	b.n	8001f1a <HAL_RCC_OscConfig+0x522>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	2b05      	cmp	r3, #5
 8001ed6:	d110      	bne.n	8001efa <HAL_RCC_OscConfig+0x502>
 8001ed8:	4b25      	ldr	r3, [pc, #148]	; (8001f70 <HAL_RCC_OscConfig+0x578>)
 8001eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ede:	4a24      	ldr	r2, [pc, #144]	; (8001f70 <HAL_RCC_OscConfig+0x578>)
 8001ee0:	f043 0304 	orr.w	r3, r3, #4
 8001ee4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ee8:	4b21      	ldr	r3, [pc, #132]	; (8001f70 <HAL_RCC_OscConfig+0x578>)
 8001eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eee:	4a20      	ldr	r2, [pc, #128]	; (8001f70 <HAL_RCC_OscConfig+0x578>)
 8001ef0:	f043 0301 	orr.w	r3, r3, #1
 8001ef4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ef8:	e00f      	b.n	8001f1a <HAL_RCC_OscConfig+0x522>
 8001efa:	4b1d      	ldr	r3, [pc, #116]	; (8001f70 <HAL_RCC_OscConfig+0x578>)
 8001efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f00:	4a1b      	ldr	r2, [pc, #108]	; (8001f70 <HAL_RCC_OscConfig+0x578>)
 8001f02:	f023 0301 	bic.w	r3, r3, #1
 8001f06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f0a:	4b19      	ldr	r3, [pc, #100]	; (8001f70 <HAL_RCC_OscConfig+0x578>)
 8001f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f10:	4a17      	ldr	r2, [pc, #92]	; (8001f70 <HAL_RCC_OscConfig+0x578>)
 8001f12:	f023 0304 	bic.w	r3, r3, #4
 8001f16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d016      	beq.n	8001f50 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f22:	f7fe fedb 	bl	8000cdc <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f28:	e00a      	b.n	8001f40 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f2a:	f7fe fed7 	bl	8000cdc <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e176      	b.n	800222e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f40:	4b0b      	ldr	r3, [pc, #44]	; (8001f70 <HAL_RCC_OscConfig+0x578>)
 8001f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d0ed      	beq.n	8001f2a <HAL_RCC_OscConfig+0x532>
 8001f4e:	e01a      	b.n	8001f86 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f50:	f7fe fec4 	bl	8000cdc <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f56:	e00f      	b.n	8001f78 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f58:	f7fe fec0 	bl	8000cdc <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d906      	bls.n	8001f78 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e15f      	b.n	800222e <HAL_RCC_OscConfig+0x836>
 8001f6e:	bf00      	nop
 8001f70:	40021000 	.word	0x40021000
 8001f74:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f78:	4baa      	ldr	r3, [pc, #680]	; (8002224 <HAL_RCC_OscConfig+0x82c>)
 8001f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1e8      	bne.n	8001f58 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f86:	7ffb      	ldrb	r3, [r7, #31]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d105      	bne.n	8001f98 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f8c:	4ba5      	ldr	r3, [pc, #660]	; (8002224 <HAL_RCC_OscConfig+0x82c>)
 8001f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f90:	4aa4      	ldr	r2, [pc, #656]	; (8002224 <HAL_RCC_OscConfig+0x82c>)
 8001f92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f96:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0320 	and.w	r3, r3, #32
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d03c      	beq.n	800201e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d01c      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001fac:	4b9d      	ldr	r3, [pc, #628]	; (8002224 <HAL_RCC_OscConfig+0x82c>)
 8001fae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fb2:	4a9c      	ldr	r2, [pc, #624]	; (8002224 <HAL_RCC_OscConfig+0x82c>)
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fbc:	f7fe fe8e 	bl	8000cdc <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fc4:	f7fe fe8a 	bl	8000cdc <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e12b      	b.n	800222e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001fd6:	4b93      	ldr	r3, [pc, #588]	; (8002224 <HAL_RCC_OscConfig+0x82c>)
 8001fd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0ef      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x5cc>
 8001fe4:	e01b      	b.n	800201e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001fe6:	4b8f      	ldr	r3, [pc, #572]	; (8002224 <HAL_RCC_OscConfig+0x82c>)
 8001fe8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fec:	4a8d      	ldr	r2, [pc, #564]	; (8002224 <HAL_RCC_OscConfig+0x82c>)
 8001fee:	f023 0301 	bic.w	r3, r3, #1
 8001ff2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff6:	f7fe fe71 	bl	8000cdc <HAL_GetTick>
 8001ffa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ffc:	e008      	b.n	8002010 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ffe:	f7fe fe6d 	bl	8000cdc <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e10e      	b.n	800222e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002010:	4b84      	ldr	r3, [pc, #528]	; (8002224 <HAL_RCC_OscConfig+0x82c>)
 8002012:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1ef      	bne.n	8001ffe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002022:	2b00      	cmp	r3, #0
 8002024:	f000 8102 	beq.w	800222c <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202c:	2b02      	cmp	r3, #2
 800202e:	f040 80c5 	bne.w	80021bc <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002032:	4b7c      	ldr	r3, [pc, #496]	; (8002224 <HAL_RCC_OscConfig+0x82c>)
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	f003 0203 	and.w	r2, r3, #3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002042:	429a      	cmp	r2, r3
 8002044:	d12c      	bne.n	80020a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002050:	3b01      	subs	r3, #1
 8002052:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002054:	429a      	cmp	r2, r3
 8002056:	d123      	bne.n	80020a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002062:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002064:	429a      	cmp	r2, r3
 8002066:	d11b      	bne.n	80020a0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002072:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002074:	429a      	cmp	r2, r3
 8002076:	d113      	bne.n	80020a0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002082:	085b      	lsrs	r3, r3, #1
 8002084:	3b01      	subs	r3, #1
 8002086:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002088:	429a      	cmp	r2, r3
 800208a:	d109      	bne.n	80020a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	085b      	lsrs	r3, r3, #1
 8002098:	3b01      	subs	r3, #1
 800209a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800209c:	429a      	cmp	r2, r3
 800209e:	d067      	beq.n	8002170 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	2b0c      	cmp	r3, #12
 80020a4:	d062      	beq.n	800216c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80020a6:	4b5f      	ldr	r3, [pc, #380]	; (8002224 <HAL_RCC_OscConfig+0x82c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e0bb      	b.n	800222e <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80020b6:	4b5b      	ldr	r3, [pc, #364]	; (8002224 <HAL_RCC_OscConfig+0x82c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a5a      	ldr	r2, [pc, #360]	; (8002224 <HAL_RCC_OscConfig+0x82c>)
 80020bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020c0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020c2:	f7fe fe0b 	bl	8000cdc <HAL_GetTick>
 80020c6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020c8:	e008      	b.n	80020dc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ca:	f7fe fe07 	bl	8000cdc <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e0a8      	b.n	800222e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020dc:	4b51      	ldr	r3, [pc, #324]	; (8002224 <HAL_RCC_OscConfig+0x82c>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1f0      	bne.n	80020ca <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020e8:	4b4e      	ldr	r3, [pc, #312]	; (8002224 <HAL_RCC_OscConfig+0x82c>)
 80020ea:	68da      	ldr	r2, [r3, #12]
 80020ec:	4b4e      	ldr	r3, [pc, #312]	; (8002228 <HAL_RCC_OscConfig+0x830>)
 80020ee:	4013      	ands	r3, r2
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80020f8:	3a01      	subs	r2, #1
 80020fa:	0112      	lsls	r2, r2, #4
 80020fc:	4311      	orrs	r1, r2
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002102:	0212      	lsls	r2, r2, #8
 8002104:	4311      	orrs	r1, r2
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800210a:	0852      	lsrs	r2, r2, #1
 800210c:	3a01      	subs	r2, #1
 800210e:	0552      	lsls	r2, r2, #21
 8002110:	4311      	orrs	r1, r2
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002116:	0852      	lsrs	r2, r2, #1
 8002118:	3a01      	subs	r2, #1
 800211a:	0652      	lsls	r2, r2, #25
 800211c:	4311      	orrs	r1, r2
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002122:	06d2      	lsls	r2, r2, #27
 8002124:	430a      	orrs	r2, r1
 8002126:	493f      	ldr	r1, [pc, #252]	; (8002224 <HAL_RCC_OscConfig+0x82c>)
 8002128:	4313      	orrs	r3, r2
 800212a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800212c:	4b3d      	ldr	r3, [pc, #244]	; (8002224 <HAL_RCC_OscConfig+0x82c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a3c      	ldr	r2, [pc, #240]	; (8002224 <HAL_RCC_OscConfig+0x82c>)
 8002132:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002136:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002138:	4b3a      	ldr	r3, [pc, #232]	; (8002224 <HAL_RCC_OscConfig+0x82c>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	4a39      	ldr	r2, [pc, #228]	; (8002224 <HAL_RCC_OscConfig+0x82c>)
 800213e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002142:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002144:	f7fe fdca 	bl	8000cdc <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800214c:	f7fe fdc6 	bl	8000cdc <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e067      	b.n	800222e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800215e:	4b31      	ldr	r3, [pc, #196]	; (8002224 <HAL_RCC_OscConfig+0x82c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d0f0      	beq.n	800214c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800216a:	e05f      	b.n	800222c <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e05e      	b.n	800222e <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002170:	4b2c      	ldr	r3, [pc, #176]	; (8002224 <HAL_RCC_OscConfig+0x82c>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d157      	bne.n	800222c <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800217c:	4b29      	ldr	r3, [pc, #164]	; (8002224 <HAL_RCC_OscConfig+0x82c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a28      	ldr	r2, [pc, #160]	; (8002224 <HAL_RCC_OscConfig+0x82c>)
 8002182:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002186:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002188:	4b26      	ldr	r3, [pc, #152]	; (8002224 <HAL_RCC_OscConfig+0x82c>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	4a25      	ldr	r2, [pc, #148]	; (8002224 <HAL_RCC_OscConfig+0x82c>)
 800218e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002192:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002194:	f7fe fda2 	bl	8000cdc <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800219c:	f7fe fd9e 	bl	8000cdc <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e03f      	b.n	800222e <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ae:	4b1d      	ldr	r3, [pc, #116]	; (8002224 <HAL_RCC_OscConfig+0x82c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0f0      	beq.n	800219c <HAL_RCC_OscConfig+0x7a4>
 80021ba:	e037      	b.n	800222c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	2b0c      	cmp	r3, #12
 80021c0:	d02d      	beq.n	800221e <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c2:	4b18      	ldr	r3, [pc, #96]	; (8002224 <HAL_RCC_OscConfig+0x82c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a17      	ldr	r2, [pc, #92]	; (8002224 <HAL_RCC_OscConfig+0x82c>)
 80021c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021cc:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80021ce:	4b15      	ldr	r3, [pc, #84]	; (8002224 <HAL_RCC_OscConfig+0x82c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d105      	bne.n	80021e6 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80021da:	4b12      	ldr	r3, [pc, #72]	; (8002224 <HAL_RCC_OscConfig+0x82c>)
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	4a11      	ldr	r2, [pc, #68]	; (8002224 <HAL_RCC_OscConfig+0x82c>)
 80021e0:	f023 0303 	bic.w	r3, r3, #3
 80021e4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80021e6:	4b0f      	ldr	r3, [pc, #60]	; (8002224 <HAL_RCC_OscConfig+0x82c>)
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	4a0e      	ldr	r2, [pc, #56]	; (8002224 <HAL_RCC_OscConfig+0x82c>)
 80021ec:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80021f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021f4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f6:	f7fe fd71 	bl	8000cdc <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021fc:	e008      	b.n	8002210 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021fe:	f7fe fd6d 	bl	8000cdc <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e00e      	b.n	800222e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002210:	4b04      	ldr	r3, [pc, #16]	; (8002224 <HAL_RCC_OscConfig+0x82c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1f0      	bne.n	80021fe <HAL_RCC_OscConfig+0x806>
 800221c:	e006      	b.n	800222c <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e005      	b.n	800222e <HAL_RCC_OscConfig+0x836>
 8002222:	bf00      	nop
 8002224:	40021000 	.word	0x40021000
 8002228:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3720      	adds	r7, #32
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop

08002238 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d101      	bne.n	800224c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e0c8      	b.n	80023de <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800224c:	4b66      	ldr	r3, [pc, #408]	; (80023e8 <HAL_RCC_ClockConfig+0x1b0>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0307 	and.w	r3, r3, #7
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	429a      	cmp	r2, r3
 8002258:	d910      	bls.n	800227c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800225a:	4b63      	ldr	r3, [pc, #396]	; (80023e8 <HAL_RCC_ClockConfig+0x1b0>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f023 0207 	bic.w	r2, r3, #7
 8002262:	4961      	ldr	r1, [pc, #388]	; (80023e8 <HAL_RCC_ClockConfig+0x1b0>)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	4313      	orrs	r3, r2
 8002268:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800226a:	4b5f      	ldr	r3, [pc, #380]	; (80023e8 <HAL_RCC_ClockConfig+0x1b0>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	429a      	cmp	r2, r3
 8002276:	d001      	beq.n	800227c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e0b0      	b.n	80023de <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	2b00      	cmp	r3, #0
 8002286:	d04c      	beq.n	8002322 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	2b03      	cmp	r3, #3
 800228e:	d107      	bne.n	80022a0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002290:	4b56      	ldr	r3, [pc, #344]	; (80023ec <HAL_RCC_ClockConfig+0x1b4>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d121      	bne.n	80022e0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e09e      	b.n	80023de <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d107      	bne.n	80022b8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022a8:	4b50      	ldr	r3, [pc, #320]	; (80023ec <HAL_RCC_ClockConfig+0x1b4>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d115      	bne.n	80022e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e092      	b.n	80023de <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d107      	bne.n	80022d0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022c0:	4b4a      	ldr	r3, [pc, #296]	; (80023ec <HAL_RCC_ClockConfig+0x1b4>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d109      	bne.n	80022e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e086      	b.n	80023de <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022d0:	4b46      	ldr	r3, [pc, #280]	; (80023ec <HAL_RCC_ClockConfig+0x1b4>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d101      	bne.n	80022e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e07e      	b.n	80023de <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022e0:	4b42      	ldr	r3, [pc, #264]	; (80023ec <HAL_RCC_ClockConfig+0x1b4>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f023 0203 	bic.w	r2, r3, #3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	493f      	ldr	r1, [pc, #252]	; (80023ec <HAL_RCC_ClockConfig+0x1b4>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022f2:	f7fe fcf3 	bl	8000cdc <HAL_GetTick>
 80022f6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f8:	e00a      	b.n	8002310 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022fa:	f7fe fcef 	bl	8000cdc <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	f241 3288 	movw	r2, #5000	; 0x1388
 8002308:	4293      	cmp	r3, r2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e066      	b.n	80023de <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002310:	4b36      	ldr	r3, [pc, #216]	; (80023ec <HAL_RCC_ClockConfig+0x1b4>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f003 020c 	and.w	r2, r3, #12
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	429a      	cmp	r2, r3
 8002320:	d1eb      	bne.n	80022fa <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d008      	beq.n	8002340 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800232e:	4b2f      	ldr	r3, [pc, #188]	; (80023ec <HAL_RCC_ClockConfig+0x1b4>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	492c      	ldr	r1, [pc, #176]	; (80023ec <HAL_RCC_ClockConfig+0x1b4>)
 800233c:	4313      	orrs	r3, r2
 800233e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002340:	4b29      	ldr	r3, [pc, #164]	; (80023e8 <HAL_RCC_ClockConfig+0x1b0>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	429a      	cmp	r2, r3
 800234c:	d210      	bcs.n	8002370 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234e:	4b26      	ldr	r3, [pc, #152]	; (80023e8 <HAL_RCC_ClockConfig+0x1b0>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f023 0207 	bic.w	r2, r3, #7
 8002356:	4924      	ldr	r1, [pc, #144]	; (80023e8 <HAL_RCC_ClockConfig+0x1b0>)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	4313      	orrs	r3, r2
 800235c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800235e:	4b22      	ldr	r3, [pc, #136]	; (80023e8 <HAL_RCC_ClockConfig+0x1b0>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	429a      	cmp	r2, r3
 800236a:	d001      	beq.n	8002370 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e036      	b.n	80023de <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	d008      	beq.n	800238e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800237c:	4b1b      	ldr	r3, [pc, #108]	; (80023ec <HAL_RCC_ClockConfig+0x1b4>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	4918      	ldr	r1, [pc, #96]	; (80023ec <HAL_RCC_ClockConfig+0x1b4>)
 800238a:	4313      	orrs	r3, r2
 800238c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0308 	and.w	r3, r3, #8
 8002396:	2b00      	cmp	r3, #0
 8002398:	d009      	beq.n	80023ae <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800239a:	4b14      	ldr	r3, [pc, #80]	; (80023ec <HAL_RCC_ClockConfig+0x1b4>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	4910      	ldr	r1, [pc, #64]	; (80023ec <HAL_RCC_ClockConfig+0x1b4>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023ae:	f000 f825 	bl	80023fc <HAL_RCC_GetSysClockFreq>
 80023b2:	4601      	mov	r1, r0
 80023b4:	4b0d      	ldr	r3, [pc, #52]	; (80023ec <HAL_RCC_ClockConfig+0x1b4>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	091b      	lsrs	r3, r3, #4
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	4a0c      	ldr	r2, [pc, #48]	; (80023f0 <HAL_RCC_ClockConfig+0x1b8>)
 80023c0:	5cd3      	ldrb	r3, [r2, r3]
 80023c2:	f003 031f 	and.w	r3, r3, #31
 80023c6:	fa21 f303 	lsr.w	r3, r1, r3
 80023ca:	4a0a      	ldr	r2, [pc, #40]	; (80023f4 <HAL_RCC_ClockConfig+0x1bc>)
 80023cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80023ce:	4b0a      	ldr	r3, [pc, #40]	; (80023f8 <HAL_RCC_ClockConfig+0x1c0>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7fe fb80 	bl	8000ad8 <HAL_InitTick>
 80023d8:	4603      	mov	r3, r0
 80023da:	72fb      	strb	r3, [r7, #11]

  return status;
 80023dc:	7afb      	ldrb	r3, [r7, #11]
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40022000 	.word	0x40022000
 80023ec:	40021000 	.word	0x40021000
 80023f0:	080065cc 	.word	0x080065cc
 80023f4:	20000000 	.word	0x20000000
 80023f8:	20000004 	.word	0x20000004

080023fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b089      	sub	sp, #36	; 0x24
 8002400:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002402:	2300      	movs	r3, #0
 8002404:	61fb      	str	r3, [r7, #28]
 8002406:	2300      	movs	r3, #0
 8002408:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800240a:	4b3d      	ldr	r3, [pc, #244]	; (8002500 <HAL_RCC_GetSysClockFreq+0x104>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 030c 	and.w	r3, r3, #12
 8002412:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002414:	4b3a      	ldr	r3, [pc, #232]	; (8002500 <HAL_RCC_GetSysClockFreq+0x104>)
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	f003 0303 	and.w	r3, r3, #3
 800241c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d005      	beq.n	8002430 <HAL_RCC_GetSysClockFreq+0x34>
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	2b0c      	cmp	r3, #12
 8002428:	d121      	bne.n	800246e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d11e      	bne.n	800246e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002430:	4b33      	ldr	r3, [pc, #204]	; (8002500 <HAL_RCC_GetSysClockFreq+0x104>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0308 	and.w	r3, r3, #8
 8002438:	2b00      	cmp	r3, #0
 800243a:	d107      	bne.n	800244c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800243c:	4b30      	ldr	r3, [pc, #192]	; (8002500 <HAL_RCC_GetSysClockFreq+0x104>)
 800243e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002442:	0a1b      	lsrs	r3, r3, #8
 8002444:	f003 030f 	and.w	r3, r3, #15
 8002448:	61fb      	str	r3, [r7, #28]
 800244a:	e005      	b.n	8002458 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800244c:	4b2c      	ldr	r3, [pc, #176]	; (8002500 <HAL_RCC_GetSysClockFreq+0x104>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	091b      	lsrs	r3, r3, #4
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002458:	4a2a      	ldr	r2, [pc, #168]	; (8002504 <HAL_RCC_GetSysClockFreq+0x108>)
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002460:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d10d      	bne.n	8002484 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800246c:	e00a      	b.n	8002484 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	2b04      	cmp	r3, #4
 8002472:	d102      	bne.n	800247a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002474:	4b24      	ldr	r3, [pc, #144]	; (8002508 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002476:	61bb      	str	r3, [r7, #24]
 8002478:	e004      	b.n	8002484 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	2b08      	cmp	r3, #8
 800247e:	d101      	bne.n	8002484 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002480:	4b21      	ldr	r3, [pc, #132]	; (8002508 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002482:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	2b0c      	cmp	r3, #12
 8002488:	d133      	bne.n	80024f2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800248a:	4b1d      	ldr	r3, [pc, #116]	; (8002500 <HAL_RCC_GetSysClockFreq+0x104>)
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	f003 0303 	and.w	r3, r3, #3
 8002492:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	2b02      	cmp	r3, #2
 8002498:	d002      	beq.n	80024a0 <HAL_RCC_GetSysClockFreq+0xa4>
 800249a:	2b03      	cmp	r3, #3
 800249c:	d003      	beq.n	80024a6 <HAL_RCC_GetSysClockFreq+0xaa>
 800249e:	e005      	b.n	80024ac <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80024a0:	4b19      	ldr	r3, [pc, #100]	; (8002508 <HAL_RCC_GetSysClockFreq+0x10c>)
 80024a2:	617b      	str	r3, [r7, #20]
      break;
 80024a4:	e005      	b.n	80024b2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80024a6:	4b18      	ldr	r3, [pc, #96]	; (8002508 <HAL_RCC_GetSysClockFreq+0x10c>)
 80024a8:	617b      	str	r3, [r7, #20]
      break;
 80024aa:	e002      	b.n	80024b2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	617b      	str	r3, [r7, #20]
      break;
 80024b0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024b2:	4b13      	ldr	r3, [pc, #76]	; (8002500 <HAL_RCC_GetSysClockFreq+0x104>)
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	091b      	lsrs	r3, r3, #4
 80024b8:	f003 0307 	and.w	r3, r3, #7
 80024bc:	3301      	adds	r3, #1
 80024be:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80024c0:	4b0f      	ldr	r3, [pc, #60]	; (8002500 <HAL_RCC_GetSysClockFreq+0x104>)
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	0a1b      	lsrs	r3, r3, #8
 80024c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	fb02 f203 	mul.w	r2, r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024d8:	4b09      	ldr	r3, [pc, #36]	; (8002500 <HAL_RCC_GetSysClockFreq+0x104>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	0e5b      	lsrs	r3, r3, #25
 80024de:	f003 0303 	and.w	r3, r3, #3
 80024e2:	3301      	adds	r3, #1
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80024f2:	69bb      	ldr	r3, [r7, #24]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3724      	adds	r7, #36	; 0x24
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	40021000 	.word	0x40021000
 8002504:	080065e4 	.word	0x080065e4
 8002508:	00f42400 	.word	0x00f42400

0800250c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002510:	4b03      	ldr	r3, [pc, #12]	; (8002520 <HAL_RCC_GetHCLKFreq+0x14>)
 8002512:	681b      	ldr	r3, [r3, #0]
}
 8002514:	4618      	mov	r0, r3
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	20000000 	.word	0x20000000

08002524 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002528:	f7ff fff0 	bl	800250c <HAL_RCC_GetHCLKFreq>
 800252c:	4601      	mov	r1, r0
 800252e:	4b06      	ldr	r3, [pc, #24]	; (8002548 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	0a1b      	lsrs	r3, r3, #8
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	4a04      	ldr	r2, [pc, #16]	; (800254c <HAL_RCC_GetPCLK1Freq+0x28>)
 800253a:	5cd3      	ldrb	r3, [r2, r3]
 800253c:	f003 031f 	and.w	r3, r3, #31
 8002540:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002544:	4618      	mov	r0, r3
 8002546:	bd80      	pop	{r7, pc}
 8002548:	40021000 	.word	0x40021000
 800254c:	080065dc 	.word	0x080065dc

08002550 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002554:	f7ff ffda 	bl	800250c <HAL_RCC_GetHCLKFreq>
 8002558:	4601      	mov	r1, r0
 800255a:	4b06      	ldr	r3, [pc, #24]	; (8002574 <HAL_RCC_GetPCLK2Freq+0x24>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	0adb      	lsrs	r3, r3, #11
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	4a04      	ldr	r2, [pc, #16]	; (8002578 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002566:	5cd3      	ldrb	r3, [r2, r3]
 8002568:	f003 031f 	and.w	r3, r3, #31
 800256c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002570:	4618      	mov	r0, r3
 8002572:	bd80      	pop	{r7, pc}
 8002574:	40021000 	.word	0x40021000
 8002578:	080065dc 	.word	0x080065dc

0800257c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	220f      	movs	r2, #15
 800258a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800258c:	4b12      	ldr	r3, [pc, #72]	; (80025d8 <HAL_RCC_GetClockConfig+0x5c>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f003 0203 	and.w	r2, r3, #3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002598:	4b0f      	ldr	r3, [pc, #60]	; (80025d8 <HAL_RCC_GetClockConfig+0x5c>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80025a4:	4b0c      	ldr	r3, [pc, #48]	; (80025d8 <HAL_RCC_GetClockConfig+0x5c>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80025b0:	4b09      	ldr	r3, [pc, #36]	; (80025d8 <HAL_RCC_GetClockConfig+0x5c>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	08db      	lsrs	r3, r3, #3
 80025b6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80025be:	4b07      	ldr	r3, [pc, #28]	; (80025dc <HAL_RCC_GetClockConfig+0x60>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0207 	and.w	r2, r3, #7
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	601a      	str	r2, [r3, #0]
}
 80025ca:	bf00      	nop
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	40021000 	.word	0x40021000
 80025dc:	40022000 	.word	0x40022000

080025e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80025e8:	2300      	movs	r3, #0
 80025ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80025ec:	4b2a      	ldr	r3, [pc, #168]	; (8002698 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d003      	beq.n	8002600 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80025f8:	f7ff f99a 	bl	8001930 <HAL_PWREx_GetVoltageRange>
 80025fc:	6178      	str	r0, [r7, #20]
 80025fe:	e014      	b.n	800262a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002600:	4b25      	ldr	r3, [pc, #148]	; (8002698 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002604:	4a24      	ldr	r2, [pc, #144]	; (8002698 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800260a:	6593      	str	r3, [r2, #88]	; 0x58
 800260c:	4b22      	ldr	r3, [pc, #136]	; (8002698 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800260e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002614:	60fb      	str	r3, [r7, #12]
 8002616:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002618:	f7ff f98a 	bl	8001930 <HAL_PWREx_GetVoltageRange>
 800261c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800261e:	4b1e      	ldr	r3, [pc, #120]	; (8002698 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002622:	4a1d      	ldr	r2, [pc, #116]	; (8002698 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002624:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002628:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002630:	d10b      	bne.n	800264a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b80      	cmp	r3, #128	; 0x80
 8002636:	d919      	bls.n	800266c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2ba0      	cmp	r3, #160	; 0xa0
 800263c:	d902      	bls.n	8002644 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800263e:	2302      	movs	r3, #2
 8002640:	613b      	str	r3, [r7, #16]
 8002642:	e013      	b.n	800266c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002644:	2301      	movs	r3, #1
 8002646:	613b      	str	r3, [r7, #16]
 8002648:	e010      	b.n	800266c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b80      	cmp	r3, #128	; 0x80
 800264e:	d902      	bls.n	8002656 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002650:	2303      	movs	r3, #3
 8002652:	613b      	str	r3, [r7, #16]
 8002654:	e00a      	b.n	800266c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2b80      	cmp	r3, #128	; 0x80
 800265a:	d102      	bne.n	8002662 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800265c:	2302      	movs	r3, #2
 800265e:	613b      	str	r3, [r7, #16]
 8002660:	e004      	b.n	800266c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2b70      	cmp	r3, #112	; 0x70
 8002666:	d101      	bne.n	800266c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002668:	2301      	movs	r3, #1
 800266a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800266c:	4b0b      	ldr	r3, [pc, #44]	; (800269c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f023 0207 	bic.w	r2, r3, #7
 8002674:	4909      	ldr	r1, [pc, #36]	; (800269c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	4313      	orrs	r3, r2
 800267a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800267c:	4b07      	ldr	r3, [pc, #28]	; (800269c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	429a      	cmp	r2, r3
 8002688:	d001      	beq.n	800268e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e000      	b.n	8002690 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800268e:	2300      	movs	r3, #0
}
 8002690:	4618      	mov	r0, r3
 8002692:	3718      	adds	r7, #24
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40021000 	.word	0x40021000
 800269c:	40022000 	.word	0x40022000

080026a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026a8:	2300      	movs	r3, #0
 80026aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026ac:	2300      	movs	r3, #0
 80026ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d02f      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026c4:	d005      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80026c6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80026ca:	d015      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x58>
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d007      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80026d0:	e00f      	b.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80026d2:	4bac      	ldr	r3, [pc, #688]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	4aab      	ldr	r2, [pc, #684]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80026d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026dc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026de:	e00c      	b.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3304      	adds	r3, #4
 80026e4:	2100      	movs	r1, #0
 80026e6:	4618      	mov	r0, r3
 80026e8:	f000 f9dc 	bl	8002aa4 <RCCEx_PLLSAI1_Config>
 80026ec:	4603      	mov	r3, r0
 80026ee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026f0:	e003      	b.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	74fb      	strb	r3, [r7, #19]
      break;
 80026f6:	e000      	b.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 80026f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026fa:	7cfb      	ldrb	r3, [r7, #19]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d10b      	bne.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002700:	4ba0      	ldr	r3, [pc, #640]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002706:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800270e:	499d      	ldr	r1, [pc, #628]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002710:	4313      	orrs	r3, r2
 8002712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002716:	e001      	b.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002718:	7cfb      	ldrb	r3, [r7, #19]
 800271a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002724:	2b00      	cmp	r3, #0
 8002726:	f000 8099 	beq.w	800285c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 800272a:	2300      	movs	r3, #0
 800272c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800272e:	4b95      	ldr	r3, [pc, #596]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800273a:	2301      	movs	r3, #1
 800273c:	e000      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800273e:	2300      	movs	r3, #0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00d      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002744:	4b8f      	ldr	r3, [pc, #572]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002748:	4a8e      	ldr	r2, [pc, #568]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800274a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800274e:	6593      	str	r3, [r2, #88]	; 0x58
 8002750:	4b8c      	ldr	r3, [pc, #560]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002758:	60bb      	str	r3, [r7, #8]
 800275a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800275c:	2301      	movs	r3, #1
 800275e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002760:	4b89      	ldr	r3, [pc, #548]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a88      	ldr	r2, [pc, #544]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800276a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800276c:	f7fe fab6 	bl	8000cdc <HAL_GetTick>
 8002770:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002772:	e009      	b.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002774:	f7fe fab2 	bl	8000cdc <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d902      	bls.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	74fb      	strb	r3, [r7, #19]
        break;
 8002786:	e005      	b.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002788:	4b7f      	ldr	r3, [pc, #508]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0ef      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8002794:	7cfb      	ldrb	r3, [r7, #19]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d155      	bne.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800279a:	4b7a      	ldr	r3, [pc, #488]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800279c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027a4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d01e      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d019      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027b6:	4b73      	ldr	r3, [pc, #460]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80027b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027c0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027c2:	4b70      	ldr	r3, [pc, #448]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80027c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c8:	4a6e      	ldr	r2, [pc, #440]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80027ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027d2:	4b6c      	ldr	r3, [pc, #432]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80027d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d8:	4a6a      	ldr	r2, [pc, #424]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80027da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027e2:	4a68      	ldr	r2, [pc, #416]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d016      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f4:	f7fe fa72 	bl	8000cdc <HAL_GetTick>
 80027f8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027fa:	e00b      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027fc:	f7fe fa6e 	bl	8000cdc <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	f241 3288 	movw	r2, #5000	; 0x1388
 800280a:	4293      	cmp	r3, r2
 800280c:	d902      	bls.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	74fb      	strb	r3, [r7, #19]
            break;
 8002812:	e006      	b.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002814:	4b5b      	ldr	r3, [pc, #364]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d0ec      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8002822:	7cfb      	ldrb	r3, [r7, #19]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d10b      	bne.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002828:	4b56      	ldr	r3, [pc, #344]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800282a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800282e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002836:	4953      	ldr	r1, [pc, #332]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002838:	4313      	orrs	r3, r2
 800283a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800283e:	e004      	b.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002840:	7cfb      	ldrb	r3, [r7, #19]
 8002842:	74bb      	strb	r3, [r7, #18]
 8002844:	e001      	b.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002846:	7cfb      	ldrb	r3, [r7, #19]
 8002848:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800284a:	7c7b      	ldrb	r3, [r7, #17]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d105      	bne.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002850:	4b4c      	ldr	r3, [pc, #304]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002854:	4a4b      	ldr	r2, [pc, #300]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002856:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800285a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00a      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002868:	4b46      	ldr	r3, [pc, #280]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800286a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286e:	f023 0203 	bic.w	r2, r3, #3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	4943      	ldr	r1, [pc, #268]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002878:	4313      	orrs	r3, r2
 800287a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00a      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800288a:	4b3e      	ldr	r3, [pc, #248]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800288c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002890:	f023 020c 	bic.w	r2, r3, #12
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002898:	493a      	ldr	r1, [pc, #232]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800289a:	4313      	orrs	r3, r2
 800289c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0320 	and.w	r3, r3, #32
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00a      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028ac:	4b35      	ldr	r3, [pc, #212]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80028ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ba:	4932      	ldr	r1, [pc, #200]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00a      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028ce:	4b2d      	ldr	r3, [pc, #180]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80028d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028dc:	4929      	ldr	r1, [pc, #164]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00a      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80028f0:	4b24      	ldr	r3, [pc, #144]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80028f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028fe:	4921      	ldr	r1, [pc, #132]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002900:	4313      	orrs	r3, r2
 8002902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00a      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002912:	4b1c      	ldr	r3, [pc, #112]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002918:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002920:	4918      	ldr	r1, [pc, #96]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002922:	4313      	orrs	r3, r2
 8002924:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00a      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002934:	4b13      	ldr	r3, [pc, #76]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	4910      	ldr	r1, [pc, #64]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002944:	4313      	orrs	r3, r2
 8002946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d02c      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002956:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800295c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002964:	4907      	ldr	r1, [pc, #28]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002966:	4313      	orrs	r3, r2
 8002968:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002970:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002974:	d10a      	bne.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002976:	4b03      	ldr	r3, [pc, #12]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	4a02      	ldr	r2, [pc, #8]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800297c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002980:	60d3      	str	r3, [r2, #12]
 8002982:	e015      	b.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002984:	40021000 	.word	0x40021000
 8002988:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002990:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002994:	d10c      	bne.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	3304      	adds	r3, #4
 800299a:	2101      	movs	r1, #1
 800299c:	4618      	mov	r0, r3
 800299e:	f000 f881 	bl	8002aa4 <RCCEx_PLLSAI1_Config>
 80029a2:	4603      	mov	r3, r0
 80029a4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80029a6:	7cfb      	ldrb	r3, [r7, #19]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 80029ac:	7cfb      	ldrb	r3, [r7, #19]
 80029ae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d028      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029bc:	4b30      	ldr	r3, [pc, #192]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ca:	492d      	ldr	r1, [pc, #180]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029da:	d106      	bne.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029dc:	4b28      	ldr	r3, [pc, #160]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	4a27      	ldr	r2, [pc, #156]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029e6:	60d3      	str	r3, [r2, #12]
 80029e8:	e011      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029f2:	d10c      	bne.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3304      	adds	r3, #4
 80029f8:	2101      	movs	r1, #1
 80029fa:	4618      	mov	r0, r3
 80029fc:	f000 f852 	bl	8002aa4 <RCCEx_PLLSAI1_Config>
 8002a00:	4603      	mov	r3, r0
 8002a02:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a04:	7cfb      	ldrb	r3, [r7, #19]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 8002a0a:	7cfb      	ldrb	r3, [r7, #19]
 8002a0c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d01c      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a1a:	4b19      	ldr	r3, [pc, #100]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a20:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a28:	4915      	ldr	r1, [pc, #84]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a38:	d10c      	bne.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	3304      	adds	r3, #4
 8002a3e:	2102      	movs	r1, #2
 8002a40:	4618      	mov	r0, r3
 8002a42:	f000 f82f 	bl	8002aa4 <RCCEx_PLLSAI1_Config>
 8002a46:	4603      	mov	r3, r0
 8002a48:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a4a:	7cfb      	ldrb	r3, [r7, #19]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d001      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8002a50:	7cfb      	ldrb	r3, [r7, #19]
 8002a52:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00a      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002a60:	4b07      	ldr	r3, [pc, #28]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a66:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a6e:	4904      	ldr	r1, [pc, #16]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a76:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3718      	adds	r7, #24
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40021000 	.word	0x40021000

08002a84 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002a88:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a04      	ldr	r2, [pc, #16]	; (8002aa0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002a8e:	f043 0304 	orr.w	r3, r3, #4
 8002a92:	6013      	str	r3, [r2, #0]
}
 8002a94:	bf00      	nop
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	40021000 	.word	0x40021000

08002aa4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ab2:	4b73      	ldr	r3, [pc, #460]	; (8002c80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	f003 0303 	and.w	r3, r3, #3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d018      	beq.n	8002af0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002abe:	4b70      	ldr	r3, [pc, #448]	; (8002c80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	f003 0203 	and.w	r2, r3, #3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d10d      	bne.n	8002aea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
       ||
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d009      	beq.n	8002aea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002ad6:	4b6a      	ldr	r3, [pc, #424]	; (8002c80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	091b      	lsrs	r3, r3, #4
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	1c5a      	adds	r2, r3, #1
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
       ||
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d044      	beq.n	8002b74 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	73fb      	strb	r3, [r7, #15]
 8002aee:	e041      	b.n	8002b74 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d00c      	beq.n	8002b12 <RCCEx_PLLSAI1_Config+0x6e>
 8002af8:	2b03      	cmp	r3, #3
 8002afa:	d013      	beq.n	8002b24 <RCCEx_PLLSAI1_Config+0x80>
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d120      	bne.n	8002b42 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b00:	4b5f      	ldr	r3, [pc, #380]	; (8002c80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d11d      	bne.n	8002b48 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b10:	e01a      	b.n	8002b48 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b12:	4b5b      	ldr	r3, [pc, #364]	; (8002c80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d116      	bne.n	8002b4c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b22:	e013      	b.n	8002b4c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b24:	4b56      	ldr	r3, [pc, #344]	; (8002c80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d10f      	bne.n	8002b50 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b30:	4b53      	ldr	r3, [pc, #332]	; (8002c80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d109      	bne.n	8002b50 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b40:	e006      	b.n	8002b50 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	73fb      	strb	r3, [r7, #15]
      break;
 8002b46:	e004      	b.n	8002b52 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002b48:	bf00      	nop
 8002b4a:	e002      	b.n	8002b52 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002b4c:	bf00      	nop
 8002b4e:	e000      	b.n	8002b52 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002b50:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b52:	7bfb      	ldrb	r3, [r7, #15]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d10d      	bne.n	8002b74 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b58:	4b49      	ldr	r3, [pc, #292]	; (8002c80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6819      	ldr	r1, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	430b      	orrs	r3, r1
 8002b6e:	4944      	ldr	r1, [pc, #272]	; (8002c80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b74:	7bfb      	ldrb	r3, [r7, #15]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d17c      	bne.n	8002c74 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b7a:	4b41      	ldr	r3, [pc, #260]	; (8002c80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a40      	ldr	r2, [pc, #256]	; (8002c80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b80:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b86:	f7fe f8a9 	bl	8000cdc <HAL_GetTick>
 8002b8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b8c:	e009      	b.n	8002ba2 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b8e:	f7fe f8a5 	bl	8000cdc <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d902      	bls.n	8002ba2 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	73fb      	strb	r3, [r7, #15]
        break;
 8002ba0:	e005      	b.n	8002bae <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ba2:	4b37      	ldr	r3, [pc, #220]	; (8002c80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1ef      	bne.n	8002b8e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002bae:	7bfb      	ldrb	r3, [r7, #15]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d15f      	bne.n	8002c74 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d110      	bne.n	8002bdc <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bba:	4b31      	ldr	r3, [pc, #196]	; (8002c80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002bc2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	6892      	ldr	r2, [r2, #8]
 8002bca:	0211      	lsls	r1, r2, #8
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	68d2      	ldr	r2, [r2, #12]
 8002bd0:	06d2      	lsls	r2, r2, #27
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	492a      	ldr	r1, [pc, #168]	; (8002c80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	610b      	str	r3, [r1, #16]
 8002bda:	e027      	b.n	8002c2c <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d112      	bne.n	8002c08 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002be2:	4b27      	ldr	r3, [pc, #156]	; (8002c80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002bea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	6892      	ldr	r2, [r2, #8]
 8002bf2:	0211      	lsls	r1, r2, #8
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	6912      	ldr	r2, [r2, #16]
 8002bf8:	0852      	lsrs	r2, r2, #1
 8002bfa:	3a01      	subs	r2, #1
 8002bfc:	0552      	lsls	r2, r2, #21
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	491f      	ldr	r1, [pc, #124]	; (8002c80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	610b      	str	r3, [r1, #16]
 8002c06:	e011      	b.n	8002c2c <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c08:	4b1d      	ldr	r3, [pc, #116]	; (8002c80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c10:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	6892      	ldr	r2, [r2, #8]
 8002c18:	0211      	lsls	r1, r2, #8
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	6952      	ldr	r2, [r2, #20]
 8002c1e:	0852      	lsrs	r2, r2, #1
 8002c20:	3a01      	subs	r2, #1
 8002c22:	0652      	lsls	r2, r2, #25
 8002c24:	430a      	orrs	r2, r1
 8002c26:	4916      	ldr	r1, [pc, #88]	; (8002c80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c2c:	4b14      	ldr	r3, [pc, #80]	; (8002c80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a13      	ldr	r2, [pc, #76]	; (8002c80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c38:	f7fe f850 	bl	8000cdc <HAL_GetTick>
 8002c3c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c3e:	e009      	b.n	8002c54 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c40:	f7fe f84c 	bl	8000cdc <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d902      	bls.n	8002c54 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	73fb      	strb	r3, [r7, #15]
          break;
 8002c52:	e005      	b.n	8002c60 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c54:	4b0a      	ldr	r3, [pc, #40]	; (8002c80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d0ef      	beq.n	8002c40 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8002c60:	7bfb      	ldrb	r3, [r7, #15]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d106      	bne.n	8002c74 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002c66:	4b06      	ldr	r3, [pc, #24]	; (8002c80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c68:	691a      	ldr	r2, [r3, #16]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	4904      	ldr	r1, [pc, #16]	; (8002c80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40021000 	.word	0x40021000

08002c84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e049      	b.n	8002d2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d106      	bne.n	8002cb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f841 	bl	8002d32 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3304      	adds	r3, #4
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	4610      	mov	r0, r2
 8002cc4:	f000 f9dc 	bl	8003080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
	...

08002d48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d001      	beq.n	8002d60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e03b      	b.n	8002dd8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2202      	movs	r2, #2
 8002d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68da      	ldr	r2, [r3, #12]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f042 0201 	orr.w	r2, r2, #1
 8002d76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a19      	ldr	r2, [pc, #100]	; (8002de4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d009      	beq.n	8002d96 <HAL_TIM_Base_Start_IT+0x4e>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d8a:	d004      	beq.n	8002d96 <HAL_TIM_Base_Start_IT+0x4e>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a15      	ldr	r2, [pc, #84]	; (8002de8 <HAL_TIM_Base_Start_IT+0xa0>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d115      	bne.n	8002dc2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	4b13      	ldr	r3, [pc, #76]	; (8002dec <HAL_TIM_Base_Start_IT+0xa4>)
 8002d9e:	4013      	ands	r3, r2
 8002da0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2b06      	cmp	r3, #6
 8002da6:	d015      	beq.n	8002dd4 <HAL_TIM_Base_Start_IT+0x8c>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dae:	d011      	beq.n	8002dd4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f042 0201 	orr.w	r2, r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dc0:	e008      	b.n	8002dd4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f042 0201 	orr.w	r2, r2, #1
 8002dd0:	601a      	str	r2, [r3, #0]
 8002dd2:	e000      	b.n	8002dd6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dd4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3714      	adds	r7, #20
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr
 8002de4:	40012c00 	.word	0x40012c00
 8002de8:	40014000 	.word	0x40014000
 8002dec:	00010007 	.word	0x00010007

08002df0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d122      	bne.n	8002e4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d11b      	bne.n	8002e4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f06f 0202 	mvn.w	r2, #2
 8002e1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	f003 0303 	and.w	r3, r3, #3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d003      	beq.n	8002e3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 f905 	bl	8003042 <HAL_TIM_IC_CaptureCallback>
 8002e38:	e005      	b.n	8002e46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 f8f7 	bl	800302e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 f908 	bl	8003056 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	f003 0304 	and.w	r3, r3, #4
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d122      	bne.n	8002ea0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b04      	cmp	r3, #4
 8002e66:	d11b      	bne.n	8002ea0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f06f 0204 	mvn.w	r2, #4
 8002e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2202      	movs	r2, #2
 8002e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d003      	beq.n	8002e8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 f8db 	bl	8003042 <HAL_TIM_IC_CaptureCallback>
 8002e8c:	e005      	b.n	8002e9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 f8cd 	bl	800302e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 f8de 	bl	8003056 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	f003 0308 	and.w	r3, r3, #8
 8002eaa:	2b08      	cmp	r3, #8
 8002eac:	d122      	bne.n	8002ef4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	f003 0308 	and.w	r3, r3, #8
 8002eb8:	2b08      	cmp	r3, #8
 8002eba:	d11b      	bne.n	8002ef4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f06f 0208 	mvn.w	r2, #8
 8002ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2204      	movs	r2, #4
 8002eca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	f003 0303 	and.w	r3, r3, #3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 f8b1 	bl	8003042 <HAL_TIM_IC_CaptureCallback>
 8002ee0:	e005      	b.n	8002eee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 f8a3 	bl	800302e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 f8b4 	bl	8003056 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	f003 0310 	and.w	r3, r3, #16
 8002efe:	2b10      	cmp	r3, #16
 8002f00:	d122      	bne.n	8002f48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	f003 0310 	and.w	r3, r3, #16
 8002f0c:	2b10      	cmp	r3, #16
 8002f0e:	d11b      	bne.n	8002f48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f06f 0210 	mvn.w	r2, #16
 8002f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2208      	movs	r2, #8
 8002f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	69db      	ldr	r3, [r3, #28]
 8002f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 f887 	bl	8003042 <HAL_TIM_IC_CaptureCallback>
 8002f34:	e005      	b.n	8002f42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 f879 	bl	800302e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 f88a 	bl	8003056 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d10e      	bne.n	8002f74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d107      	bne.n	8002f74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f06f 0201 	mvn.w	r2, #1
 8002f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7fd fcee 	bl	8000950 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f7e:	2b80      	cmp	r3, #128	; 0x80
 8002f80:	d10e      	bne.n	8002fa0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f8c:	2b80      	cmp	r3, #128	; 0x80
 8002f8e:	d107      	bne.n	8002fa0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f8de 	bl	800315c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002faa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fae:	d10e      	bne.n	8002fce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fba:	2b80      	cmp	r3, #128	; 0x80
 8002fbc:	d107      	bne.n	8002fce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002fc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 f8d1 	bl	8003170 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd8:	2b40      	cmp	r3, #64	; 0x40
 8002fda:	d10e      	bne.n	8002ffa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe6:	2b40      	cmp	r3, #64	; 0x40
 8002fe8:	d107      	bne.n	8002ffa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 f838 	bl	800306a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	f003 0320 	and.w	r3, r3, #32
 8003004:	2b20      	cmp	r3, #32
 8003006:	d10e      	bne.n	8003026 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	f003 0320 	and.w	r3, r3, #32
 8003012:	2b20      	cmp	r3, #32
 8003014:	d107      	bne.n	8003026 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f06f 0220 	mvn.w	r2, #32
 800301e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 f891 	bl	8003148 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003026:	bf00      	nop
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800302e:	b480      	push	{r7}
 8003030:	b083      	sub	sp, #12
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003042:	b480      	push	{r7}
 8003044:	b083      	sub	sp, #12
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800304a:	bf00      	nop
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003056:	b480      	push	{r7}
 8003058:	b083      	sub	sp, #12
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800306a:	b480      	push	{r7}
 800306c:	b083      	sub	sp, #12
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003072:	bf00      	nop
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
	...

08003080 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a2a      	ldr	r2, [pc, #168]	; (800313c <TIM_Base_SetConfig+0xbc>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d003      	beq.n	80030a0 <TIM_Base_SetConfig+0x20>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800309e:	d108      	bne.n	80030b2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a21      	ldr	r2, [pc, #132]	; (800313c <TIM_Base_SetConfig+0xbc>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d00b      	beq.n	80030d2 <TIM_Base_SetConfig+0x52>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030c0:	d007      	beq.n	80030d2 <TIM_Base_SetConfig+0x52>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a1e      	ldr	r2, [pc, #120]	; (8003140 <TIM_Base_SetConfig+0xc0>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d003      	beq.n	80030d2 <TIM_Base_SetConfig+0x52>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a1d      	ldr	r2, [pc, #116]	; (8003144 <TIM_Base_SetConfig+0xc4>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d108      	bne.n	80030e4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	689a      	ldr	r2, [r3, #8]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a0c      	ldr	r2, [pc, #48]	; (800313c <TIM_Base_SetConfig+0xbc>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d007      	beq.n	8003120 <TIM_Base_SetConfig+0xa0>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a0b      	ldr	r2, [pc, #44]	; (8003140 <TIM_Base_SetConfig+0xc0>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d003      	beq.n	8003120 <TIM_Base_SetConfig+0xa0>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a0a      	ldr	r2, [pc, #40]	; (8003144 <TIM_Base_SetConfig+0xc4>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d103      	bne.n	8003128 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	691a      	ldr	r2, [r3, #16]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	615a      	str	r2, [r3, #20]
}
 800312e:	bf00      	nop
 8003130:	3714      	adds	r7, #20
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	40012c00 	.word	0x40012c00
 8003140:	40014000 	.word	0x40014000
 8003144:	40014400 	.word	0x40014400

08003148 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e040      	b.n	8003218 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800319a:	2b00      	cmp	r3, #0
 800319c:	d106      	bne.n	80031ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f7fd fc54 	bl	8000a54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2224      	movs	r2, #36	; 0x24
 80031b0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 0201 	bic.w	r2, r2, #1
 80031c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f8c0 	bl	8003348 <UART_SetConfig>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d101      	bne.n	80031d2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e022      	b.n	8003218 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d002      	beq.n	80031e0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 fac4 	bl	8003768 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	689a      	ldr	r2, [r3, #8]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f042 0201 	orr.w	r2, r2, #1
 800320e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 fb4b 	bl	80038ac <UART_CheckIdleState>
 8003216:	4603      	mov	r3, r0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3708      	adds	r7, #8
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b08a      	sub	sp, #40	; 0x28
 8003224:	af02      	add	r7, sp, #8
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	603b      	str	r3, [r7, #0]
 800322c:	4613      	mov	r3, r2
 800322e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003234:	2b20      	cmp	r3, #32
 8003236:	f040 8081 	bne.w	800333c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d002      	beq.n	8003246 <HAL_UART_Transmit+0x26>
 8003240:	88fb      	ldrh	r3, [r7, #6]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e079      	b.n	800333e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003250:	2b01      	cmp	r3, #1
 8003252:	d101      	bne.n	8003258 <HAL_UART_Transmit+0x38>
 8003254:	2302      	movs	r3, #2
 8003256:	e072      	b.n	800333e <HAL_UART_Transmit+0x11e>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2221      	movs	r2, #33	; 0x21
 800326a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800326c:	f7fd fd36 	bl	8000cdc <HAL_GetTick>
 8003270:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	88fa      	ldrh	r2, [r7, #6]
 8003276:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	88fa      	ldrh	r2, [r7, #6]
 800327e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800328a:	d108      	bne.n	800329e <HAL_UART_Transmit+0x7e>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d104      	bne.n	800329e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003294:	2300      	movs	r3, #0
 8003296:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	61bb      	str	r3, [r7, #24]
 800329c:	e003      	b.n	80032a6 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032a2:	2300      	movs	r3, #0
 80032a4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80032ae:	e02d      	b.n	800330c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	2200      	movs	r2, #0
 80032b8:	2180      	movs	r1, #128	; 0x80
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f000 fb3b 	bl	8003936 <UART_WaitOnFlagUntilTimeout>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e039      	b.n	800333e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10b      	bne.n	80032e8 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	881a      	ldrh	r2, [r3, #0]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032dc:	b292      	uxth	r2, r2
 80032de:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	3302      	adds	r3, #2
 80032e4:	61bb      	str	r3, [r7, #24]
 80032e6:	e008      	b.n	80032fa <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	781a      	ldrb	r2, [r3, #0]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	b292      	uxth	r2, r2
 80032f2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	3301      	adds	r3, #1
 80032f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003300:	b29b      	uxth	r3, r3
 8003302:	3b01      	subs	r3, #1
 8003304:	b29a      	uxth	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003312:	b29b      	uxth	r3, r3
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1cb      	bne.n	80032b0 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	2200      	movs	r2, #0
 8003320:	2140      	movs	r1, #64	; 0x40
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f000 fb07 	bl	8003936 <UART_WaitOnFlagUntilTimeout>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e005      	b.n	800333e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2220      	movs	r2, #32
 8003336:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003338:	2300      	movs	r3, #0
 800333a:	e000      	b.n	800333e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800333c:	2302      	movs	r3, #2
  }
}
 800333e:	4618      	mov	r0, r3
 8003340:	3720      	adds	r7, #32
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
	...

08003348 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003348:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800334c:	b088      	sub	sp, #32
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003352:	2300      	movs	r3, #0
 8003354:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	689a      	ldr	r2, [r3, #8]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	431a      	orrs	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	431a      	orrs	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	4313      	orrs	r3, r2
 800336c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	4bb0      	ldr	r3, [pc, #704]	; (8003638 <UART_SetConfig+0x2f0>)
 8003376:	4013      	ands	r3, r2
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	6812      	ldr	r2, [r2, #0]
 800337c:	69f9      	ldr	r1, [r7, #28]
 800337e:	430b      	orrs	r3, r1
 8003380:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68da      	ldr	r2, [r3, #12]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	430a      	orrs	r2, r1
 8003396:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4aa6      	ldr	r2, [pc, #664]	; (800363c <UART_SetConfig+0x2f4>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d004      	beq.n	80033b2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	69fa      	ldr	r2, [r7, #28]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	69fa      	ldr	r2, [r7, #28]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a9d      	ldr	r2, [pc, #628]	; (8003640 <UART_SetConfig+0x2f8>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d121      	bne.n	8003414 <UART_SetConfig+0xcc>
 80033d0:	4b9c      	ldr	r3, [pc, #624]	; (8003644 <UART_SetConfig+0x2fc>)
 80033d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d6:	f003 0303 	and.w	r3, r3, #3
 80033da:	2b03      	cmp	r3, #3
 80033dc:	d816      	bhi.n	800340c <UART_SetConfig+0xc4>
 80033de:	a201      	add	r2, pc, #4	; (adr r2, 80033e4 <UART_SetConfig+0x9c>)
 80033e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e4:	080033f5 	.word	0x080033f5
 80033e8:	08003401 	.word	0x08003401
 80033ec:	080033fb 	.word	0x080033fb
 80033f0:	08003407 	.word	0x08003407
 80033f4:	2301      	movs	r3, #1
 80033f6:	76fb      	strb	r3, [r7, #27]
 80033f8:	e072      	b.n	80034e0 <UART_SetConfig+0x198>
 80033fa:	2302      	movs	r3, #2
 80033fc:	76fb      	strb	r3, [r7, #27]
 80033fe:	e06f      	b.n	80034e0 <UART_SetConfig+0x198>
 8003400:	2304      	movs	r3, #4
 8003402:	76fb      	strb	r3, [r7, #27]
 8003404:	e06c      	b.n	80034e0 <UART_SetConfig+0x198>
 8003406:	2308      	movs	r3, #8
 8003408:	76fb      	strb	r3, [r7, #27]
 800340a:	e069      	b.n	80034e0 <UART_SetConfig+0x198>
 800340c:	2310      	movs	r3, #16
 800340e:	76fb      	strb	r3, [r7, #27]
 8003410:	bf00      	nop
 8003412:	e065      	b.n	80034e0 <UART_SetConfig+0x198>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a8b      	ldr	r2, [pc, #556]	; (8003648 <UART_SetConfig+0x300>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d134      	bne.n	8003488 <UART_SetConfig+0x140>
 800341e:	4b89      	ldr	r3, [pc, #548]	; (8003644 <UART_SetConfig+0x2fc>)
 8003420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003424:	f003 030c 	and.w	r3, r3, #12
 8003428:	2b0c      	cmp	r3, #12
 800342a:	d829      	bhi.n	8003480 <UART_SetConfig+0x138>
 800342c:	a201      	add	r2, pc, #4	; (adr r2, 8003434 <UART_SetConfig+0xec>)
 800342e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003432:	bf00      	nop
 8003434:	08003469 	.word	0x08003469
 8003438:	08003481 	.word	0x08003481
 800343c:	08003481 	.word	0x08003481
 8003440:	08003481 	.word	0x08003481
 8003444:	08003475 	.word	0x08003475
 8003448:	08003481 	.word	0x08003481
 800344c:	08003481 	.word	0x08003481
 8003450:	08003481 	.word	0x08003481
 8003454:	0800346f 	.word	0x0800346f
 8003458:	08003481 	.word	0x08003481
 800345c:	08003481 	.word	0x08003481
 8003460:	08003481 	.word	0x08003481
 8003464:	0800347b 	.word	0x0800347b
 8003468:	2300      	movs	r3, #0
 800346a:	76fb      	strb	r3, [r7, #27]
 800346c:	e038      	b.n	80034e0 <UART_SetConfig+0x198>
 800346e:	2302      	movs	r3, #2
 8003470:	76fb      	strb	r3, [r7, #27]
 8003472:	e035      	b.n	80034e0 <UART_SetConfig+0x198>
 8003474:	2304      	movs	r3, #4
 8003476:	76fb      	strb	r3, [r7, #27]
 8003478:	e032      	b.n	80034e0 <UART_SetConfig+0x198>
 800347a:	2308      	movs	r3, #8
 800347c:	76fb      	strb	r3, [r7, #27]
 800347e:	e02f      	b.n	80034e0 <UART_SetConfig+0x198>
 8003480:	2310      	movs	r3, #16
 8003482:	76fb      	strb	r3, [r7, #27]
 8003484:	bf00      	nop
 8003486:	e02b      	b.n	80034e0 <UART_SetConfig+0x198>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a6b      	ldr	r2, [pc, #428]	; (800363c <UART_SetConfig+0x2f4>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d124      	bne.n	80034dc <UART_SetConfig+0x194>
 8003492:	4b6c      	ldr	r3, [pc, #432]	; (8003644 <UART_SetConfig+0x2fc>)
 8003494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003498:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800349c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034a0:	d012      	beq.n	80034c8 <UART_SetConfig+0x180>
 80034a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034a6:	d802      	bhi.n	80034ae <UART_SetConfig+0x166>
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d007      	beq.n	80034bc <UART_SetConfig+0x174>
 80034ac:	e012      	b.n	80034d4 <UART_SetConfig+0x18c>
 80034ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034b2:	d006      	beq.n	80034c2 <UART_SetConfig+0x17a>
 80034b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034b8:	d009      	beq.n	80034ce <UART_SetConfig+0x186>
 80034ba:	e00b      	b.n	80034d4 <UART_SetConfig+0x18c>
 80034bc:	2300      	movs	r3, #0
 80034be:	76fb      	strb	r3, [r7, #27]
 80034c0:	e00e      	b.n	80034e0 <UART_SetConfig+0x198>
 80034c2:	2302      	movs	r3, #2
 80034c4:	76fb      	strb	r3, [r7, #27]
 80034c6:	e00b      	b.n	80034e0 <UART_SetConfig+0x198>
 80034c8:	2304      	movs	r3, #4
 80034ca:	76fb      	strb	r3, [r7, #27]
 80034cc:	e008      	b.n	80034e0 <UART_SetConfig+0x198>
 80034ce:	2308      	movs	r3, #8
 80034d0:	76fb      	strb	r3, [r7, #27]
 80034d2:	e005      	b.n	80034e0 <UART_SetConfig+0x198>
 80034d4:	2310      	movs	r3, #16
 80034d6:	76fb      	strb	r3, [r7, #27]
 80034d8:	bf00      	nop
 80034da:	e001      	b.n	80034e0 <UART_SetConfig+0x198>
 80034dc:	2310      	movs	r3, #16
 80034de:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a55      	ldr	r2, [pc, #340]	; (800363c <UART_SetConfig+0x2f4>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d174      	bne.n	80035d4 <UART_SetConfig+0x28c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80034ea:	7efb      	ldrb	r3, [r7, #27]
 80034ec:	2b08      	cmp	r3, #8
 80034ee:	d824      	bhi.n	800353a <UART_SetConfig+0x1f2>
 80034f0:	a201      	add	r2, pc, #4	; (adr r2, 80034f8 <UART_SetConfig+0x1b0>)
 80034f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f6:	bf00      	nop
 80034f8:	0800351d 	.word	0x0800351d
 80034fc:	0800353b 	.word	0x0800353b
 8003500:	08003525 	.word	0x08003525
 8003504:	0800353b 	.word	0x0800353b
 8003508:	0800352b 	.word	0x0800352b
 800350c:	0800353b 	.word	0x0800353b
 8003510:	0800353b 	.word	0x0800353b
 8003514:	0800353b 	.word	0x0800353b
 8003518:	08003533 	.word	0x08003533
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800351c:	f7ff f802 	bl	8002524 <HAL_RCC_GetPCLK1Freq>
 8003520:	6178      	str	r0, [r7, #20]
        break;
 8003522:	e00f      	b.n	8003544 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003524:	4b49      	ldr	r3, [pc, #292]	; (800364c <UART_SetConfig+0x304>)
 8003526:	617b      	str	r3, [r7, #20]
        break;
 8003528:	e00c      	b.n	8003544 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800352a:	f7fe ff67 	bl	80023fc <HAL_RCC_GetSysClockFreq>
 800352e:	6178      	str	r0, [r7, #20]
        break;
 8003530:	e008      	b.n	8003544 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003536:	617b      	str	r3, [r7, #20]
        break;
 8003538:	e004      	b.n	8003544 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 800353a:	2300      	movs	r3, #0
 800353c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	76bb      	strb	r3, [r7, #26]
        break;
 8003542:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	2b00      	cmp	r3, #0
 8003548:	f000 8100 	beq.w	800374c <UART_SetConfig+0x404>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	4613      	mov	r3, r2
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	4413      	add	r3, r2
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	429a      	cmp	r2, r3
 800355a:	d305      	bcc.n	8003568 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003562:	697a      	ldr	r2, [r7, #20]
 8003564:	429a      	cmp	r2, r3
 8003566:	d902      	bls.n	800356e <UART_SetConfig+0x226>
      {
        ret = HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	76bb      	strb	r3, [r7, #26]
 800356c:	e0ee      	b.n	800374c <UART_SetConfig+0x404>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	4619      	mov	r1, r3
 8003572:	f04f 0200 	mov.w	r2, #0
 8003576:	f04f 0300 	mov.w	r3, #0
 800357a:	f04f 0400 	mov.w	r4, #0
 800357e:	0214      	lsls	r4, r2, #8
 8003580:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003584:	020b      	lsls	r3, r1, #8
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	6852      	ldr	r2, [r2, #4]
 800358a:	0852      	lsrs	r2, r2, #1
 800358c:	4611      	mov	r1, r2
 800358e:	f04f 0200 	mov.w	r2, #0
 8003592:	eb13 0b01 	adds.w	fp, r3, r1
 8003596:	eb44 0c02 	adc.w	ip, r4, r2
 800359a:	4658      	mov	r0, fp
 800359c:	4661      	mov	r1, ip
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f04f 0400 	mov.w	r4, #0
 80035a6:	461a      	mov	r2, r3
 80035a8:	4623      	mov	r3, r4
 80035aa:	f7fc fe11 	bl	80001d0 <__aeabi_uldivmod>
 80035ae:	4603      	mov	r3, r0
 80035b0:	460c      	mov	r4, r1
 80035b2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035ba:	d308      	bcc.n	80035ce <UART_SetConfig+0x286>
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035c2:	d204      	bcs.n	80035ce <UART_SetConfig+0x286>
        {
          huart->Instance->BRR = usartdiv;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	60da      	str	r2, [r3, #12]
 80035cc:	e0be      	b.n	800374c <UART_SetConfig+0x404>
        }
        else
        {
          ret = HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	76bb      	strb	r3, [r7, #26]
 80035d2:	e0bb      	b.n	800374c <UART_SetConfig+0x404>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035dc:	d169      	bne.n	80036b2 <UART_SetConfig+0x36a>
  {
    switch (clocksource)
 80035de:	7efb      	ldrb	r3, [r7, #27]
 80035e0:	2b08      	cmp	r3, #8
 80035e2:	d835      	bhi.n	8003650 <UART_SetConfig+0x308>
 80035e4:	a201      	add	r2, pc, #4	; (adr r2, 80035ec <UART_SetConfig+0x2a4>)
 80035e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ea:	bf00      	nop
 80035ec:	08003611 	.word	0x08003611
 80035f0:	08003619 	.word	0x08003619
 80035f4:	08003621 	.word	0x08003621
 80035f8:	08003651 	.word	0x08003651
 80035fc:	08003627 	.word	0x08003627
 8003600:	08003651 	.word	0x08003651
 8003604:	08003651 	.word	0x08003651
 8003608:	08003651 	.word	0x08003651
 800360c:	0800362f 	.word	0x0800362f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003610:	f7fe ff88 	bl	8002524 <HAL_RCC_GetPCLK1Freq>
 8003614:	6178      	str	r0, [r7, #20]
        break;
 8003616:	e020      	b.n	800365a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003618:	f7fe ff9a 	bl	8002550 <HAL_RCC_GetPCLK2Freq>
 800361c:	6178      	str	r0, [r7, #20]
        break;
 800361e:	e01c      	b.n	800365a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003620:	4b0a      	ldr	r3, [pc, #40]	; (800364c <UART_SetConfig+0x304>)
 8003622:	617b      	str	r3, [r7, #20]
        break;
 8003624:	e019      	b.n	800365a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003626:	f7fe fee9 	bl	80023fc <HAL_RCC_GetSysClockFreq>
 800362a:	6178      	str	r0, [r7, #20]
        break;
 800362c:	e015      	b.n	800365a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800362e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003632:	617b      	str	r3, [r7, #20]
        break;
 8003634:	e011      	b.n	800365a <UART_SetConfig+0x312>
 8003636:	bf00      	nop
 8003638:	efff69f3 	.word	0xefff69f3
 800363c:	40008000 	.word	0x40008000
 8003640:	40013800 	.word	0x40013800
 8003644:	40021000 	.word	0x40021000
 8003648:	40004400 	.word	0x40004400
 800364c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003650:	2300      	movs	r3, #0
 8003652:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	76bb      	strb	r3, [r7, #26]
        break;
 8003658:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d075      	beq.n	800374c <UART_SetConfig+0x404>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	005a      	lsls	r2, r3, #1
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	085b      	lsrs	r3, r3, #1
 800366a:	441a      	add	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	fbb2 f3f3 	udiv	r3, r2, r3
 8003674:	b29b      	uxth	r3, r3
 8003676:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	2b0f      	cmp	r3, #15
 800367c:	d916      	bls.n	80036ac <UART_SetConfig+0x364>
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003684:	d212      	bcs.n	80036ac <UART_SetConfig+0x364>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	b29b      	uxth	r3, r3
 800368a:	f023 030f 	bic.w	r3, r3, #15
 800368e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	085b      	lsrs	r3, r3, #1
 8003694:	b29b      	uxth	r3, r3
 8003696:	f003 0307 	and.w	r3, r3, #7
 800369a:	b29a      	uxth	r2, r3
 800369c:	89fb      	ldrh	r3, [r7, #14]
 800369e:	4313      	orrs	r3, r2
 80036a0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	89fa      	ldrh	r2, [r7, #14]
 80036a8:	60da      	str	r2, [r3, #12]
 80036aa:	e04f      	b.n	800374c <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	76bb      	strb	r3, [r7, #26]
 80036b0:	e04c      	b.n	800374c <UART_SetConfig+0x404>
      }
    }
  }
  else
  {
    switch (clocksource)
 80036b2:	7efb      	ldrb	r3, [r7, #27]
 80036b4:	2b08      	cmp	r3, #8
 80036b6:	d828      	bhi.n	800370a <UART_SetConfig+0x3c2>
 80036b8:	a201      	add	r2, pc, #4	; (adr r2, 80036c0 <UART_SetConfig+0x378>)
 80036ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036be:	bf00      	nop
 80036c0:	080036e5 	.word	0x080036e5
 80036c4:	080036ed 	.word	0x080036ed
 80036c8:	080036f5 	.word	0x080036f5
 80036cc:	0800370b 	.word	0x0800370b
 80036d0:	080036fb 	.word	0x080036fb
 80036d4:	0800370b 	.word	0x0800370b
 80036d8:	0800370b 	.word	0x0800370b
 80036dc:	0800370b 	.word	0x0800370b
 80036e0:	08003703 	.word	0x08003703
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036e4:	f7fe ff1e 	bl	8002524 <HAL_RCC_GetPCLK1Freq>
 80036e8:	6178      	str	r0, [r7, #20]
        break;
 80036ea:	e013      	b.n	8003714 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036ec:	f7fe ff30 	bl	8002550 <HAL_RCC_GetPCLK2Freq>
 80036f0:	6178      	str	r0, [r7, #20]
        break;
 80036f2:	e00f      	b.n	8003714 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036f4:	4b1b      	ldr	r3, [pc, #108]	; (8003764 <UART_SetConfig+0x41c>)
 80036f6:	617b      	str	r3, [r7, #20]
        break;
 80036f8:	e00c      	b.n	8003714 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036fa:	f7fe fe7f 	bl	80023fc <HAL_RCC_GetSysClockFreq>
 80036fe:	6178      	str	r0, [r7, #20]
        break;
 8003700:	e008      	b.n	8003714 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003702:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003706:	617b      	str	r3, [r7, #20]
        break;
 8003708:	e004      	b.n	8003714 <UART_SetConfig+0x3cc>
      default:
        pclk = 0U;
 800370a:	2300      	movs	r3, #0
 800370c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	76bb      	strb	r3, [r7, #26]
        break;
 8003712:	bf00      	nop
    }

    if (pclk != 0U)
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d018      	beq.n	800374c <UART_SetConfig+0x404>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	085a      	lsrs	r2, r3, #1
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	441a      	add	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	fbb2 f3f3 	udiv	r3, r2, r3
 800372c:	b29b      	uxth	r3, r3
 800372e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	2b0f      	cmp	r3, #15
 8003734:	d908      	bls.n	8003748 <UART_SetConfig+0x400>
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800373c:	d204      	bcs.n	8003748 <UART_SetConfig+0x400>
      {
        huart->Instance->BRR = usartdiv;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	60da      	str	r2, [r3, #12]
 8003746:	e001      	b.n	800374c <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003758:	7ebb      	ldrb	r3, [r7, #26]
}
 800375a:	4618      	mov	r0, r3
 800375c:	3720      	adds	r7, #32
 800375e:	46bd      	mov	sp, r7
 8003760:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003764:	00f42400 	.word	0x00f42400

08003768 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	f003 0301 	and.w	r3, r3, #1
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00a      	beq.n	8003792 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	430a      	orrs	r2, r1
 8003790:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00a      	beq.n	80037b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	430a      	orrs	r2, r1
 80037b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00a      	beq.n	80037d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00a      	beq.n	80037f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	430a      	orrs	r2, r1
 80037f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fc:	f003 0310 	and.w	r3, r3, #16
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00a      	beq.n	800381a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	430a      	orrs	r2, r1
 8003818:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	f003 0320 	and.w	r3, r3, #32
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00a      	beq.n	800383c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	430a      	orrs	r2, r1
 800383a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003844:	2b00      	cmp	r3, #0
 8003846:	d01a      	beq.n	800387e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	430a      	orrs	r2, r1
 800385c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003866:	d10a      	bne.n	800387e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	430a      	orrs	r2, r1
 800387c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00a      	beq.n	80038a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	605a      	str	r2, [r3, #4]
  }
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af02      	add	r7, sp, #8
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80038ba:	f7fd fa0f 	bl	8000cdc <HAL_GetTick>
 80038be:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0308 	and.w	r3, r3, #8
 80038ca:	2b08      	cmp	r3, #8
 80038cc:	d10e      	bne.n	80038ec <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038ce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038d2:	9300      	str	r3, [sp, #0]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 f82a 	bl	8003936 <UART_WaitOnFlagUntilTimeout>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e020      	b.n	800392e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0304 	and.w	r3, r3, #4
 80038f6:	2b04      	cmp	r3, #4
 80038f8:	d10e      	bne.n	8003918 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038fa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038fe:	9300      	str	r3, [sp, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 f814 	bl	8003936 <UART_WaitOnFlagUntilTimeout>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d001      	beq.n	8003918 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e00a      	b.n	800392e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2220      	movs	r2, #32
 800391c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2220      	movs	r2, #32
 8003922:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b084      	sub	sp, #16
 800393a:	af00      	add	r7, sp, #0
 800393c:	60f8      	str	r0, [r7, #12]
 800393e:	60b9      	str	r1, [r7, #8]
 8003940:	603b      	str	r3, [r7, #0]
 8003942:	4613      	mov	r3, r2
 8003944:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003946:	e05d      	b.n	8003a04 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394e:	d059      	beq.n	8003a04 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003950:	f7fd f9c4 	bl	8000cdc <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	429a      	cmp	r2, r3
 800395e:	d302      	bcc.n	8003966 <UART_WaitOnFlagUntilTimeout+0x30>
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d11b      	bne.n	800399e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003974:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 0201 	bic.w	r2, r2, #1
 8003984:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2220      	movs	r2, #32
 800398a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2220      	movs	r2, #32
 8003990:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e042      	b.n	8003a24 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0304 	and.w	r3, r3, #4
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d02b      	beq.n	8003a04 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039ba:	d123      	bne.n	8003a04 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039c4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80039d4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	689a      	ldr	r2, [r3, #8]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f022 0201 	bic.w	r2, r2, #1
 80039e4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2220      	movs	r2, #32
 80039ea:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2220      	movs	r2, #32
 80039f0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2220      	movs	r2, #32
 80039f6:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e00f      	b.n	8003a24 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	69da      	ldr	r2, [r3, #28]
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	68ba      	ldr	r2, [r7, #8]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	bf0c      	ite	eq
 8003a14:	2301      	moveq	r3, #1
 8003a16:	2300      	movne	r3, #0
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	79fb      	ldrb	r3, [r7, #7]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d092      	beq.n	8003948 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003a30:	bf00      	nop
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
	...

08003a3c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a42:	f3ef 8305 	mrs	r3, IPSR
 8003a46:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a48:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10f      	bne.n	8003a6e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a4e:	f3ef 8310 	mrs	r3, PRIMASK
 8003a52:	607b      	str	r3, [r7, #4]
  return(result);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d105      	bne.n	8003a66 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003a5a:	f3ef 8311 	mrs	r3, BASEPRI
 8003a5e:	603b      	str	r3, [r7, #0]
  return(result);
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d007      	beq.n	8003a76 <osKernelInitialize+0x3a>
 8003a66:	4b0e      	ldr	r3, [pc, #56]	; (8003aa0 <osKernelInitialize+0x64>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d103      	bne.n	8003a76 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003a6e:	f06f 0305 	mvn.w	r3, #5
 8003a72:	60fb      	str	r3, [r7, #12]
 8003a74:	e00c      	b.n	8003a90 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003a76:	4b0a      	ldr	r3, [pc, #40]	; (8003aa0 <osKernelInitialize+0x64>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d105      	bne.n	8003a8a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003a7e:	4b08      	ldr	r3, [pc, #32]	; (8003aa0 <osKernelInitialize+0x64>)
 8003a80:	2201      	movs	r2, #1
 8003a82:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003a84:	2300      	movs	r3, #0
 8003a86:	60fb      	str	r3, [r7, #12]
 8003a88:	e002      	b.n	8003a90 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a8e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003a90:	68fb      	ldr	r3, [r7, #12]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3714      	adds	r7, #20
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	2000002c 	.word	0x2000002c

08003aa4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003aaa:	f3ef 8305 	mrs	r3, IPSR
 8003aae:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ab0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10f      	bne.n	8003ad6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ab6:	f3ef 8310 	mrs	r3, PRIMASK
 8003aba:	607b      	str	r3, [r7, #4]
  return(result);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d105      	bne.n	8003ace <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003ac2:	f3ef 8311 	mrs	r3, BASEPRI
 8003ac6:	603b      	str	r3, [r7, #0]
  return(result);
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d007      	beq.n	8003ade <osKernelStart+0x3a>
 8003ace:	4b0f      	ldr	r3, [pc, #60]	; (8003b0c <osKernelStart+0x68>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d103      	bne.n	8003ade <osKernelStart+0x3a>
    stat = osErrorISR;
 8003ad6:	f06f 0305 	mvn.w	r3, #5
 8003ada:	60fb      	str	r3, [r7, #12]
 8003adc:	e010      	b.n	8003b00 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003ade:	4b0b      	ldr	r3, [pc, #44]	; (8003b0c <osKernelStart+0x68>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d109      	bne.n	8003afa <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003ae6:	f7ff ffa1 	bl	8003a2c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003aea:	4b08      	ldr	r3, [pc, #32]	; (8003b0c <osKernelStart+0x68>)
 8003aec:	2202      	movs	r2, #2
 8003aee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003af0:	f001 f870 	bl	8004bd4 <vTaskStartScheduler>
      stat = osOK;
 8003af4:	2300      	movs	r3, #0
 8003af6:	60fb      	str	r3, [r7, #12]
 8003af8:	e002      	b.n	8003b00 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8003afa:	f04f 33ff 	mov.w	r3, #4294967295
 8003afe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003b00:	68fb      	ldr	r3, [r7, #12]
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3710      	adds	r7, #16
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	2000002c 	.word	0x2000002c

08003b10 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b090      	sub	sp, #64	; 0x40
 8003b14:	af04      	add	r7, sp, #16
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b20:	f3ef 8305 	mrs	r3, IPSR
 8003b24:	61fb      	str	r3, [r7, #28]
  return(result);
 8003b26:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f040 808f 	bne.w	8003c4c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b2e:	f3ef 8310 	mrs	r3, PRIMASK
 8003b32:	61bb      	str	r3, [r7, #24]
  return(result);
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d105      	bne.n	8003b46 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003b3a:	f3ef 8311 	mrs	r3, BASEPRI
 8003b3e:	617b      	str	r3, [r7, #20]
  return(result);
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <osThreadNew+0x3e>
 8003b46:	4b44      	ldr	r3, [pc, #272]	; (8003c58 <osThreadNew+0x148>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d07e      	beq.n	8003c4c <osThreadNew+0x13c>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d07b      	beq.n	8003c4c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8003b54:	2380      	movs	r3, #128	; 0x80
 8003b56:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003b58:	2318      	movs	r3, #24
 8003b5a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8003b60:	f04f 33ff 	mov.w	r3, #4294967295
 8003b64:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d045      	beq.n	8003bf8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d002      	beq.n	8003b7a <osThreadNew+0x6a>
        name = attr->name;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d002      	beq.n	8003b88 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d008      	beq.n	8003ba0 <osThreadNew+0x90>
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	2b38      	cmp	r3, #56	; 0x38
 8003b92:	d805      	bhi.n	8003ba0 <osThreadNew+0x90>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d001      	beq.n	8003ba4 <osThreadNew+0x94>
        return (NULL);
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	e054      	b.n	8003c4e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d003      	beq.n	8003bb4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	089b      	lsrs	r3, r3, #2
 8003bb2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00e      	beq.n	8003bda <osThreadNew+0xca>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	2b5b      	cmp	r3, #91	; 0x5b
 8003bc2:	d90a      	bls.n	8003bda <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d006      	beq.n	8003bda <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	695b      	ldr	r3, [r3, #20]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d002      	beq.n	8003bda <osThreadNew+0xca>
        mem = 1;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	623b      	str	r3, [r7, #32]
 8003bd8:	e010      	b.n	8003bfc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10c      	bne.n	8003bfc <osThreadNew+0xec>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d108      	bne.n	8003bfc <osThreadNew+0xec>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d104      	bne.n	8003bfc <osThreadNew+0xec>
          mem = 0;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	623b      	str	r3, [r7, #32]
 8003bf6:	e001      	b.n	8003bfc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003bfc:	6a3b      	ldr	r3, [r7, #32]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d110      	bne.n	8003c24 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003c0a:	9202      	str	r2, [sp, #8]
 8003c0c:	9301      	str	r3, [sp, #4]
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c10:	9300      	str	r3, [sp, #0]
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f000 fe09 	bl	8004830 <xTaskCreateStatic>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	613b      	str	r3, [r7, #16]
 8003c22:	e013      	b.n	8003c4c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8003c24:	6a3b      	ldr	r3, [r7, #32]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d110      	bne.n	8003c4c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	f107 0310 	add.w	r3, r7, #16
 8003c32:	9301      	str	r3, [sp, #4]
 8003c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c36:	9300      	str	r3, [sp, #0]
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f000 fe51 	bl	80048e4 <xTaskCreate>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d001      	beq.n	8003c4c <osThreadNew+0x13c>
          hTask = NULL;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003c4c:	693b      	ldr	r3, [r7, #16]
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3730      	adds	r7, #48	; 0x30
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	2000002c 	.word	0x2000002c

08003c5c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c64:	f3ef 8305 	mrs	r3, IPSR
 8003c68:	613b      	str	r3, [r7, #16]
  return(result);
 8003c6a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d10f      	bne.n	8003c90 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c70:	f3ef 8310 	mrs	r3, PRIMASK
 8003c74:	60fb      	str	r3, [r7, #12]
  return(result);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d105      	bne.n	8003c88 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003c7c:	f3ef 8311 	mrs	r3, BASEPRI
 8003c80:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d007      	beq.n	8003c98 <osDelay+0x3c>
 8003c88:	4b0a      	ldr	r3, [pc, #40]	; (8003cb4 <osDelay+0x58>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d103      	bne.n	8003c98 <osDelay+0x3c>
    stat = osErrorISR;
 8003c90:	f06f 0305 	mvn.w	r3, #5
 8003c94:	617b      	str	r3, [r7, #20]
 8003c96:	e007      	b.n	8003ca8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d002      	beq.n	8003ca8 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 ff62 	bl	8004b6c <vTaskDelay>
    }
  }

  return (stat);
 8003ca8:	697b      	ldr	r3, [r7, #20]
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3718      	adds	r7, #24
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	2000002c 	.word	0x2000002c

08003cb8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003cb8:	b480      	push	{r7}
 8003cba:	b085      	sub	sp, #20
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	4a07      	ldr	r2, [pc, #28]	; (8003ce4 <vApplicationGetIdleTaskMemory+0x2c>)
 8003cc8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	4a06      	ldr	r2, [pc, #24]	; (8003ce8 <vApplicationGetIdleTaskMemory+0x30>)
 8003cce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2280      	movs	r2, #128	; 0x80
 8003cd4:	601a      	str	r2, [r3, #0]
}
 8003cd6:	bf00      	nop
 8003cd8:	3714      	adds	r7, #20
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	20000030 	.word	0x20000030
 8003ce8:	2000008c 	.word	0x2000008c

08003cec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	4a07      	ldr	r2, [pc, #28]	; (8003d18 <vApplicationGetTimerTaskMemory+0x2c>)
 8003cfc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	4a06      	ldr	r2, [pc, #24]	; (8003d1c <vApplicationGetTimerTaskMemory+0x30>)
 8003d02:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d0a:	601a      	str	r2, [r3, #0]
}
 8003d0c:	bf00      	nop
 8003d0e:	3714      	adds	r7, #20
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	2000028c 	.word	0x2000028c
 8003d1c:	200002e8 	.word	0x200002e8

08003d20 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f103 0208 	add.w	r2, r3, #8
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f04f 32ff 	mov.w	r2, #4294967295
 8003d38:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f103 0208 	add.w	r2, r3, #8
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f103 0208 	add.w	r2, r3, #8
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003d6e:	bf00      	nop
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b085      	sub	sp, #20
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
 8003d82:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	1c5a      	adds	r2, r3, #1
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	601a      	str	r2, [r3, #0]
}
 8003db6:	bf00      	nop
 8003db8:	3714      	adds	r7, #20
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr

08003dc2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	b085      	sub	sp, #20
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
 8003dca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd8:	d103      	bne.n	8003de2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	60fb      	str	r3, [r7, #12]
 8003de0:	e00c      	b.n	8003dfc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	3308      	adds	r3, #8
 8003de6:	60fb      	str	r3, [r7, #12]
 8003de8:	e002      	b.n	8003df0 <vListInsert+0x2e>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	60fb      	str	r3, [r7, #12]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68ba      	ldr	r2, [r7, #8]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d2f6      	bcs.n	8003dea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	685a      	ldr	r2, [r3, #4]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	1c5a      	adds	r2, r3, #1
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	601a      	str	r2, [r3, #0]
}
 8003e28:	bf00      	nop
 8003e2a:	3714      	adds	r7, #20
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	6892      	ldr	r2, [r2, #8]
 8003e4a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	6852      	ldr	r2, [r2, #4]
 8003e54:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d103      	bne.n	8003e68 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689a      	ldr	r2, [r3, #8]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	1e5a      	subs	r2, r3, #1
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3714      	adds	r7, #20
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d109      	bne.n	8003eb0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea0:	f383 8811 	msr	BASEPRI, r3
 8003ea4:	f3bf 8f6f 	isb	sy
 8003ea8:	f3bf 8f4f 	dsb	sy
 8003eac:	60bb      	str	r3, [r7, #8]
 8003eae:	e7fe      	b.n	8003eae <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003eb0:	f002 f814 	bl	8005edc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ebc:	68f9      	ldr	r1, [r7, #12]
 8003ebe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003ec0:	fb01 f303 	mul.w	r3, r1, r3
 8003ec4:	441a      	add	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	68f9      	ldr	r1, [r7, #12]
 8003ee4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003ee6:	fb01 f303 	mul.w	r3, r1, r3
 8003eea:	441a      	add	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	22ff      	movs	r2, #255	; 0xff
 8003ef4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	22ff      	movs	r2, #255	; 0xff
 8003efc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d114      	bne.n	8003f30 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d01a      	beq.n	8003f44 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	3310      	adds	r3, #16
 8003f12:	4618      	mov	r0, r3
 8003f14:	f001 f8de 	bl	80050d4 <xTaskRemoveFromEventList>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d012      	beq.n	8003f44 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003f1e:	4b0d      	ldr	r3, [pc, #52]	; (8003f54 <xQueueGenericReset+0xcc>)
 8003f20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f24:	601a      	str	r2, [r3, #0]
 8003f26:	f3bf 8f4f 	dsb	sy
 8003f2a:	f3bf 8f6f 	isb	sy
 8003f2e:	e009      	b.n	8003f44 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	3310      	adds	r3, #16
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7ff fef3 	bl	8003d20 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	3324      	adds	r3, #36	; 0x24
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7ff feee 	bl	8003d20 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003f44:	f001 fff8 	bl	8005f38 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003f48:	2301      	movs	r3, #1
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	e000ed04 	.word	0xe000ed04

08003f58 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b08e      	sub	sp, #56	; 0x38
 8003f5c:	af02      	add	r7, sp, #8
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
 8003f64:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d109      	bne.n	8003f80 <xQueueGenericCreateStatic+0x28>
 8003f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f70:	f383 8811 	msr	BASEPRI, r3
 8003f74:	f3bf 8f6f 	isb	sy
 8003f78:	f3bf 8f4f 	dsb	sy
 8003f7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f7e:	e7fe      	b.n	8003f7e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d109      	bne.n	8003f9a <xQueueGenericCreateStatic+0x42>
 8003f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8a:	f383 8811 	msr	BASEPRI, r3
 8003f8e:	f3bf 8f6f 	isb	sy
 8003f92:	f3bf 8f4f 	dsb	sy
 8003f96:	627b      	str	r3, [r7, #36]	; 0x24
 8003f98:	e7fe      	b.n	8003f98 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d002      	beq.n	8003fa6 <xQueueGenericCreateStatic+0x4e>
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d001      	beq.n	8003faa <xQueueGenericCreateStatic+0x52>
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e000      	b.n	8003fac <xQueueGenericCreateStatic+0x54>
 8003faa:	2300      	movs	r3, #0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d109      	bne.n	8003fc4 <xQueueGenericCreateStatic+0x6c>
 8003fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb4:	f383 8811 	msr	BASEPRI, r3
 8003fb8:	f3bf 8f6f 	isb	sy
 8003fbc:	f3bf 8f4f 	dsb	sy
 8003fc0:	623b      	str	r3, [r7, #32]
 8003fc2:	e7fe      	b.n	8003fc2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d102      	bne.n	8003fd0 <xQueueGenericCreateStatic+0x78>
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d101      	bne.n	8003fd4 <xQueueGenericCreateStatic+0x7c>
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e000      	b.n	8003fd6 <xQueueGenericCreateStatic+0x7e>
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d109      	bne.n	8003fee <xQueueGenericCreateStatic+0x96>
 8003fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fde:	f383 8811 	msr	BASEPRI, r3
 8003fe2:	f3bf 8f6f 	isb	sy
 8003fe6:	f3bf 8f4f 	dsb	sy
 8003fea:	61fb      	str	r3, [r7, #28]
 8003fec:	e7fe      	b.n	8003fec <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003fee:	2350      	movs	r3, #80	; 0x50
 8003ff0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	2b50      	cmp	r3, #80	; 0x50
 8003ff6:	d009      	beq.n	800400c <xQueueGenericCreateStatic+0xb4>
 8003ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ffc:	f383 8811 	msr	BASEPRI, r3
 8004000:	f3bf 8f6f 	isb	sy
 8004004:	f3bf 8f4f 	dsb	sy
 8004008:	61bb      	str	r3, [r7, #24]
 800400a:	e7fe      	b.n	800400a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800400c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00d      	beq.n	8004034 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004020:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004026:	9300      	str	r3, [sp, #0]
 8004028:	4613      	mov	r3, r2
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	68b9      	ldr	r1, [r7, #8]
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f000 f805 	bl	800403e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004036:	4618      	mov	r0, r3
 8004038:	3730      	adds	r7, #48	; 0x30
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800403e:	b580      	push	{r7, lr}
 8004040:	b084      	sub	sp, #16
 8004042:	af00      	add	r7, sp, #0
 8004044:	60f8      	str	r0, [r7, #12]
 8004046:	60b9      	str	r1, [r7, #8]
 8004048:	607a      	str	r2, [r7, #4]
 800404a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d103      	bne.n	800405a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	e002      	b.n	8004060 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	68ba      	ldr	r2, [r7, #8]
 800406a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800406c:	2101      	movs	r1, #1
 800406e:	69b8      	ldr	r0, [r7, #24]
 8004070:	f7ff ff0a 	bl	8003e88 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	78fa      	ldrb	r2, [r7, #3]
 8004078:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800407c:	bf00      	nop
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b08e      	sub	sp, #56	; 0x38
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
 8004090:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004092:	2300      	movs	r3, #0
 8004094:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800409a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800409c:	2b00      	cmp	r3, #0
 800409e:	d109      	bne.n	80040b4 <xQueueGenericSend+0x30>
 80040a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a4:	f383 8811 	msr	BASEPRI, r3
 80040a8:	f3bf 8f6f 	isb	sy
 80040ac:	f3bf 8f4f 	dsb	sy
 80040b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80040b2:	e7fe      	b.n	80040b2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d103      	bne.n	80040c2 <xQueueGenericSend+0x3e>
 80040ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d101      	bne.n	80040c6 <xQueueGenericSend+0x42>
 80040c2:	2301      	movs	r3, #1
 80040c4:	e000      	b.n	80040c8 <xQueueGenericSend+0x44>
 80040c6:	2300      	movs	r3, #0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d109      	bne.n	80040e0 <xQueueGenericSend+0x5c>
 80040cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d0:	f383 8811 	msr	BASEPRI, r3
 80040d4:	f3bf 8f6f 	isb	sy
 80040d8:	f3bf 8f4f 	dsb	sy
 80040dc:	627b      	str	r3, [r7, #36]	; 0x24
 80040de:	e7fe      	b.n	80040de <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d103      	bne.n	80040ee <xQueueGenericSend+0x6a>
 80040e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d101      	bne.n	80040f2 <xQueueGenericSend+0x6e>
 80040ee:	2301      	movs	r3, #1
 80040f0:	e000      	b.n	80040f4 <xQueueGenericSend+0x70>
 80040f2:	2300      	movs	r3, #0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d109      	bne.n	800410c <xQueueGenericSend+0x88>
 80040f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040fc:	f383 8811 	msr	BASEPRI, r3
 8004100:	f3bf 8f6f 	isb	sy
 8004104:	f3bf 8f4f 	dsb	sy
 8004108:	623b      	str	r3, [r7, #32]
 800410a:	e7fe      	b.n	800410a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800410c:	f001 f998 	bl	8005440 <xTaskGetSchedulerState>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d102      	bne.n	800411c <xQueueGenericSend+0x98>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d101      	bne.n	8004120 <xQueueGenericSend+0x9c>
 800411c:	2301      	movs	r3, #1
 800411e:	e000      	b.n	8004122 <xQueueGenericSend+0x9e>
 8004120:	2300      	movs	r3, #0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d109      	bne.n	800413a <xQueueGenericSend+0xb6>
 8004126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412a:	f383 8811 	msr	BASEPRI, r3
 800412e:	f3bf 8f6f 	isb	sy
 8004132:	f3bf 8f4f 	dsb	sy
 8004136:	61fb      	str	r3, [r7, #28]
 8004138:	e7fe      	b.n	8004138 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800413a:	f001 fecf 	bl	8005edc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800413e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004140:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004146:	429a      	cmp	r2, r3
 8004148:	d302      	bcc.n	8004150 <xQueueGenericSend+0xcc>
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	2b02      	cmp	r3, #2
 800414e:	d129      	bne.n	80041a4 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	68b9      	ldr	r1, [r7, #8]
 8004154:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004156:	f000 f9ff 	bl	8004558 <prvCopyDataToQueue>
 800415a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800415c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800415e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004160:	2b00      	cmp	r3, #0
 8004162:	d010      	beq.n	8004186 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004166:	3324      	adds	r3, #36	; 0x24
 8004168:	4618      	mov	r0, r3
 800416a:	f000 ffb3 	bl	80050d4 <xTaskRemoveFromEventList>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d013      	beq.n	800419c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004174:	4b3f      	ldr	r3, [pc, #252]	; (8004274 <xQueueGenericSend+0x1f0>)
 8004176:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800417a:	601a      	str	r2, [r3, #0]
 800417c:	f3bf 8f4f 	dsb	sy
 8004180:	f3bf 8f6f 	isb	sy
 8004184:	e00a      	b.n	800419c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004188:	2b00      	cmp	r3, #0
 800418a:	d007      	beq.n	800419c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800418c:	4b39      	ldr	r3, [pc, #228]	; (8004274 <xQueueGenericSend+0x1f0>)
 800418e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004192:	601a      	str	r2, [r3, #0]
 8004194:	f3bf 8f4f 	dsb	sy
 8004198:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800419c:	f001 fecc 	bl	8005f38 <vPortExitCritical>
				return pdPASS;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e063      	b.n	800426c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d103      	bne.n	80041b2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80041aa:	f001 fec5 	bl	8005f38 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80041ae:	2300      	movs	r3, #0
 80041b0:	e05c      	b.n	800426c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80041b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d106      	bne.n	80041c6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80041b8:	f107 0314 	add.w	r3, r7, #20
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 ffeb 	bl	8005198 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80041c2:	2301      	movs	r3, #1
 80041c4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80041c6:	f001 feb7 	bl	8005f38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80041ca:	f000 fd67 	bl	8004c9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80041ce:	f001 fe85 	bl	8005edc <vPortEnterCritical>
 80041d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041d8:	b25b      	sxtb	r3, r3
 80041da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041de:	d103      	bne.n	80041e8 <xQueueGenericSend+0x164>
 80041e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041ee:	b25b      	sxtb	r3, r3
 80041f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f4:	d103      	bne.n	80041fe <xQueueGenericSend+0x17a>
 80041f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041fe:	f001 fe9b 	bl	8005f38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004202:	1d3a      	adds	r2, r7, #4
 8004204:	f107 0314 	add.w	r3, r7, #20
 8004208:	4611      	mov	r1, r2
 800420a:	4618      	mov	r0, r3
 800420c:	f000 ffda 	bl	80051c4 <xTaskCheckForTimeOut>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d124      	bne.n	8004260 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004216:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004218:	f000 fa96 	bl	8004748 <prvIsQueueFull>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d018      	beq.n	8004254 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004224:	3310      	adds	r3, #16
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	4611      	mov	r1, r2
 800422a:	4618      	mov	r0, r3
 800422c:	f000 ff04 	bl	8005038 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004230:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004232:	f000 fa21 	bl	8004678 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004236:	f000 fd3f 	bl	8004cb8 <xTaskResumeAll>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	f47f af7c 	bne.w	800413a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004242:	4b0c      	ldr	r3, [pc, #48]	; (8004274 <xQueueGenericSend+0x1f0>)
 8004244:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004248:	601a      	str	r2, [r3, #0]
 800424a:	f3bf 8f4f 	dsb	sy
 800424e:	f3bf 8f6f 	isb	sy
 8004252:	e772      	b.n	800413a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004254:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004256:	f000 fa0f 	bl	8004678 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800425a:	f000 fd2d 	bl	8004cb8 <xTaskResumeAll>
 800425e:	e76c      	b.n	800413a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004260:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004262:	f000 fa09 	bl	8004678 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004266:	f000 fd27 	bl	8004cb8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800426a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800426c:	4618      	mov	r0, r3
 800426e:	3738      	adds	r7, #56	; 0x38
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	e000ed04 	.word	0xe000ed04

08004278 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b08e      	sub	sp, #56	; 0x38
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
 8004284:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800428a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428c:	2b00      	cmp	r3, #0
 800428e:	d109      	bne.n	80042a4 <xQueueGenericSendFromISR+0x2c>
 8004290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004294:	f383 8811 	msr	BASEPRI, r3
 8004298:	f3bf 8f6f 	isb	sy
 800429c:	f3bf 8f4f 	dsb	sy
 80042a0:	627b      	str	r3, [r7, #36]	; 0x24
 80042a2:	e7fe      	b.n	80042a2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d103      	bne.n	80042b2 <xQueueGenericSendFromISR+0x3a>
 80042aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <xQueueGenericSendFromISR+0x3e>
 80042b2:	2301      	movs	r3, #1
 80042b4:	e000      	b.n	80042b8 <xQueueGenericSendFromISR+0x40>
 80042b6:	2300      	movs	r3, #0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d109      	bne.n	80042d0 <xQueueGenericSendFromISR+0x58>
 80042bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c0:	f383 8811 	msr	BASEPRI, r3
 80042c4:	f3bf 8f6f 	isb	sy
 80042c8:	f3bf 8f4f 	dsb	sy
 80042cc:	623b      	str	r3, [r7, #32]
 80042ce:	e7fe      	b.n	80042ce <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d103      	bne.n	80042de <xQueueGenericSendFromISR+0x66>
 80042d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d101      	bne.n	80042e2 <xQueueGenericSendFromISR+0x6a>
 80042de:	2301      	movs	r3, #1
 80042e0:	e000      	b.n	80042e4 <xQueueGenericSendFromISR+0x6c>
 80042e2:	2300      	movs	r3, #0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d109      	bne.n	80042fc <xQueueGenericSendFromISR+0x84>
 80042e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ec:	f383 8811 	msr	BASEPRI, r3
 80042f0:	f3bf 8f6f 	isb	sy
 80042f4:	f3bf 8f4f 	dsb	sy
 80042f8:	61fb      	str	r3, [r7, #28]
 80042fa:	e7fe      	b.n	80042fa <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80042fc:	f001 feca 	bl	8006094 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004300:	f3ef 8211 	mrs	r2, BASEPRI
 8004304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004308:	f383 8811 	msr	BASEPRI, r3
 800430c:	f3bf 8f6f 	isb	sy
 8004310:	f3bf 8f4f 	dsb	sy
 8004314:	61ba      	str	r2, [r7, #24]
 8004316:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004318:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800431a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800431c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800431e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004324:	429a      	cmp	r2, r3
 8004326:	d302      	bcc.n	800432e <xQueueGenericSendFromISR+0xb6>
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	2b02      	cmp	r3, #2
 800432c:	d12c      	bne.n	8004388 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800432e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004330:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004334:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004338:	683a      	ldr	r2, [r7, #0]
 800433a:	68b9      	ldr	r1, [r7, #8]
 800433c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800433e:	f000 f90b 	bl	8004558 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004342:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800434a:	d112      	bne.n	8004372 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800434c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004350:	2b00      	cmp	r3, #0
 8004352:	d016      	beq.n	8004382 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004356:	3324      	adds	r3, #36	; 0x24
 8004358:	4618      	mov	r0, r3
 800435a:	f000 febb 	bl	80050d4 <xTaskRemoveFromEventList>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00e      	beq.n	8004382 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00b      	beq.n	8004382 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	601a      	str	r2, [r3, #0]
 8004370:	e007      	b.n	8004382 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004372:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004376:	3301      	adds	r3, #1
 8004378:	b2db      	uxtb	r3, r3
 800437a:	b25a      	sxtb	r2, r3
 800437c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004382:	2301      	movs	r3, #1
 8004384:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004386:	e001      	b.n	800438c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004388:	2300      	movs	r3, #0
 800438a:	637b      	str	r3, [r7, #52]	; 0x34
 800438c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800438e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004398:	4618      	mov	r0, r3
 800439a:	3738      	adds	r7, #56	; 0x38
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b08c      	sub	sp, #48	; 0x30
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80043ac:	2300      	movs	r3, #0
 80043ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80043b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d109      	bne.n	80043ce <xQueueReceive+0x2e>
	__asm volatile
 80043ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043be:	f383 8811 	msr	BASEPRI, r3
 80043c2:	f3bf 8f6f 	isb	sy
 80043c6:	f3bf 8f4f 	dsb	sy
 80043ca:	623b      	str	r3, [r7, #32]
 80043cc:	e7fe      	b.n	80043cc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d103      	bne.n	80043dc <xQueueReceive+0x3c>
 80043d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d101      	bne.n	80043e0 <xQueueReceive+0x40>
 80043dc:	2301      	movs	r3, #1
 80043de:	e000      	b.n	80043e2 <xQueueReceive+0x42>
 80043e0:	2300      	movs	r3, #0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d109      	bne.n	80043fa <xQueueReceive+0x5a>
 80043e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ea:	f383 8811 	msr	BASEPRI, r3
 80043ee:	f3bf 8f6f 	isb	sy
 80043f2:	f3bf 8f4f 	dsb	sy
 80043f6:	61fb      	str	r3, [r7, #28]
 80043f8:	e7fe      	b.n	80043f8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80043fa:	f001 f821 	bl	8005440 <xTaskGetSchedulerState>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d102      	bne.n	800440a <xQueueReceive+0x6a>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <xQueueReceive+0x6e>
 800440a:	2301      	movs	r3, #1
 800440c:	e000      	b.n	8004410 <xQueueReceive+0x70>
 800440e:	2300      	movs	r3, #0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d109      	bne.n	8004428 <xQueueReceive+0x88>
 8004414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004418:	f383 8811 	msr	BASEPRI, r3
 800441c:	f3bf 8f6f 	isb	sy
 8004420:	f3bf 8f4f 	dsb	sy
 8004424:	61bb      	str	r3, [r7, #24]
 8004426:	e7fe      	b.n	8004426 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004428:	f001 fd58 	bl	8005edc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800442c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004430:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004434:	2b00      	cmp	r3, #0
 8004436:	d01f      	beq.n	8004478 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004438:	68b9      	ldr	r1, [r7, #8]
 800443a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800443c:	f000 f8f6 	bl	800462c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004442:	1e5a      	subs	r2, r3, #1
 8004444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004446:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00f      	beq.n	8004470 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004452:	3310      	adds	r3, #16
 8004454:	4618      	mov	r0, r3
 8004456:	f000 fe3d 	bl	80050d4 <xTaskRemoveFromEventList>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d007      	beq.n	8004470 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004460:	4b3c      	ldr	r3, [pc, #240]	; (8004554 <xQueueReceive+0x1b4>)
 8004462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	f3bf 8f4f 	dsb	sy
 800446c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004470:	f001 fd62 	bl	8005f38 <vPortExitCritical>
				return pdPASS;
 8004474:	2301      	movs	r3, #1
 8004476:	e069      	b.n	800454c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d103      	bne.n	8004486 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800447e:	f001 fd5b 	bl	8005f38 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004482:	2300      	movs	r3, #0
 8004484:	e062      	b.n	800454c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004488:	2b00      	cmp	r3, #0
 800448a:	d106      	bne.n	800449a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800448c:	f107 0310 	add.w	r3, r7, #16
 8004490:	4618      	mov	r0, r3
 8004492:	f000 fe81 	bl	8005198 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004496:	2301      	movs	r3, #1
 8004498:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800449a:	f001 fd4d 	bl	8005f38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800449e:	f000 fbfd 	bl	8004c9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80044a2:	f001 fd1b 	bl	8005edc <vPortEnterCritical>
 80044a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044ac:	b25b      	sxtb	r3, r3
 80044ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b2:	d103      	bne.n	80044bc <xQueueReceive+0x11c>
 80044b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044c2:	b25b      	sxtb	r3, r3
 80044c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c8:	d103      	bne.n	80044d2 <xQueueReceive+0x132>
 80044ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044d2:	f001 fd31 	bl	8005f38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80044d6:	1d3a      	adds	r2, r7, #4
 80044d8:	f107 0310 	add.w	r3, r7, #16
 80044dc:	4611      	mov	r1, r2
 80044de:	4618      	mov	r0, r3
 80044e0:	f000 fe70 	bl	80051c4 <xTaskCheckForTimeOut>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d123      	bne.n	8004532 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80044ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044ec:	f000 f916 	bl	800471c <prvIsQueueEmpty>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d017      	beq.n	8004526 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80044f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f8:	3324      	adds	r3, #36	; 0x24
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	4611      	mov	r1, r2
 80044fe:	4618      	mov	r0, r3
 8004500:	f000 fd9a 	bl	8005038 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004504:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004506:	f000 f8b7 	bl	8004678 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800450a:	f000 fbd5 	bl	8004cb8 <xTaskResumeAll>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d189      	bne.n	8004428 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004514:	4b0f      	ldr	r3, [pc, #60]	; (8004554 <xQueueReceive+0x1b4>)
 8004516:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800451a:	601a      	str	r2, [r3, #0]
 800451c:	f3bf 8f4f 	dsb	sy
 8004520:	f3bf 8f6f 	isb	sy
 8004524:	e780      	b.n	8004428 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004526:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004528:	f000 f8a6 	bl	8004678 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800452c:	f000 fbc4 	bl	8004cb8 <xTaskResumeAll>
 8004530:	e77a      	b.n	8004428 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004532:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004534:	f000 f8a0 	bl	8004678 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004538:	f000 fbbe 	bl	8004cb8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800453c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800453e:	f000 f8ed 	bl	800471c <prvIsQueueEmpty>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	f43f af6f 	beq.w	8004428 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800454a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800454c:	4618      	mov	r0, r3
 800454e:	3730      	adds	r7, #48	; 0x30
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	e000ed04 	.word	0xe000ed04

08004558 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b086      	sub	sp, #24
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004564:	2300      	movs	r3, #0
 8004566:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10d      	bne.n	8004592 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d14d      	bne.n	800461a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	4618      	mov	r0, r3
 8004584:	f000 ff7a 	bl	800547c <xTaskPriorityDisinherit>
 8004588:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	609a      	str	r2, [r3, #8]
 8004590:	e043      	b.n	800461a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d119      	bne.n	80045cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6858      	ldr	r0, [r3, #4]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a0:	461a      	mov	r2, r3
 80045a2:	68b9      	ldr	r1, [r7, #8]
 80045a4:	f001 ffae 	bl	8006504 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	685a      	ldr	r2, [r3, #4]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b0:	441a      	add	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	685a      	ldr	r2, [r3, #4]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d32b      	bcc.n	800461a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	605a      	str	r2, [r3, #4]
 80045ca:	e026      	b.n	800461a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	68d8      	ldr	r0, [r3, #12]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d4:	461a      	mov	r2, r3
 80045d6:	68b9      	ldr	r1, [r7, #8]
 80045d8:	f001 ff94 	bl	8006504 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	68da      	ldr	r2, [r3, #12]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e4:	425b      	negs	r3, r3
 80045e6:	441a      	add	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	68da      	ldr	r2, [r3, #12]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d207      	bcs.n	8004608 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	689a      	ldr	r2, [r3, #8]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004600:	425b      	negs	r3, r3
 8004602:	441a      	add	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2b02      	cmp	r3, #2
 800460c:	d105      	bne.n	800461a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d002      	beq.n	800461a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	3b01      	subs	r3, #1
 8004618:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1c5a      	adds	r2, r3, #1
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004622:	697b      	ldr	r3, [r7, #20]
}
 8004624:	4618      	mov	r0, r3
 8004626:	3718      	adds	r7, #24
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463a:	2b00      	cmp	r3, #0
 800463c:	d018      	beq.n	8004670 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	68da      	ldr	r2, [r3, #12]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004646:	441a      	add	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	68da      	ldr	r2, [r3, #12]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	429a      	cmp	r2, r3
 8004656:	d303      	bcc.n	8004660 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68d9      	ldr	r1, [r3, #12]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004668:	461a      	mov	r2, r3
 800466a:	6838      	ldr	r0, [r7, #0]
 800466c:	f001 ff4a 	bl	8006504 <memcpy>
	}
}
 8004670:	bf00      	nop
 8004672:	3708      	adds	r7, #8
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004680:	f001 fc2c 	bl	8005edc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800468a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800468c:	e011      	b.n	80046b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004692:	2b00      	cmp	r3, #0
 8004694:	d012      	beq.n	80046bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	3324      	adds	r3, #36	; 0x24
 800469a:	4618      	mov	r0, r3
 800469c:	f000 fd1a 	bl	80050d4 <xTaskRemoveFromEventList>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80046a6:	f000 fded 	bl	8005284 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80046aa:	7bfb      	ldrb	r3, [r7, #15]
 80046ac:	3b01      	subs	r3, #1
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80046b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	dce9      	bgt.n	800468e <prvUnlockQueue+0x16>
 80046ba:	e000      	b.n	80046be <prvUnlockQueue+0x46>
					break;
 80046bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	22ff      	movs	r2, #255	; 0xff
 80046c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80046c6:	f001 fc37 	bl	8005f38 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80046ca:	f001 fc07 	bl	8005edc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80046d6:	e011      	b.n	80046fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d012      	beq.n	8004706 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	3310      	adds	r3, #16
 80046e4:	4618      	mov	r0, r3
 80046e6:	f000 fcf5 	bl	80050d4 <xTaskRemoveFromEventList>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d001      	beq.n	80046f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80046f0:	f000 fdc8 	bl	8005284 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80046f4:	7bbb      	ldrb	r3, [r7, #14]
 80046f6:	3b01      	subs	r3, #1
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80046fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004700:	2b00      	cmp	r3, #0
 8004702:	dce9      	bgt.n	80046d8 <prvUnlockQueue+0x60>
 8004704:	e000      	b.n	8004708 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004706:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	22ff      	movs	r2, #255	; 0xff
 800470c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004710:	f001 fc12 	bl	8005f38 <vPortExitCritical>
}
 8004714:	bf00      	nop
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004724:	f001 fbda 	bl	8005edc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472c:	2b00      	cmp	r3, #0
 800472e:	d102      	bne.n	8004736 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004730:	2301      	movs	r3, #1
 8004732:	60fb      	str	r3, [r7, #12]
 8004734:	e001      	b.n	800473a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004736:	2300      	movs	r3, #0
 8004738:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800473a:	f001 fbfd 	bl	8005f38 <vPortExitCritical>

	return xReturn;
 800473e:	68fb      	ldr	r3, [r7, #12]
}
 8004740:	4618      	mov	r0, r3
 8004742:	3710      	adds	r7, #16
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004750:	f001 fbc4 	bl	8005edc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800475c:	429a      	cmp	r2, r3
 800475e:	d102      	bne.n	8004766 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004760:	2301      	movs	r3, #1
 8004762:	60fb      	str	r3, [r7, #12]
 8004764:	e001      	b.n	800476a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004766:	2300      	movs	r3, #0
 8004768:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800476a:	f001 fbe5 	bl	8005f38 <vPortExitCritical>

	return xReturn;
 800476e:	68fb      	ldr	r3, [r7, #12]
}
 8004770:	4618      	mov	r0, r3
 8004772:	3710      	adds	r7, #16
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004782:	2300      	movs	r3, #0
 8004784:	60fb      	str	r3, [r7, #12]
 8004786:	e014      	b.n	80047b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004788:	4a0e      	ldr	r2, [pc, #56]	; (80047c4 <vQueueAddToRegistry+0x4c>)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10b      	bne.n	80047ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004794:	490b      	ldr	r1, [pc, #44]	; (80047c4 <vQueueAddToRegistry+0x4c>)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	683a      	ldr	r2, [r7, #0]
 800479a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800479e:	4a09      	ldr	r2, [pc, #36]	; (80047c4 <vQueueAddToRegistry+0x4c>)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	00db      	lsls	r3, r3, #3
 80047a4:	4413      	add	r3, r2
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80047aa:	e005      	b.n	80047b8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	3301      	adds	r3, #1
 80047b0:	60fb      	str	r3, [r7, #12]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2b07      	cmp	r3, #7
 80047b6:	d9e7      	bls.n	8004788 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80047b8:	bf00      	nop
 80047ba:	3714      	adds	r7, #20
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	20001a10 	.word	0x20001a10

080047c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b086      	sub	sp, #24
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80047d8:	f001 fb80 	bl	8005edc <vPortEnterCritical>
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047e2:	b25b      	sxtb	r3, r3
 80047e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e8:	d103      	bne.n	80047f2 <vQueueWaitForMessageRestricted+0x2a>
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047f8:	b25b      	sxtb	r3, r3
 80047fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047fe:	d103      	bne.n	8004808 <vQueueWaitForMessageRestricted+0x40>
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004808:	f001 fb96 	bl	8005f38 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004810:	2b00      	cmp	r3, #0
 8004812:	d106      	bne.n	8004822 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	3324      	adds	r3, #36	; 0x24
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	68b9      	ldr	r1, [r7, #8]
 800481c:	4618      	mov	r0, r3
 800481e:	f000 fc2f 	bl	8005080 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004822:	6978      	ldr	r0, [r7, #20]
 8004824:	f7ff ff28 	bl	8004678 <prvUnlockQueue>
	}
 8004828:	bf00      	nop
 800482a:	3718      	adds	r7, #24
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004830:	b580      	push	{r7, lr}
 8004832:	b08e      	sub	sp, #56	; 0x38
 8004834:	af04      	add	r7, sp, #16
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]
 800483c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800483e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004840:	2b00      	cmp	r3, #0
 8004842:	d109      	bne.n	8004858 <xTaskCreateStatic+0x28>
 8004844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004848:	f383 8811 	msr	BASEPRI, r3
 800484c:	f3bf 8f6f 	isb	sy
 8004850:	f3bf 8f4f 	dsb	sy
 8004854:	623b      	str	r3, [r7, #32]
 8004856:	e7fe      	b.n	8004856 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800485a:	2b00      	cmp	r3, #0
 800485c:	d109      	bne.n	8004872 <xTaskCreateStatic+0x42>
 800485e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004862:	f383 8811 	msr	BASEPRI, r3
 8004866:	f3bf 8f6f 	isb	sy
 800486a:	f3bf 8f4f 	dsb	sy
 800486e:	61fb      	str	r3, [r7, #28]
 8004870:	e7fe      	b.n	8004870 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004872:	235c      	movs	r3, #92	; 0x5c
 8004874:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	2b5c      	cmp	r3, #92	; 0x5c
 800487a:	d009      	beq.n	8004890 <xTaskCreateStatic+0x60>
 800487c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004880:	f383 8811 	msr	BASEPRI, r3
 8004884:	f3bf 8f6f 	isb	sy
 8004888:	f3bf 8f4f 	dsb	sy
 800488c:	61bb      	str	r3, [r7, #24]
 800488e:	e7fe      	b.n	800488e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004890:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004894:	2b00      	cmp	r3, #0
 8004896:	d01e      	beq.n	80048d6 <xTaskCreateStatic+0xa6>
 8004898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800489a:	2b00      	cmp	r3, #0
 800489c:	d01b      	beq.n	80048d6 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800489e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80048a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048a6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80048a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048aa:	2202      	movs	r2, #2
 80048ac:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80048b0:	2300      	movs	r3, #0
 80048b2:	9303      	str	r3, [sp, #12]
 80048b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b6:	9302      	str	r3, [sp, #8]
 80048b8:	f107 0314 	add.w	r3, r7, #20
 80048bc:	9301      	str	r3, [sp, #4]
 80048be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c0:	9300      	str	r3, [sp, #0]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	68b9      	ldr	r1, [r7, #8]
 80048c8:	68f8      	ldr	r0, [r7, #12]
 80048ca:	f000 f850 	bl	800496e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80048ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80048d0:	f000 f8dc 	bl	8004a8c <prvAddNewTaskToReadyList>
 80048d4:	e001      	b.n	80048da <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80048d6:	2300      	movs	r3, #0
 80048d8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80048da:	697b      	ldr	r3, [r7, #20]
	}
 80048dc:	4618      	mov	r0, r3
 80048de:	3728      	adds	r7, #40	; 0x28
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b08c      	sub	sp, #48	; 0x30
 80048e8:	af04      	add	r7, sp, #16
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	603b      	str	r3, [r7, #0]
 80048f0:	4613      	mov	r3, r2
 80048f2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80048f4:	88fb      	ldrh	r3, [r7, #6]
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	4618      	mov	r0, r3
 80048fa:	f001 fc09 	bl	8006110 <pvPortMalloc>
 80048fe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00e      	beq.n	8004924 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004906:	205c      	movs	r0, #92	; 0x5c
 8004908:	f001 fc02 	bl	8006110 <pvPortMalloc>
 800490c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d003      	beq.n	800491c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	631a      	str	r2, [r3, #48]	; 0x30
 800491a:	e005      	b.n	8004928 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800491c:	6978      	ldr	r0, [r7, #20]
 800491e:	f001 fcb9 	bl	8006294 <vPortFree>
 8004922:	e001      	b.n	8004928 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004924:	2300      	movs	r3, #0
 8004926:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d017      	beq.n	800495e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004936:	88fa      	ldrh	r2, [r7, #6]
 8004938:	2300      	movs	r3, #0
 800493a:	9303      	str	r3, [sp, #12]
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	9302      	str	r3, [sp, #8]
 8004940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004942:	9301      	str	r3, [sp, #4]
 8004944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004946:	9300      	str	r3, [sp, #0]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	68b9      	ldr	r1, [r7, #8]
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	f000 f80e 	bl	800496e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004952:	69f8      	ldr	r0, [r7, #28]
 8004954:	f000 f89a 	bl	8004a8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004958:	2301      	movs	r3, #1
 800495a:	61bb      	str	r3, [r7, #24]
 800495c:	e002      	b.n	8004964 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800495e:	f04f 33ff 	mov.w	r3, #4294967295
 8004962:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004964:	69bb      	ldr	r3, [r7, #24]
	}
 8004966:	4618      	mov	r0, r3
 8004968:	3720      	adds	r7, #32
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800496e:	b580      	push	{r7, lr}
 8004970:	b088      	sub	sp, #32
 8004972:	af00      	add	r7, sp, #0
 8004974:	60f8      	str	r0, [r7, #12]
 8004976:	60b9      	str	r1, [r7, #8]
 8004978:	607a      	str	r2, [r7, #4]
 800497a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800497c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	461a      	mov	r2, r3
 8004986:	21a5      	movs	r1, #165	; 0xa5
 8004988:	f001 fdc7 	bl	800651a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800498c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004996:	3b01      	subs	r3, #1
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	4413      	add	r3, r2
 800499c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	f023 0307 	bic.w	r3, r3, #7
 80049a4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	f003 0307 	and.w	r3, r3, #7
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d009      	beq.n	80049c4 <prvInitialiseNewTask+0x56>
 80049b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b4:	f383 8811 	msr	BASEPRI, r3
 80049b8:	f3bf 8f6f 	isb	sy
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	617b      	str	r3, [r7, #20]
 80049c2:	e7fe      	b.n	80049c2 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d01f      	beq.n	8004a0a <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80049ca:	2300      	movs	r3, #0
 80049cc:	61fb      	str	r3, [r7, #28]
 80049ce:	e012      	b.n	80049f6 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80049d0:	68ba      	ldr	r2, [r7, #8]
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	4413      	add	r3, r2
 80049d6:	7819      	ldrb	r1, [r3, #0]
 80049d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	4413      	add	r3, r2
 80049de:	3334      	adds	r3, #52	; 0x34
 80049e0:	460a      	mov	r2, r1
 80049e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80049e4:	68ba      	ldr	r2, [r7, #8]
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	4413      	add	r3, r2
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d006      	beq.n	80049fe <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	3301      	adds	r3, #1
 80049f4:	61fb      	str	r3, [r7, #28]
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	2b0f      	cmp	r3, #15
 80049fa:	d9e9      	bls.n	80049d0 <prvInitialiseNewTask+0x62>
 80049fc:	e000      	b.n	8004a00 <prvInitialiseNewTask+0x92>
			{
				break;
 80049fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a08:	e003      	b.n	8004a12 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a14:	2b37      	cmp	r3, #55	; 0x37
 8004a16:	d901      	bls.n	8004a1c <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004a18:	2337      	movs	r3, #55	; 0x37
 8004a1a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a20:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a26:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a30:	3304      	adds	r3, #4
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7ff f994 	bl	8003d60 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3a:	3318      	adds	r3, #24
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f7ff f98f 	bl	8003d60 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a46:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a50:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a56:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004a66:	683a      	ldr	r2, [r7, #0]
 8004a68:	68f9      	ldr	r1, [r7, #12]
 8004a6a:	69b8      	ldr	r0, [r7, #24]
 8004a6c:	f001 f90c 	bl	8005c88 <pxPortInitialiseStack>
 8004a70:	4602      	mov	r2, r0
 8004a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a74:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d002      	beq.n	8004a82 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a82:	bf00      	nop
 8004a84:	3720      	adds	r7, #32
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
	...

08004a8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004a94:	f001 fa22 	bl	8005edc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004a98:	4b2d      	ldr	r3, [pc, #180]	; (8004b50 <prvAddNewTaskToReadyList+0xc4>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	4a2c      	ldr	r2, [pc, #176]	; (8004b50 <prvAddNewTaskToReadyList+0xc4>)
 8004aa0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004aa2:	4b2c      	ldr	r3, [pc, #176]	; (8004b54 <prvAddNewTaskToReadyList+0xc8>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d109      	bne.n	8004abe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004aaa:	4a2a      	ldr	r2, [pc, #168]	; (8004b54 <prvAddNewTaskToReadyList+0xc8>)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004ab0:	4b27      	ldr	r3, [pc, #156]	; (8004b50 <prvAddNewTaskToReadyList+0xc4>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d110      	bne.n	8004ada <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004ab8:	f000 fc08 	bl	80052cc <prvInitialiseTaskLists>
 8004abc:	e00d      	b.n	8004ada <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004abe:	4b26      	ldr	r3, [pc, #152]	; (8004b58 <prvAddNewTaskToReadyList+0xcc>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d109      	bne.n	8004ada <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004ac6:	4b23      	ldr	r3, [pc, #140]	; (8004b54 <prvAddNewTaskToReadyList+0xc8>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d802      	bhi.n	8004ada <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004ad4:	4a1f      	ldr	r2, [pc, #124]	; (8004b54 <prvAddNewTaskToReadyList+0xc8>)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004ada:	4b20      	ldr	r3, [pc, #128]	; (8004b5c <prvAddNewTaskToReadyList+0xd0>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	4a1e      	ldr	r2, [pc, #120]	; (8004b5c <prvAddNewTaskToReadyList+0xd0>)
 8004ae2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004ae4:	4b1d      	ldr	r3, [pc, #116]	; (8004b5c <prvAddNewTaskToReadyList+0xd0>)
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004af0:	4b1b      	ldr	r3, [pc, #108]	; (8004b60 <prvAddNewTaskToReadyList+0xd4>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d903      	bls.n	8004b00 <prvAddNewTaskToReadyList+0x74>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afc:	4a18      	ldr	r2, [pc, #96]	; (8004b60 <prvAddNewTaskToReadyList+0xd4>)
 8004afe:	6013      	str	r3, [r2, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b04:	4613      	mov	r3, r2
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	4413      	add	r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	4a15      	ldr	r2, [pc, #84]	; (8004b64 <prvAddNewTaskToReadyList+0xd8>)
 8004b0e:	441a      	add	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	3304      	adds	r3, #4
 8004b14:	4619      	mov	r1, r3
 8004b16:	4610      	mov	r0, r2
 8004b18:	f7ff f92f 	bl	8003d7a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004b1c:	f001 fa0c 	bl	8005f38 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004b20:	4b0d      	ldr	r3, [pc, #52]	; (8004b58 <prvAddNewTaskToReadyList+0xcc>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00e      	beq.n	8004b46 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004b28:	4b0a      	ldr	r3, [pc, #40]	; (8004b54 <prvAddNewTaskToReadyList+0xc8>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d207      	bcs.n	8004b46 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004b36:	4b0c      	ldr	r3, [pc, #48]	; (8004b68 <prvAddNewTaskToReadyList+0xdc>)
 8004b38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b3c:	601a      	str	r2, [r3, #0]
 8004b3e:	f3bf 8f4f 	dsb	sy
 8004b42:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b46:	bf00      	nop
 8004b48:	3708      	adds	r7, #8
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	20000bbc 	.word	0x20000bbc
 8004b54:	200006e8 	.word	0x200006e8
 8004b58:	20000bc8 	.word	0x20000bc8
 8004b5c:	20000bd8 	.word	0x20000bd8
 8004b60:	20000bc4 	.word	0x20000bc4
 8004b64:	200006ec 	.word	0x200006ec
 8004b68:	e000ed04 	.word	0xe000ed04

08004b6c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004b74:	2300      	movs	r3, #0
 8004b76:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d016      	beq.n	8004bac <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004b7e:	4b13      	ldr	r3, [pc, #76]	; (8004bcc <vTaskDelay+0x60>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d009      	beq.n	8004b9a <vTaskDelay+0x2e>
 8004b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8a:	f383 8811 	msr	BASEPRI, r3
 8004b8e:	f3bf 8f6f 	isb	sy
 8004b92:	f3bf 8f4f 	dsb	sy
 8004b96:	60bb      	str	r3, [r7, #8]
 8004b98:	e7fe      	b.n	8004b98 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004b9a:	f000 f87f 	bl	8004c9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 fcd7 	bl	8005554 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004ba6:	f000 f887 	bl	8004cb8 <xTaskResumeAll>
 8004baa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d107      	bne.n	8004bc2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004bb2:	4b07      	ldr	r3, [pc, #28]	; (8004bd0 <vTaskDelay+0x64>)
 8004bb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bb8:	601a      	str	r2, [r3, #0]
 8004bba:	f3bf 8f4f 	dsb	sy
 8004bbe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004bc2:	bf00      	nop
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	20000be4 	.word	0x20000be4
 8004bd0:	e000ed04 	.word	0xe000ed04

08004bd4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b08a      	sub	sp, #40	; 0x28
 8004bd8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004bde:	2300      	movs	r3, #0
 8004be0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004be2:	463a      	mov	r2, r7
 8004be4:	1d39      	adds	r1, r7, #4
 8004be6:	f107 0308 	add.w	r3, r7, #8
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7ff f864 	bl	8003cb8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004bf0:	6839      	ldr	r1, [r7, #0]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68ba      	ldr	r2, [r7, #8]
 8004bf6:	9202      	str	r2, [sp, #8]
 8004bf8:	9301      	str	r3, [sp, #4]
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	2300      	movs	r3, #0
 8004c00:	460a      	mov	r2, r1
 8004c02:	4920      	ldr	r1, [pc, #128]	; (8004c84 <vTaskStartScheduler+0xb0>)
 8004c04:	4820      	ldr	r0, [pc, #128]	; (8004c88 <vTaskStartScheduler+0xb4>)
 8004c06:	f7ff fe13 	bl	8004830 <xTaskCreateStatic>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	4b1f      	ldr	r3, [pc, #124]	; (8004c8c <vTaskStartScheduler+0xb8>)
 8004c0e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004c10:	4b1e      	ldr	r3, [pc, #120]	; (8004c8c <vTaskStartScheduler+0xb8>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d002      	beq.n	8004c1e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	617b      	str	r3, [r7, #20]
 8004c1c:	e001      	b.n	8004c22 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d102      	bne.n	8004c2e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004c28:	f000 fce8 	bl	80055fc <xTimerCreateTimerTask>
 8004c2c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d115      	bne.n	8004c60 <vTaskStartScheduler+0x8c>
 8004c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c38:	f383 8811 	msr	BASEPRI, r3
 8004c3c:	f3bf 8f6f 	isb	sy
 8004c40:	f3bf 8f4f 	dsb	sy
 8004c44:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004c46:	4b12      	ldr	r3, [pc, #72]	; (8004c90 <vTaskStartScheduler+0xbc>)
 8004c48:	f04f 32ff 	mov.w	r2, #4294967295
 8004c4c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004c4e:	4b11      	ldr	r3, [pc, #68]	; (8004c94 <vTaskStartScheduler+0xc0>)
 8004c50:	2201      	movs	r2, #1
 8004c52:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004c54:	4b10      	ldr	r3, [pc, #64]	; (8004c98 <vTaskStartScheduler+0xc4>)
 8004c56:	2200      	movs	r2, #0
 8004c58:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004c5a:	f001 f8a1 	bl	8005da0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004c5e:	e00d      	b.n	8004c7c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c66:	d109      	bne.n	8004c7c <vTaskStartScheduler+0xa8>
 8004c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6c:	f383 8811 	msr	BASEPRI, r3
 8004c70:	f3bf 8f6f 	isb	sy
 8004c74:	f3bf 8f4f 	dsb	sy
 8004c78:	60fb      	str	r3, [r7, #12]
 8004c7a:	e7fe      	b.n	8004c7a <vTaskStartScheduler+0xa6>
}
 8004c7c:	bf00      	nop
 8004c7e:	3718      	adds	r7, #24
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	0800656c 	.word	0x0800656c
 8004c88:	0800529d 	.word	0x0800529d
 8004c8c:	20000be0 	.word	0x20000be0
 8004c90:	20000bdc 	.word	0x20000bdc
 8004c94:	20000bc8 	.word	0x20000bc8
 8004c98:	20000bc0 	.word	0x20000bc0

08004c9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004ca0:	4b04      	ldr	r3, [pc, #16]	; (8004cb4 <vTaskSuspendAll+0x18>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	4a03      	ldr	r2, [pc, #12]	; (8004cb4 <vTaskSuspendAll+0x18>)
 8004ca8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004caa:	bf00      	nop
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr
 8004cb4:	20000be4 	.word	0x20000be4

08004cb8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004cc6:	4b41      	ldr	r3, [pc, #260]	; (8004dcc <xTaskResumeAll+0x114>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d109      	bne.n	8004ce2 <xTaskResumeAll+0x2a>
 8004cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd2:	f383 8811 	msr	BASEPRI, r3
 8004cd6:	f3bf 8f6f 	isb	sy
 8004cda:	f3bf 8f4f 	dsb	sy
 8004cde:	603b      	str	r3, [r7, #0]
 8004ce0:	e7fe      	b.n	8004ce0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004ce2:	f001 f8fb 	bl	8005edc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004ce6:	4b39      	ldr	r3, [pc, #228]	; (8004dcc <xTaskResumeAll+0x114>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	3b01      	subs	r3, #1
 8004cec:	4a37      	ldr	r2, [pc, #220]	; (8004dcc <xTaskResumeAll+0x114>)
 8004cee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cf0:	4b36      	ldr	r3, [pc, #216]	; (8004dcc <xTaskResumeAll+0x114>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d162      	bne.n	8004dbe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004cf8:	4b35      	ldr	r3, [pc, #212]	; (8004dd0 <xTaskResumeAll+0x118>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d05e      	beq.n	8004dbe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d00:	e02f      	b.n	8004d62 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d02:	4b34      	ldr	r3, [pc, #208]	; (8004dd4 <xTaskResumeAll+0x11c>)
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	3318      	adds	r3, #24
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7ff f890 	bl	8003e34 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	3304      	adds	r3, #4
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7ff f88b 	bl	8003e34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d22:	4b2d      	ldr	r3, [pc, #180]	; (8004dd8 <xTaskResumeAll+0x120>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d903      	bls.n	8004d32 <xTaskResumeAll+0x7a>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2e:	4a2a      	ldr	r2, [pc, #168]	; (8004dd8 <xTaskResumeAll+0x120>)
 8004d30:	6013      	str	r3, [r2, #0]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d36:	4613      	mov	r3, r2
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	4413      	add	r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	4a27      	ldr	r2, [pc, #156]	; (8004ddc <xTaskResumeAll+0x124>)
 8004d40:	441a      	add	r2, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	3304      	adds	r3, #4
 8004d46:	4619      	mov	r1, r3
 8004d48:	4610      	mov	r0, r2
 8004d4a:	f7ff f816 	bl	8003d7a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d52:	4b23      	ldr	r3, [pc, #140]	; (8004de0 <xTaskResumeAll+0x128>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d302      	bcc.n	8004d62 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004d5c:	4b21      	ldr	r3, [pc, #132]	; (8004de4 <xTaskResumeAll+0x12c>)
 8004d5e:	2201      	movs	r2, #1
 8004d60:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d62:	4b1c      	ldr	r3, [pc, #112]	; (8004dd4 <xTaskResumeAll+0x11c>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1cb      	bne.n	8004d02 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d001      	beq.n	8004d74 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004d70:	f000 fb46 	bl	8005400 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004d74:	4b1c      	ldr	r3, [pc, #112]	; (8004de8 <xTaskResumeAll+0x130>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d010      	beq.n	8004da2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004d80:	f000 f846 	bl	8004e10 <xTaskIncrementTick>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d002      	beq.n	8004d90 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004d8a:	4b16      	ldr	r3, [pc, #88]	; (8004de4 <xTaskResumeAll+0x12c>)
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	3b01      	subs	r3, #1
 8004d94:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1f1      	bne.n	8004d80 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004d9c:	4b12      	ldr	r3, [pc, #72]	; (8004de8 <xTaskResumeAll+0x130>)
 8004d9e:	2200      	movs	r2, #0
 8004da0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004da2:	4b10      	ldr	r3, [pc, #64]	; (8004de4 <xTaskResumeAll+0x12c>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d009      	beq.n	8004dbe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004daa:	2301      	movs	r3, #1
 8004dac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004dae:	4b0f      	ldr	r3, [pc, #60]	; (8004dec <xTaskResumeAll+0x134>)
 8004db0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004db4:	601a      	str	r2, [r3, #0]
 8004db6:	f3bf 8f4f 	dsb	sy
 8004dba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004dbe:	f001 f8bb 	bl	8005f38 <vPortExitCritical>

	return xAlreadyYielded;
 8004dc2:	68bb      	ldr	r3, [r7, #8]
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3710      	adds	r7, #16
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	20000be4 	.word	0x20000be4
 8004dd0:	20000bbc 	.word	0x20000bbc
 8004dd4:	20000b7c 	.word	0x20000b7c
 8004dd8:	20000bc4 	.word	0x20000bc4
 8004ddc:	200006ec 	.word	0x200006ec
 8004de0:	200006e8 	.word	0x200006e8
 8004de4:	20000bd0 	.word	0x20000bd0
 8004de8:	20000bcc 	.word	0x20000bcc
 8004dec:	e000ed04 	.word	0xe000ed04

08004df0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004df6:	4b05      	ldr	r3, [pc, #20]	; (8004e0c <xTaskGetTickCount+0x1c>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004dfc:	687b      	ldr	r3, [r7, #4]
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	370c      	adds	r7, #12
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	20000bc0 	.word	0x20000bc0

08004e10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b086      	sub	sp, #24
 8004e14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004e16:	2300      	movs	r3, #0
 8004e18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e1a:	4b4e      	ldr	r3, [pc, #312]	; (8004f54 <xTaskIncrementTick+0x144>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	f040 8088 	bne.w	8004f34 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004e24:	4b4c      	ldr	r3, [pc, #304]	; (8004f58 <xTaskIncrementTick+0x148>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	3301      	adds	r3, #1
 8004e2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004e2c:	4a4a      	ldr	r2, [pc, #296]	; (8004f58 <xTaskIncrementTick+0x148>)
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d11f      	bne.n	8004e78 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004e38:	4b48      	ldr	r3, [pc, #288]	; (8004f5c <xTaskIncrementTick+0x14c>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d009      	beq.n	8004e56 <xTaskIncrementTick+0x46>
 8004e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e46:	f383 8811 	msr	BASEPRI, r3
 8004e4a:	f3bf 8f6f 	isb	sy
 8004e4e:	f3bf 8f4f 	dsb	sy
 8004e52:	603b      	str	r3, [r7, #0]
 8004e54:	e7fe      	b.n	8004e54 <xTaskIncrementTick+0x44>
 8004e56:	4b41      	ldr	r3, [pc, #260]	; (8004f5c <xTaskIncrementTick+0x14c>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	60fb      	str	r3, [r7, #12]
 8004e5c:	4b40      	ldr	r3, [pc, #256]	; (8004f60 <xTaskIncrementTick+0x150>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a3e      	ldr	r2, [pc, #248]	; (8004f5c <xTaskIncrementTick+0x14c>)
 8004e62:	6013      	str	r3, [r2, #0]
 8004e64:	4a3e      	ldr	r2, [pc, #248]	; (8004f60 <xTaskIncrementTick+0x150>)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6013      	str	r3, [r2, #0]
 8004e6a:	4b3e      	ldr	r3, [pc, #248]	; (8004f64 <xTaskIncrementTick+0x154>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	3301      	adds	r3, #1
 8004e70:	4a3c      	ldr	r2, [pc, #240]	; (8004f64 <xTaskIncrementTick+0x154>)
 8004e72:	6013      	str	r3, [r2, #0]
 8004e74:	f000 fac4 	bl	8005400 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004e78:	4b3b      	ldr	r3, [pc, #236]	; (8004f68 <xTaskIncrementTick+0x158>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d349      	bcc.n	8004f16 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e82:	4b36      	ldr	r3, [pc, #216]	; (8004f5c <xTaskIncrementTick+0x14c>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d104      	bne.n	8004e96 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e8c:	4b36      	ldr	r3, [pc, #216]	; (8004f68 <xTaskIncrementTick+0x158>)
 8004e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8004e92:	601a      	str	r2, [r3, #0]
					break;
 8004e94:	e03f      	b.n	8004f16 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e96:	4b31      	ldr	r3, [pc, #196]	; (8004f5c <xTaskIncrementTick+0x14c>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d203      	bcs.n	8004eb6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004eae:	4a2e      	ldr	r2, [pc, #184]	; (8004f68 <xTaskIncrementTick+0x158>)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004eb4:	e02f      	b.n	8004f16 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	3304      	adds	r3, #4
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f7fe ffba 	bl	8003e34 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d004      	beq.n	8004ed2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	3318      	adds	r3, #24
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f7fe ffb1 	bl	8003e34 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed6:	4b25      	ldr	r3, [pc, #148]	; (8004f6c <xTaskIncrementTick+0x15c>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d903      	bls.n	8004ee6 <xTaskIncrementTick+0xd6>
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee2:	4a22      	ldr	r2, [pc, #136]	; (8004f6c <xTaskIncrementTick+0x15c>)
 8004ee4:	6013      	str	r3, [r2, #0]
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eea:	4613      	mov	r3, r2
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	4413      	add	r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	4a1f      	ldr	r2, [pc, #124]	; (8004f70 <xTaskIncrementTick+0x160>)
 8004ef4:	441a      	add	r2, r3
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	3304      	adds	r3, #4
 8004efa:	4619      	mov	r1, r3
 8004efc:	4610      	mov	r0, r2
 8004efe:	f7fe ff3c 	bl	8003d7a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f06:	4b1b      	ldr	r3, [pc, #108]	; (8004f74 <xTaskIncrementTick+0x164>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d3b8      	bcc.n	8004e82 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004f10:	2301      	movs	r3, #1
 8004f12:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f14:	e7b5      	b.n	8004e82 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004f16:	4b17      	ldr	r3, [pc, #92]	; (8004f74 <xTaskIncrementTick+0x164>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f1c:	4914      	ldr	r1, [pc, #80]	; (8004f70 <xTaskIncrementTick+0x160>)
 8004f1e:	4613      	mov	r3, r2
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	4413      	add	r3, r2
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	440b      	add	r3, r1
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d907      	bls.n	8004f3e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	617b      	str	r3, [r7, #20]
 8004f32:	e004      	b.n	8004f3e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004f34:	4b10      	ldr	r3, [pc, #64]	; (8004f78 <xTaskIncrementTick+0x168>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	3301      	adds	r3, #1
 8004f3a:	4a0f      	ldr	r2, [pc, #60]	; (8004f78 <xTaskIncrementTick+0x168>)
 8004f3c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004f3e:	4b0f      	ldr	r3, [pc, #60]	; (8004f7c <xTaskIncrementTick+0x16c>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d001      	beq.n	8004f4a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8004f46:	2301      	movs	r3, #1
 8004f48:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004f4a:	697b      	ldr	r3, [r7, #20]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3718      	adds	r7, #24
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	20000be4 	.word	0x20000be4
 8004f58:	20000bc0 	.word	0x20000bc0
 8004f5c:	20000b74 	.word	0x20000b74
 8004f60:	20000b78 	.word	0x20000b78
 8004f64:	20000bd4 	.word	0x20000bd4
 8004f68:	20000bdc 	.word	0x20000bdc
 8004f6c:	20000bc4 	.word	0x20000bc4
 8004f70:	200006ec 	.word	0x200006ec
 8004f74:	200006e8 	.word	0x200006e8
 8004f78:	20000bcc 	.word	0x20000bcc
 8004f7c:	20000bd0 	.word	0x20000bd0

08004f80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004f86:	4b27      	ldr	r3, [pc, #156]	; (8005024 <vTaskSwitchContext+0xa4>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d003      	beq.n	8004f96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004f8e:	4b26      	ldr	r3, [pc, #152]	; (8005028 <vTaskSwitchContext+0xa8>)
 8004f90:	2201      	movs	r2, #1
 8004f92:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004f94:	e040      	b.n	8005018 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004f96:	4b24      	ldr	r3, [pc, #144]	; (8005028 <vTaskSwitchContext+0xa8>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f9c:	4b23      	ldr	r3, [pc, #140]	; (800502c <vTaskSwitchContext+0xac>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	60fb      	str	r3, [r7, #12]
 8004fa2:	e00f      	b.n	8004fc4 <vTaskSwitchContext+0x44>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d109      	bne.n	8004fbe <vTaskSwitchContext+0x3e>
 8004faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fae:	f383 8811 	msr	BASEPRI, r3
 8004fb2:	f3bf 8f6f 	isb	sy
 8004fb6:	f3bf 8f4f 	dsb	sy
 8004fba:	607b      	str	r3, [r7, #4]
 8004fbc:	e7fe      	b.n	8004fbc <vTaskSwitchContext+0x3c>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	60fb      	str	r3, [r7, #12]
 8004fc4:	491a      	ldr	r1, [pc, #104]	; (8005030 <vTaskSwitchContext+0xb0>)
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	4613      	mov	r3, r2
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	4413      	add	r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	440b      	add	r3, r1
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d0e5      	beq.n	8004fa4 <vTaskSwitchContext+0x24>
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	4413      	add	r3, r2
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	4a13      	ldr	r2, [pc, #76]	; (8005030 <vTaskSwitchContext+0xb0>)
 8004fe4:	4413      	add	r3, r2
 8004fe6:	60bb      	str	r3, [r7, #8]
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	685a      	ldr	r2, [r3, #4]
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	605a      	str	r2, [r3, #4]
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	685a      	ldr	r2, [r3, #4]
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	3308      	adds	r3, #8
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d104      	bne.n	8005008 <vTaskSwitchContext+0x88>
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	685a      	ldr	r2, [r3, #4]
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	605a      	str	r2, [r3, #4]
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	4a09      	ldr	r2, [pc, #36]	; (8005034 <vTaskSwitchContext+0xb4>)
 8005010:	6013      	str	r3, [r2, #0]
 8005012:	4a06      	ldr	r2, [pc, #24]	; (800502c <vTaskSwitchContext+0xac>)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6013      	str	r3, [r2, #0]
}
 8005018:	bf00      	nop
 800501a:	3714      	adds	r7, #20
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr
 8005024:	20000be4 	.word	0x20000be4
 8005028:	20000bd0 	.word	0x20000bd0
 800502c:	20000bc4 	.word	0x20000bc4
 8005030:	200006ec 	.word	0x200006ec
 8005034:	200006e8 	.word	0x200006e8

08005038 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d109      	bne.n	800505c <vTaskPlaceOnEventList+0x24>
 8005048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800504c:	f383 8811 	msr	BASEPRI, r3
 8005050:	f3bf 8f6f 	isb	sy
 8005054:	f3bf 8f4f 	dsb	sy
 8005058:	60fb      	str	r3, [r7, #12]
 800505a:	e7fe      	b.n	800505a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800505c:	4b07      	ldr	r3, [pc, #28]	; (800507c <vTaskPlaceOnEventList+0x44>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	3318      	adds	r3, #24
 8005062:	4619      	mov	r1, r3
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f7fe feac 	bl	8003dc2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800506a:	2101      	movs	r1, #1
 800506c:	6838      	ldr	r0, [r7, #0]
 800506e:	f000 fa71 	bl	8005554 <prvAddCurrentTaskToDelayedList>
}
 8005072:	bf00      	nop
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	200006e8 	.word	0x200006e8

08005080 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005080:	b580      	push	{r7, lr}
 8005082:	b086      	sub	sp, #24
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d109      	bne.n	80050a6 <vTaskPlaceOnEventListRestricted+0x26>
 8005092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005096:	f383 8811 	msr	BASEPRI, r3
 800509a:	f3bf 8f6f 	isb	sy
 800509e:	f3bf 8f4f 	dsb	sy
 80050a2:	617b      	str	r3, [r7, #20]
 80050a4:	e7fe      	b.n	80050a4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80050a6:	4b0a      	ldr	r3, [pc, #40]	; (80050d0 <vTaskPlaceOnEventListRestricted+0x50>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	3318      	adds	r3, #24
 80050ac:	4619      	mov	r1, r3
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f7fe fe63 	bl	8003d7a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d002      	beq.n	80050c0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80050ba:	f04f 33ff 	mov.w	r3, #4294967295
 80050be:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80050c0:	6879      	ldr	r1, [r7, #4]
 80050c2:	68b8      	ldr	r0, [r7, #8]
 80050c4:	f000 fa46 	bl	8005554 <prvAddCurrentTaskToDelayedList>
	}
 80050c8:	bf00      	nop
 80050ca:	3718      	adds	r7, #24
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	200006e8 	.word	0x200006e8

080050d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b086      	sub	sp, #24
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d109      	bne.n	80050fe <xTaskRemoveFromEventList+0x2a>
 80050ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ee:	f383 8811 	msr	BASEPRI, r3
 80050f2:	f3bf 8f6f 	isb	sy
 80050f6:	f3bf 8f4f 	dsb	sy
 80050fa:	60fb      	str	r3, [r7, #12]
 80050fc:	e7fe      	b.n	80050fc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	3318      	adds	r3, #24
 8005102:	4618      	mov	r0, r3
 8005104:	f7fe fe96 	bl	8003e34 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005108:	4b1d      	ldr	r3, [pc, #116]	; (8005180 <xTaskRemoveFromEventList+0xac>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d11d      	bne.n	800514c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	3304      	adds	r3, #4
 8005114:	4618      	mov	r0, r3
 8005116:	f7fe fe8d 	bl	8003e34 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800511e:	4b19      	ldr	r3, [pc, #100]	; (8005184 <xTaskRemoveFromEventList+0xb0>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	429a      	cmp	r2, r3
 8005124:	d903      	bls.n	800512e <xTaskRemoveFromEventList+0x5a>
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512a:	4a16      	ldr	r2, [pc, #88]	; (8005184 <xTaskRemoveFromEventList+0xb0>)
 800512c:	6013      	str	r3, [r2, #0]
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005132:	4613      	mov	r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	4413      	add	r3, r2
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	4a13      	ldr	r2, [pc, #76]	; (8005188 <xTaskRemoveFromEventList+0xb4>)
 800513c:	441a      	add	r2, r3
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	3304      	adds	r3, #4
 8005142:	4619      	mov	r1, r3
 8005144:	4610      	mov	r0, r2
 8005146:	f7fe fe18 	bl	8003d7a <vListInsertEnd>
 800514a:	e005      	b.n	8005158 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	3318      	adds	r3, #24
 8005150:	4619      	mov	r1, r3
 8005152:	480e      	ldr	r0, [pc, #56]	; (800518c <xTaskRemoveFromEventList+0xb8>)
 8005154:	f7fe fe11 	bl	8003d7a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800515c:	4b0c      	ldr	r3, [pc, #48]	; (8005190 <xTaskRemoveFromEventList+0xbc>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005162:	429a      	cmp	r2, r3
 8005164:	d905      	bls.n	8005172 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005166:	2301      	movs	r3, #1
 8005168:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800516a:	4b0a      	ldr	r3, [pc, #40]	; (8005194 <xTaskRemoveFromEventList+0xc0>)
 800516c:	2201      	movs	r2, #1
 800516e:	601a      	str	r2, [r3, #0]
 8005170:	e001      	b.n	8005176 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005172:	2300      	movs	r3, #0
 8005174:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005176:	697b      	ldr	r3, [r7, #20]
}
 8005178:	4618      	mov	r0, r3
 800517a:	3718      	adds	r7, #24
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	20000be4 	.word	0x20000be4
 8005184:	20000bc4 	.word	0x20000bc4
 8005188:	200006ec 	.word	0x200006ec
 800518c:	20000b7c 	.word	0x20000b7c
 8005190:	200006e8 	.word	0x200006e8
 8005194:	20000bd0 	.word	0x20000bd0

08005198 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80051a0:	4b06      	ldr	r3, [pc, #24]	; (80051bc <vTaskInternalSetTimeOutState+0x24>)
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80051a8:	4b05      	ldr	r3, [pc, #20]	; (80051c0 <vTaskInternalSetTimeOutState+0x28>)
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	605a      	str	r2, [r3, #4]
}
 80051b0:	bf00      	nop
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr
 80051bc:	20000bd4 	.word	0x20000bd4
 80051c0:	20000bc0 	.word	0x20000bc0

080051c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b088      	sub	sp, #32
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d109      	bne.n	80051e8 <xTaskCheckForTimeOut+0x24>
 80051d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d8:	f383 8811 	msr	BASEPRI, r3
 80051dc:	f3bf 8f6f 	isb	sy
 80051e0:	f3bf 8f4f 	dsb	sy
 80051e4:	613b      	str	r3, [r7, #16]
 80051e6:	e7fe      	b.n	80051e6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d109      	bne.n	8005202 <xTaskCheckForTimeOut+0x3e>
 80051ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f2:	f383 8811 	msr	BASEPRI, r3
 80051f6:	f3bf 8f6f 	isb	sy
 80051fa:	f3bf 8f4f 	dsb	sy
 80051fe:	60fb      	str	r3, [r7, #12]
 8005200:	e7fe      	b.n	8005200 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005202:	f000 fe6b 	bl	8005edc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005206:	4b1d      	ldr	r3, [pc, #116]	; (800527c <xTaskCheckForTimeOut+0xb8>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	69ba      	ldr	r2, [r7, #24]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800521e:	d102      	bne.n	8005226 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005220:	2300      	movs	r3, #0
 8005222:	61fb      	str	r3, [r7, #28]
 8005224:	e023      	b.n	800526e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	4b15      	ldr	r3, [pc, #84]	; (8005280 <xTaskCheckForTimeOut+0xbc>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	429a      	cmp	r2, r3
 8005230:	d007      	beq.n	8005242 <xTaskCheckForTimeOut+0x7e>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	69ba      	ldr	r2, [r7, #24]
 8005238:	429a      	cmp	r2, r3
 800523a:	d302      	bcc.n	8005242 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800523c:	2301      	movs	r3, #1
 800523e:	61fb      	str	r3, [r7, #28]
 8005240:	e015      	b.n	800526e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	429a      	cmp	r2, r3
 800524a:	d20b      	bcs.n	8005264 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	1ad2      	subs	r2, r2, r3
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f7ff ff9d 	bl	8005198 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800525e:	2300      	movs	r3, #0
 8005260:	61fb      	str	r3, [r7, #28]
 8005262:	e004      	b.n	800526e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	2200      	movs	r2, #0
 8005268:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800526a:	2301      	movs	r3, #1
 800526c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800526e:	f000 fe63 	bl	8005f38 <vPortExitCritical>

	return xReturn;
 8005272:	69fb      	ldr	r3, [r7, #28]
}
 8005274:	4618      	mov	r0, r3
 8005276:	3720      	adds	r7, #32
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}
 800527c:	20000bc0 	.word	0x20000bc0
 8005280:	20000bd4 	.word	0x20000bd4

08005284 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005284:	b480      	push	{r7}
 8005286:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005288:	4b03      	ldr	r3, [pc, #12]	; (8005298 <vTaskMissedYield+0x14>)
 800528a:	2201      	movs	r2, #1
 800528c:	601a      	str	r2, [r3, #0]
}
 800528e:	bf00      	nop
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr
 8005298:	20000bd0 	.word	0x20000bd0

0800529c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80052a4:	f000 f852 	bl	800534c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80052a8:	4b06      	ldr	r3, [pc, #24]	; (80052c4 <prvIdleTask+0x28>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d9f9      	bls.n	80052a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80052b0:	4b05      	ldr	r3, [pc, #20]	; (80052c8 <prvIdleTask+0x2c>)
 80052b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052b6:	601a      	str	r2, [r3, #0]
 80052b8:	f3bf 8f4f 	dsb	sy
 80052bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80052c0:	e7f0      	b.n	80052a4 <prvIdleTask+0x8>
 80052c2:	bf00      	nop
 80052c4:	200006ec 	.word	0x200006ec
 80052c8:	e000ed04 	.word	0xe000ed04

080052cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80052d2:	2300      	movs	r3, #0
 80052d4:	607b      	str	r3, [r7, #4]
 80052d6:	e00c      	b.n	80052f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	4613      	mov	r3, r2
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	4413      	add	r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	4a12      	ldr	r2, [pc, #72]	; (800532c <prvInitialiseTaskLists+0x60>)
 80052e4:	4413      	add	r3, r2
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7fe fd1a 	bl	8003d20 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	3301      	adds	r3, #1
 80052f0:	607b      	str	r3, [r7, #4]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2b37      	cmp	r3, #55	; 0x37
 80052f6:	d9ef      	bls.n	80052d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80052f8:	480d      	ldr	r0, [pc, #52]	; (8005330 <prvInitialiseTaskLists+0x64>)
 80052fa:	f7fe fd11 	bl	8003d20 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80052fe:	480d      	ldr	r0, [pc, #52]	; (8005334 <prvInitialiseTaskLists+0x68>)
 8005300:	f7fe fd0e 	bl	8003d20 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005304:	480c      	ldr	r0, [pc, #48]	; (8005338 <prvInitialiseTaskLists+0x6c>)
 8005306:	f7fe fd0b 	bl	8003d20 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800530a:	480c      	ldr	r0, [pc, #48]	; (800533c <prvInitialiseTaskLists+0x70>)
 800530c:	f7fe fd08 	bl	8003d20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005310:	480b      	ldr	r0, [pc, #44]	; (8005340 <prvInitialiseTaskLists+0x74>)
 8005312:	f7fe fd05 	bl	8003d20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005316:	4b0b      	ldr	r3, [pc, #44]	; (8005344 <prvInitialiseTaskLists+0x78>)
 8005318:	4a05      	ldr	r2, [pc, #20]	; (8005330 <prvInitialiseTaskLists+0x64>)
 800531a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800531c:	4b0a      	ldr	r3, [pc, #40]	; (8005348 <prvInitialiseTaskLists+0x7c>)
 800531e:	4a05      	ldr	r2, [pc, #20]	; (8005334 <prvInitialiseTaskLists+0x68>)
 8005320:	601a      	str	r2, [r3, #0]
}
 8005322:	bf00      	nop
 8005324:	3708      	adds	r7, #8
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	200006ec 	.word	0x200006ec
 8005330:	20000b4c 	.word	0x20000b4c
 8005334:	20000b60 	.word	0x20000b60
 8005338:	20000b7c 	.word	0x20000b7c
 800533c:	20000b90 	.word	0x20000b90
 8005340:	20000ba8 	.word	0x20000ba8
 8005344:	20000b74 	.word	0x20000b74
 8005348:	20000b78 	.word	0x20000b78

0800534c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005352:	e019      	b.n	8005388 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005354:	f000 fdc2 	bl	8005edc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005358:	4b0f      	ldr	r3, [pc, #60]	; (8005398 <prvCheckTasksWaitingTermination+0x4c>)
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	3304      	adds	r3, #4
 8005364:	4618      	mov	r0, r3
 8005366:	f7fe fd65 	bl	8003e34 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800536a:	4b0c      	ldr	r3, [pc, #48]	; (800539c <prvCheckTasksWaitingTermination+0x50>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	3b01      	subs	r3, #1
 8005370:	4a0a      	ldr	r2, [pc, #40]	; (800539c <prvCheckTasksWaitingTermination+0x50>)
 8005372:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005374:	4b0a      	ldr	r3, [pc, #40]	; (80053a0 <prvCheckTasksWaitingTermination+0x54>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	3b01      	subs	r3, #1
 800537a:	4a09      	ldr	r2, [pc, #36]	; (80053a0 <prvCheckTasksWaitingTermination+0x54>)
 800537c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800537e:	f000 fddb 	bl	8005f38 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f80e 	bl	80053a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005388:	4b05      	ldr	r3, [pc, #20]	; (80053a0 <prvCheckTasksWaitingTermination+0x54>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1e1      	bne.n	8005354 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005390:	bf00      	nop
 8005392:	3708      	adds	r7, #8
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}
 8005398:	20000b90 	.word	0x20000b90
 800539c:	20000bbc 	.word	0x20000bbc
 80053a0:	20000ba4 	.word	0x20000ba4

080053a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d108      	bne.n	80053c8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ba:	4618      	mov	r0, r3
 80053bc:	f000 ff6a 	bl	8006294 <vPortFree>
				vPortFree( pxTCB );
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 ff67 	bl	8006294 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80053c6:	e017      	b.n	80053f8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d103      	bne.n	80053da <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 ff5e 	bl	8006294 <vPortFree>
	}
 80053d8:	e00e      	b.n	80053f8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d009      	beq.n	80053f8 <prvDeleteTCB+0x54>
 80053e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e8:	f383 8811 	msr	BASEPRI, r3
 80053ec:	f3bf 8f6f 	isb	sy
 80053f0:	f3bf 8f4f 	dsb	sy
 80053f4:	60fb      	str	r3, [r7, #12]
 80053f6:	e7fe      	b.n	80053f6 <prvDeleteTCB+0x52>
	}
 80053f8:	bf00      	nop
 80053fa:	3710      	adds	r7, #16
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005406:	4b0c      	ldr	r3, [pc, #48]	; (8005438 <prvResetNextTaskUnblockTime+0x38>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d104      	bne.n	800541a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005410:	4b0a      	ldr	r3, [pc, #40]	; (800543c <prvResetNextTaskUnblockTime+0x3c>)
 8005412:	f04f 32ff 	mov.w	r2, #4294967295
 8005416:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005418:	e008      	b.n	800542c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800541a:	4b07      	ldr	r3, [pc, #28]	; (8005438 <prvResetNextTaskUnblockTime+0x38>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	4a04      	ldr	r2, [pc, #16]	; (800543c <prvResetNextTaskUnblockTime+0x3c>)
 800542a:	6013      	str	r3, [r2, #0]
}
 800542c:	bf00      	nop
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr
 8005438:	20000b74 	.word	0x20000b74
 800543c:	20000bdc 	.word	0x20000bdc

08005440 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005446:	4b0b      	ldr	r3, [pc, #44]	; (8005474 <xTaskGetSchedulerState+0x34>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d102      	bne.n	8005454 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800544e:	2301      	movs	r3, #1
 8005450:	607b      	str	r3, [r7, #4]
 8005452:	e008      	b.n	8005466 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005454:	4b08      	ldr	r3, [pc, #32]	; (8005478 <xTaskGetSchedulerState+0x38>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d102      	bne.n	8005462 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800545c:	2302      	movs	r3, #2
 800545e:	607b      	str	r3, [r7, #4]
 8005460:	e001      	b.n	8005466 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005462:	2300      	movs	r3, #0
 8005464:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005466:	687b      	ldr	r3, [r7, #4]
	}
 8005468:	4618      	mov	r0, r3
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr
 8005474:	20000bc8 	.word	0x20000bc8
 8005478:	20000be4 	.word	0x20000be4

0800547c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800547c:	b580      	push	{r7, lr}
 800547e:	b086      	sub	sp, #24
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005488:	2300      	movs	r3, #0
 800548a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d054      	beq.n	800553c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005492:	4b2d      	ldr	r3, [pc, #180]	; (8005548 <xTaskPriorityDisinherit+0xcc>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	693a      	ldr	r2, [r7, #16]
 8005498:	429a      	cmp	r2, r3
 800549a:	d009      	beq.n	80054b0 <xTaskPriorityDisinherit+0x34>
 800549c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a0:	f383 8811 	msr	BASEPRI, r3
 80054a4:	f3bf 8f6f 	isb	sy
 80054a8:	f3bf 8f4f 	dsb	sy
 80054ac:	60fb      	str	r3, [r7, #12]
 80054ae:	e7fe      	b.n	80054ae <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d109      	bne.n	80054cc <xTaskPriorityDisinherit+0x50>
 80054b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054bc:	f383 8811 	msr	BASEPRI, r3
 80054c0:	f3bf 8f6f 	isb	sy
 80054c4:	f3bf 8f4f 	dsb	sy
 80054c8:	60bb      	str	r3, [r7, #8]
 80054ca:	e7fe      	b.n	80054ca <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054d0:	1e5a      	subs	r2, r3, #1
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054de:	429a      	cmp	r2, r3
 80054e0:	d02c      	beq.n	800553c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d128      	bne.n	800553c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	3304      	adds	r3, #4
 80054ee:	4618      	mov	r0, r3
 80054f0:	f7fe fca0 	bl	8003e34 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005500:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800550c:	4b0f      	ldr	r3, [pc, #60]	; (800554c <xTaskPriorityDisinherit+0xd0>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	429a      	cmp	r2, r3
 8005512:	d903      	bls.n	800551c <xTaskPriorityDisinherit+0xa0>
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005518:	4a0c      	ldr	r2, [pc, #48]	; (800554c <xTaskPriorityDisinherit+0xd0>)
 800551a:	6013      	str	r3, [r2, #0]
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005520:	4613      	mov	r3, r2
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	4413      	add	r3, r2
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	4a09      	ldr	r2, [pc, #36]	; (8005550 <xTaskPriorityDisinherit+0xd4>)
 800552a:	441a      	add	r2, r3
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	3304      	adds	r3, #4
 8005530:	4619      	mov	r1, r3
 8005532:	4610      	mov	r0, r2
 8005534:	f7fe fc21 	bl	8003d7a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005538:	2301      	movs	r3, #1
 800553a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800553c:	697b      	ldr	r3, [r7, #20]
	}
 800553e:	4618      	mov	r0, r3
 8005540:	3718      	adds	r7, #24
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	200006e8 	.word	0x200006e8
 800554c:	20000bc4 	.word	0x20000bc4
 8005550:	200006ec 	.word	0x200006ec

08005554 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800555e:	4b21      	ldr	r3, [pc, #132]	; (80055e4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005564:	4b20      	ldr	r3, [pc, #128]	; (80055e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	3304      	adds	r3, #4
 800556a:	4618      	mov	r0, r3
 800556c:	f7fe fc62 	bl	8003e34 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005576:	d10a      	bne.n	800558e <prvAddCurrentTaskToDelayedList+0x3a>
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d007      	beq.n	800558e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800557e:	4b1a      	ldr	r3, [pc, #104]	; (80055e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	3304      	adds	r3, #4
 8005584:	4619      	mov	r1, r3
 8005586:	4819      	ldr	r0, [pc, #100]	; (80055ec <prvAddCurrentTaskToDelayedList+0x98>)
 8005588:	f7fe fbf7 	bl	8003d7a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800558c:	e026      	b.n	80055dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4413      	add	r3, r2
 8005594:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005596:	4b14      	ldr	r3, [pc, #80]	; (80055e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68ba      	ldr	r2, [r7, #8]
 800559c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800559e:	68ba      	ldr	r2, [r7, #8]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d209      	bcs.n	80055ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055a6:	4b12      	ldr	r3, [pc, #72]	; (80055f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	4b0f      	ldr	r3, [pc, #60]	; (80055e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	3304      	adds	r3, #4
 80055b0:	4619      	mov	r1, r3
 80055b2:	4610      	mov	r0, r2
 80055b4:	f7fe fc05 	bl	8003dc2 <vListInsert>
}
 80055b8:	e010      	b.n	80055dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055ba:	4b0e      	ldr	r3, [pc, #56]	; (80055f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	4b0a      	ldr	r3, [pc, #40]	; (80055e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	3304      	adds	r3, #4
 80055c4:	4619      	mov	r1, r3
 80055c6:	4610      	mov	r0, r2
 80055c8:	f7fe fbfb 	bl	8003dc2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80055cc:	4b0a      	ldr	r3, [pc, #40]	; (80055f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68ba      	ldr	r2, [r7, #8]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d202      	bcs.n	80055dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80055d6:	4a08      	ldr	r2, [pc, #32]	; (80055f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	6013      	str	r3, [r2, #0]
}
 80055dc:	bf00      	nop
 80055de:	3710      	adds	r7, #16
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	20000bc0 	.word	0x20000bc0
 80055e8:	200006e8 	.word	0x200006e8
 80055ec:	20000ba8 	.word	0x20000ba8
 80055f0:	20000b78 	.word	0x20000b78
 80055f4:	20000b74 	.word	0x20000b74
 80055f8:	20000bdc 	.word	0x20000bdc

080055fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b08a      	sub	sp, #40	; 0x28
 8005600:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005602:	2300      	movs	r3, #0
 8005604:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005606:	f000 faff 	bl	8005c08 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800560a:	4b1c      	ldr	r3, [pc, #112]	; (800567c <xTimerCreateTimerTask+0x80>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d021      	beq.n	8005656 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005612:	2300      	movs	r3, #0
 8005614:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005616:	2300      	movs	r3, #0
 8005618:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800561a:	1d3a      	adds	r2, r7, #4
 800561c:	f107 0108 	add.w	r1, r7, #8
 8005620:	f107 030c 	add.w	r3, r7, #12
 8005624:	4618      	mov	r0, r3
 8005626:	f7fe fb61 	bl	8003cec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800562a:	6879      	ldr	r1, [r7, #4]
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	9202      	str	r2, [sp, #8]
 8005632:	9301      	str	r3, [sp, #4]
 8005634:	2302      	movs	r3, #2
 8005636:	9300      	str	r3, [sp, #0]
 8005638:	2300      	movs	r3, #0
 800563a:	460a      	mov	r2, r1
 800563c:	4910      	ldr	r1, [pc, #64]	; (8005680 <xTimerCreateTimerTask+0x84>)
 800563e:	4811      	ldr	r0, [pc, #68]	; (8005684 <xTimerCreateTimerTask+0x88>)
 8005640:	f7ff f8f6 	bl	8004830 <xTaskCreateStatic>
 8005644:	4602      	mov	r2, r0
 8005646:	4b10      	ldr	r3, [pc, #64]	; (8005688 <xTimerCreateTimerTask+0x8c>)
 8005648:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800564a:	4b0f      	ldr	r3, [pc, #60]	; (8005688 <xTimerCreateTimerTask+0x8c>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d001      	beq.n	8005656 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005652:	2301      	movs	r3, #1
 8005654:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d109      	bne.n	8005670 <xTimerCreateTimerTask+0x74>
 800565c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005660:	f383 8811 	msr	BASEPRI, r3
 8005664:	f3bf 8f6f 	isb	sy
 8005668:	f3bf 8f4f 	dsb	sy
 800566c:	613b      	str	r3, [r7, #16]
 800566e:	e7fe      	b.n	800566e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005670:	697b      	ldr	r3, [r7, #20]
}
 8005672:	4618      	mov	r0, r3
 8005674:	3718      	adds	r7, #24
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	20000c18 	.word	0x20000c18
 8005680:	08006574 	.word	0x08006574
 8005684:	080057bd 	.word	0x080057bd
 8005688:	20000c1c 	.word	0x20000c1c

0800568c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b08a      	sub	sp, #40	; 0x28
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	607a      	str	r2, [r7, #4]
 8005698:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800569a:	2300      	movs	r3, #0
 800569c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d109      	bne.n	80056b8 <xTimerGenericCommand+0x2c>
 80056a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a8:	f383 8811 	msr	BASEPRI, r3
 80056ac:	f3bf 8f6f 	isb	sy
 80056b0:	f3bf 8f4f 	dsb	sy
 80056b4:	623b      	str	r3, [r7, #32]
 80056b6:	e7fe      	b.n	80056b6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80056b8:	4b19      	ldr	r3, [pc, #100]	; (8005720 <xTimerGenericCommand+0x94>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d02a      	beq.n	8005716 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	2b05      	cmp	r3, #5
 80056d0:	dc18      	bgt.n	8005704 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80056d2:	f7ff feb5 	bl	8005440 <xTaskGetSchedulerState>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b02      	cmp	r3, #2
 80056da:	d109      	bne.n	80056f0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80056dc:	4b10      	ldr	r3, [pc, #64]	; (8005720 <xTimerGenericCommand+0x94>)
 80056de:	6818      	ldr	r0, [r3, #0]
 80056e0:	f107 0110 	add.w	r1, r7, #16
 80056e4:	2300      	movs	r3, #0
 80056e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056e8:	f7fe fccc 	bl	8004084 <xQueueGenericSend>
 80056ec:	6278      	str	r0, [r7, #36]	; 0x24
 80056ee:	e012      	b.n	8005716 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80056f0:	4b0b      	ldr	r3, [pc, #44]	; (8005720 <xTimerGenericCommand+0x94>)
 80056f2:	6818      	ldr	r0, [r3, #0]
 80056f4:	f107 0110 	add.w	r1, r7, #16
 80056f8:	2300      	movs	r3, #0
 80056fa:	2200      	movs	r2, #0
 80056fc:	f7fe fcc2 	bl	8004084 <xQueueGenericSend>
 8005700:	6278      	str	r0, [r7, #36]	; 0x24
 8005702:	e008      	b.n	8005716 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005704:	4b06      	ldr	r3, [pc, #24]	; (8005720 <xTimerGenericCommand+0x94>)
 8005706:	6818      	ldr	r0, [r3, #0]
 8005708:	f107 0110 	add.w	r1, r7, #16
 800570c:	2300      	movs	r3, #0
 800570e:	683a      	ldr	r2, [r7, #0]
 8005710:	f7fe fdb2 	bl	8004278 <xQueueGenericSendFromISR>
 8005714:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005718:	4618      	mov	r0, r3
 800571a:	3728      	adds	r7, #40	; 0x28
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	20000c18 	.word	0x20000c18

08005724 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b088      	sub	sp, #32
 8005728:	af02      	add	r7, sp, #8
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800572e:	4b22      	ldr	r3, [pc, #136]	; (80057b8 <prvProcessExpiredTimer+0x94>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	3304      	adds	r3, #4
 800573c:	4618      	mov	r0, r3
 800573e:	f7fe fb79 	bl	8003e34 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005748:	f003 0304 	and.w	r3, r3, #4
 800574c:	2b00      	cmp	r3, #0
 800574e:	d021      	beq.n	8005794 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	699a      	ldr	r2, [r3, #24]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	18d1      	adds	r1, r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	683a      	ldr	r2, [r7, #0]
 800575c:	6978      	ldr	r0, [r7, #20]
 800575e:	f000 f8d1 	bl	8005904 <prvInsertTimerInActiveList>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d01e      	beq.n	80057a6 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005768:	2300      	movs	r3, #0
 800576a:	9300      	str	r3, [sp, #0]
 800576c:	2300      	movs	r3, #0
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	2100      	movs	r1, #0
 8005772:	6978      	ldr	r0, [r7, #20]
 8005774:	f7ff ff8a 	bl	800568c <xTimerGenericCommand>
 8005778:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d112      	bne.n	80057a6 <prvProcessExpiredTimer+0x82>
 8005780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005784:	f383 8811 	msr	BASEPRI, r3
 8005788:	f3bf 8f6f 	isb	sy
 800578c:	f3bf 8f4f 	dsb	sy
 8005790:	60fb      	str	r3, [r7, #12]
 8005792:	e7fe      	b.n	8005792 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800579a:	f023 0301 	bic.w	r3, r3, #1
 800579e:	b2da      	uxtb	r2, r3
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	6a1b      	ldr	r3, [r3, #32]
 80057aa:	6978      	ldr	r0, [r7, #20]
 80057ac:	4798      	blx	r3
}
 80057ae:	bf00      	nop
 80057b0:	3718      	adds	r7, #24
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	20000c10 	.word	0x20000c10

080057bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80057c4:	f107 0308 	add.w	r3, r7, #8
 80057c8:	4618      	mov	r0, r3
 80057ca:	f000 f857 	bl	800587c <prvGetNextExpireTime>
 80057ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	4619      	mov	r1, r3
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	f000 f803 	bl	80057e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80057da:	f000 f8d5 	bl	8005988 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80057de:	e7f1      	b.n	80057c4 <prvTimerTask+0x8>

080057e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80057ea:	f7ff fa57 	bl	8004c9c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80057ee:	f107 0308 	add.w	r3, r7, #8
 80057f2:	4618      	mov	r0, r3
 80057f4:	f000 f866 	bl	80058c4 <prvSampleTimeNow>
 80057f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d130      	bne.n	8005862 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d10a      	bne.n	800581c <prvProcessTimerOrBlockTask+0x3c>
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	429a      	cmp	r2, r3
 800580c:	d806      	bhi.n	800581c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800580e:	f7ff fa53 	bl	8004cb8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005812:	68f9      	ldr	r1, [r7, #12]
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f7ff ff85 	bl	8005724 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800581a:	e024      	b.n	8005866 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d008      	beq.n	8005834 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005822:	4b13      	ldr	r3, [pc, #76]	; (8005870 <prvProcessTimerOrBlockTask+0x90>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d101      	bne.n	8005830 <prvProcessTimerOrBlockTask+0x50>
 800582c:	2301      	movs	r3, #1
 800582e:	e000      	b.n	8005832 <prvProcessTimerOrBlockTask+0x52>
 8005830:	2300      	movs	r3, #0
 8005832:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005834:	4b0f      	ldr	r3, [pc, #60]	; (8005874 <prvProcessTimerOrBlockTask+0x94>)
 8005836:	6818      	ldr	r0, [r3, #0]
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	683a      	ldr	r2, [r7, #0]
 8005840:	4619      	mov	r1, r3
 8005842:	f7fe ffc1 	bl	80047c8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005846:	f7ff fa37 	bl	8004cb8 <xTaskResumeAll>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d10a      	bne.n	8005866 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005850:	4b09      	ldr	r3, [pc, #36]	; (8005878 <prvProcessTimerOrBlockTask+0x98>)
 8005852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005856:	601a      	str	r2, [r3, #0]
 8005858:	f3bf 8f4f 	dsb	sy
 800585c:	f3bf 8f6f 	isb	sy
}
 8005860:	e001      	b.n	8005866 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005862:	f7ff fa29 	bl	8004cb8 <xTaskResumeAll>
}
 8005866:	bf00      	nop
 8005868:	3710      	adds	r7, #16
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	20000c14 	.word	0x20000c14
 8005874:	20000c18 	.word	0x20000c18
 8005878:	e000ed04 	.word	0xe000ed04

0800587c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005884:	4b0e      	ldr	r3, [pc, #56]	; (80058c0 <prvGetNextExpireTime+0x44>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d101      	bne.n	8005892 <prvGetNextExpireTime+0x16>
 800588e:	2201      	movs	r2, #1
 8005890:	e000      	b.n	8005894 <prvGetNextExpireTime+0x18>
 8005892:	2200      	movs	r2, #0
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d105      	bne.n	80058ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80058a0:	4b07      	ldr	r3, [pc, #28]	; (80058c0 <prvGetNextExpireTime+0x44>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	60fb      	str	r3, [r7, #12]
 80058aa:	e001      	b.n	80058b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80058ac:	2300      	movs	r3, #0
 80058ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80058b0:	68fb      	ldr	r3, [r7, #12]
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3714      	adds	r7, #20
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
 80058be:	bf00      	nop
 80058c0:	20000c10 	.word	0x20000c10

080058c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80058cc:	f7ff fa90 	bl	8004df0 <xTaskGetTickCount>
 80058d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80058d2:	4b0b      	ldr	r3, [pc, #44]	; (8005900 <prvSampleTimeNow+0x3c>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d205      	bcs.n	80058e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80058dc:	f000 f930 	bl	8005b40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	601a      	str	r2, [r3, #0]
 80058e6:	e002      	b.n	80058ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80058ee:	4a04      	ldr	r2, [pc, #16]	; (8005900 <prvSampleTimeNow+0x3c>)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80058f4:	68fb      	ldr	r3, [r7, #12]
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3710      	adds	r7, #16
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	20000c20 	.word	0x20000c20

08005904 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b086      	sub	sp, #24
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	607a      	str	r2, [r7, #4]
 8005910:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005912:	2300      	movs	r3, #0
 8005914:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	68ba      	ldr	r2, [r7, #8]
 800591a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005922:	68ba      	ldr	r2, [r7, #8]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	429a      	cmp	r2, r3
 8005928:	d812      	bhi.n	8005950 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	1ad2      	subs	r2, r2, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	429a      	cmp	r2, r3
 8005936:	d302      	bcc.n	800593e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005938:	2301      	movs	r3, #1
 800593a:	617b      	str	r3, [r7, #20]
 800593c:	e01b      	b.n	8005976 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800593e:	4b10      	ldr	r3, [pc, #64]	; (8005980 <prvInsertTimerInActiveList+0x7c>)
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	3304      	adds	r3, #4
 8005946:	4619      	mov	r1, r3
 8005948:	4610      	mov	r0, r2
 800594a:	f7fe fa3a 	bl	8003dc2 <vListInsert>
 800594e:	e012      	b.n	8005976 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	429a      	cmp	r2, r3
 8005956:	d206      	bcs.n	8005966 <prvInsertTimerInActiveList+0x62>
 8005958:	68ba      	ldr	r2, [r7, #8]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	429a      	cmp	r2, r3
 800595e:	d302      	bcc.n	8005966 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005960:	2301      	movs	r3, #1
 8005962:	617b      	str	r3, [r7, #20]
 8005964:	e007      	b.n	8005976 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005966:	4b07      	ldr	r3, [pc, #28]	; (8005984 <prvInsertTimerInActiveList+0x80>)
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	3304      	adds	r3, #4
 800596e:	4619      	mov	r1, r3
 8005970:	4610      	mov	r0, r2
 8005972:	f7fe fa26 	bl	8003dc2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005976:	697b      	ldr	r3, [r7, #20]
}
 8005978:	4618      	mov	r0, r3
 800597a:	3718      	adds	r7, #24
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}
 8005980:	20000c14 	.word	0x20000c14
 8005984:	20000c10 	.word	0x20000c10

08005988 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b08e      	sub	sp, #56	; 0x38
 800598c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800598e:	e0c6      	b.n	8005b1e <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2b00      	cmp	r3, #0
 8005994:	da17      	bge.n	80059c6 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005996:	1d3b      	adds	r3, r7, #4
 8005998:	3304      	adds	r3, #4
 800599a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800599c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d109      	bne.n	80059b6 <prvProcessReceivedCommands+0x2e>
 80059a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a6:	f383 8811 	msr	BASEPRI, r3
 80059aa:	f3bf 8f6f 	isb	sy
 80059ae:	f3bf 8f4f 	dsb	sy
 80059b2:	61fb      	str	r3, [r7, #28]
 80059b4:	e7fe      	b.n	80059b4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80059b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059bc:	6850      	ldr	r0, [r2, #4]
 80059be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059c0:	6892      	ldr	r2, [r2, #8]
 80059c2:	4611      	mov	r1, r2
 80059c4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f2c0 80a7 	blt.w	8005b1c <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80059d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d004      	beq.n	80059e4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80059da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059dc:	3304      	adds	r3, #4
 80059de:	4618      	mov	r0, r3
 80059e0:	f7fe fa28 	bl	8003e34 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80059e4:	463b      	mov	r3, r7
 80059e6:	4618      	mov	r0, r3
 80059e8:	f7ff ff6c 	bl	80058c4 <prvSampleTimeNow>
 80059ec:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2b09      	cmp	r3, #9
 80059f2:	f200 8094 	bhi.w	8005b1e <prvProcessReceivedCommands+0x196>
 80059f6:	a201      	add	r2, pc, #4	; (adr r2, 80059fc <prvProcessReceivedCommands+0x74>)
 80059f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059fc:	08005a25 	.word	0x08005a25
 8005a00:	08005a25 	.word	0x08005a25
 8005a04:	08005a25 	.word	0x08005a25
 8005a08:	08005a97 	.word	0x08005a97
 8005a0c:	08005aab 	.word	0x08005aab
 8005a10:	08005af3 	.word	0x08005af3
 8005a14:	08005a25 	.word	0x08005a25
 8005a18:	08005a25 	.word	0x08005a25
 8005a1c:	08005a97 	.word	0x08005a97
 8005a20:	08005aab 	.word	0x08005aab
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a2a:	f043 0301 	orr.w	r3, r3, #1
 8005a2e:	b2da      	uxtb	r2, r3
 8005a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	18d1      	adds	r1, r2, r3
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a44:	f7ff ff5e 	bl	8005904 <prvInsertTimerInActiveList>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d067      	beq.n	8005b1e <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a54:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a5c:	f003 0304 	and.w	r3, r3, #4
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d05c      	beq.n	8005b1e <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005a64:	68ba      	ldr	r2, [r7, #8]
 8005a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a68:	699b      	ldr	r3, [r3, #24]
 8005a6a:	441a      	add	r2, r3
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	9300      	str	r3, [sp, #0]
 8005a70:	2300      	movs	r3, #0
 8005a72:	2100      	movs	r1, #0
 8005a74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a76:	f7ff fe09 	bl	800568c <xTimerGenericCommand>
 8005a7a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005a7c:	6a3b      	ldr	r3, [r7, #32]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d14d      	bne.n	8005b1e <prvProcessReceivedCommands+0x196>
 8005a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a86:	f383 8811 	msr	BASEPRI, r3
 8005a8a:	f3bf 8f6f 	isb	sy
 8005a8e:	f3bf 8f4f 	dsb	sy
 8005a92:	61bb      	str	r3, [r7, #24]
 8005a94:	e7fe      	b.n	8005a94 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a9c:	f023 0301 	bic.w	r3, r3, #1
 8005aa0:	b2da      	uxtb	r2, r3
 8005aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005aa8:	e039      	b.n	8005b1e <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ab0:	f043 0301 	orr.w	r3, r3, #1
 8005ab4:	b2da      	uxtb	r2, r3
 8005ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d109      	bne.n	8005ade <prvProcessReceivedCommands+0x156>
 8005aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ace:	f383 8811 	msr	BASEPRI, r3
 8005ad2:	f3bf 8f6f 	isb	sy
 8005ad6:	f3bf 8f4f 	dsb	sy
 8005ada:	617b      	str	r3, [r7, #20]
 8005adc:	e7fe      	b.n	8005adc <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae0:	699a      	ldr	r2, [r3, #24]
 8005ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae4:	18d1      	adds	r1, r2, r3
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005aec:	f7ff ff0a 	bl	8005904 <prvInsertTimerInActiveList>
					break;
 8005af0:	e015      	b.n	8005b1e <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005af8:	f003 0302 	and.w	r3, r3, #2
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d103      	bne.n	8005b08 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8005b00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b02:	f000 fbc7 	bl	8006294 <vPortFree>
 8005b06:	e00a      	b.n	8005b1e <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b0e:	f023 0301 	bic.w	r3, r3, #1
 8005b12:	b2da      	uxtb	r2, r3
 8005b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005b1a:	e000      	b.n	8005b1e <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005b1c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005b1e:	4b07      	ldr	r3, [pc, #28]	; (8005b3c <prvProcessReceivedCommands+0x1b4>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	1d39      	adds	r1, r7, #4
 8005b24:	2200      	movs	r2, #0
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7fe fc3a 	bl	80043a0 <xQueueReceive>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	f47f af2e 	bne.w	8005990 <prvProcessReceivedCommands+0x8>
	}
}
 8005b34:	bf00      	nop
 8005b36:	3730      	adds	r7, #48	; 0x30
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	20000c18 	.word	0x20000c18

08005b40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b088      	sub	sp, #32
 8005b44:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005b46:	e047      	b.n	8005bd8 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b48:	4b2d      	ldr	r3, [pc, #180]	; (8005c00 <prvSwitchTimerLists+0xc0>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b52:	4b2b      	ldr	r3, [pc, #172]	; (8005c00 <prvSwitchTimerLists+0xc0>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	3304      	adds	r3, #4
 8005b60:	4618      	mov	r0, r3
 8005b62:	f7fe f967 	bl	8003e34 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6a1b      	ldr	r3, [r3, #32]
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b74:	f003 0304 	and.w	r3, r3, #4
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d02d      	beq.n	8005bd8 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	699b      	ldr	r3, [r3, #24]
 8005b80:	693a      	ldr	r2, [r7, #16]
 8005b82:	4413      	add	r3, r2
 8005b84:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005b86:	68ba      	ldr	r2, [r7, #8]
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d90e      	bls.n	8005bac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	68ba      	ldr	r2, [r7, #8]
 8005b92:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005b9a:	4b19      	ldr	r3, [pc, #100]	; (8005c00 <prvSwitchTimerLists+0xc0>)
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	3304      	adds	r3, #4
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	4610      	mov	r0, r2
 8005ba6:	f7fe f90c 	bl	8003dc2 <vListInsert>
 8005baa:	e015      	b.n	8005bd8 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005bac:	2300      	movs	r3, #0
 8005bae:	9300      	str	r3, [sp, #0]
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	693a      	ldr	r2, [r7, #16]
 8005bb4:	2100      	movs	r1, #0
 8005bb6:	68f8      	ldr	r0, [r7, #12]
 8005bb8:	f7ff fd68 	bl	800568c <xTimerGenericCommand>
 8005bbc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d109      	bne.n	8005bd8 <prvSwitchTimerLists+0x98>
 8005bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc8:	f383 8811 	msr	BASEPRI, r3
 8005bcc:	f3bf 8f6f 	isb	sy
 8005bd0:	f3bf 8f4f 	dsb	sy
 8005bd4:	603b      	str	r3, [r7, #0]
 8005bd6:	e7fe      	b.n	8005bd6 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005bd8:	4b09      	ldr	r3, [pc, #36]	; (8005c00 <prvSwitchTimerLists+0xc0>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1b2      	bne.n	8005b48 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005be2:	4b07      	ldr	r3, [pc, #28]	; (8005c00 <prvSwitchTimerLists+0xc0>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005be8:	4b06      	ldr	r3, [pc, #24]	; (8005c04 <prvSwitchTimerLists+0xc4>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a04      	ldr	r2, [pc, #16]	; (8005c00 <prvSwitchTimerLists+0xc0>)
 8005bee:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005bf0:	4a04      	ldr	r2, [pc, #16]	; (8005c04 <prvSwitchTimerLists+0xc4>)
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	6013      	str	r3, [r2, #0]
}
 8005bf6:	bf00      	nop
 8005bf8:	3718      	adds	r7, #24
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	20000c10 	.word	0x20000c10
 8005c04:	20000c14 	.word	0x20000c14

08005c08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005c0e:	f000 f965 	bl	8005edc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005c12:	4b15      	ldr	r3, [pc, #84]	; (8005c68 <prvCheckForValidListAndQueue+0x60>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d120      	bne.n	8005c5c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005c1a:	4814      	ldr	r0, [pc, #80]	; (8005c6c <prvCheckForValidListAndQueue+0x64>)
 8005c1c:	f7fe f880 	bl	8003d20 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005c20:	4813      	ldr	r0, [pc, #76]	; (8005c70 <prvCheckForValidListAndQueue+0x68>)
 8005c22:	f7fe f87d 	bl	8003d20 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005c26:	4b13      	ldr	r3, [pc, #76]	; (8005c74 <prvCheckForValidListAndQueue+0x6c>)
 8005c28:	4a10      	ldr	r2, [pc, #64]	; (8005c6c <prvCheckForValidListAndQueue+0x64>)
 8005c2a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005c2c:	4b12      	ldr	r3, [pc, #72]	; (8005c78 <prvCheckForValidListAndQueue+0x70>)
 8005c2e:	4a10      	ldr	r2, [pc, #64]	; (8005c70 <prvCheckForValidListAndQueue+0x68>)
 8005c30:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005c32:	2300      	movs	r3, #0
 8005c34:	9300      	str	r3, [sp, #0]
 8005c36:	4b11      	ldr	r3, [pc, #68]	; (8005c7c <prvCheckForValidListAndQueue+0x74>)
 8005c38:	4a11      	ldr	r2, [pc, #68]	; (8005c80 <prvCheckForValidListAndQueue+0x78>)
 8005c3a:	2110      	movs	r1, #16
 8005c3c:	200a      	movs	r0, #10
 8005c3e:	f7fe f98b 	bl	8003f58 <xQueueGenericCreateStatic>
 8005c42:	4602      	mov	r2, r0
 8005c44:	4b08      	ldr	r3, [pc, #32]	; (8005c68 <prvCheckForValidListAndQueue+0x60>)
 8005c46:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005c48:	4b07      	ldr	r3, [pc, #28]	; (8005c68 <prvCheckForValidListAndQueue+0x60>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d005      	beq.n	8005c5c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005c50:	4b05      	ldr	r3, [pc, #20]	; (8005c68 <prvCheckForValidListAndQueue+0x60>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	490b      	ldr	r1, [pc, #44]	; (8005c84 <prvCheckForValidListAndQueue+0x7c>)
 8005c56:	4618      	mov	r0, r3
 8005c58:	f7fe fd8e 	bl	8004778 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c5c:	f000 f96c 	bl	8005f38 <vPortExitCritical>
}
 8005c60:	bf00      	nop
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	20000c18 	.word	0x20000c18
 8005c6c:	20000be8 	.word	0x20000be8
 8005c70:	20000bfc 	.word	0x20000bfc
 8005c74:	20000c10 	.word	0x20000c10
 8005c78:	20000c14 	.word	0x20000c14
 8005c7c:	20000cc4 	.word	0x20000cc4
 8005c80:	20000c24 	.word	0x20000c24
 8005c84:	0800657c 	.word	0x0800657c

08005c88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	3b04      	subs	r3, #4
 8005c98:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005ca0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	3b04      	subs	r3, #4
 8005ca6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	f023 0201 	bic.w	r2, r3, #1
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	3b04      	subs	r3, #4
 8005cb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005cb8:	4a0c      	ldr	r2, [pc, #48]	; (8005cec <pxPortInitialiseStack+0x64>)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	3b14      	subs	r3, #20
 8005cc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	3b04      	subs	r3, #4
 8005cce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f06f 0202 	mvn.w	r2, #2
 8005cd6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	3b20      	subs	r3, #32
 8005cdc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005cde:	68fb      	ldr	r3, [r7, #12]
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3714      	adds	r7, #20
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr
 8005cec:	08005cf1 	.word	0x08005cf1

08005cf0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005cfa:	4b11      	ldr	r3, [pc, #68]	; (8005d40 <prvTaskExitError+0x50>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d02:	d009      	beq.n	8005d18 <prvTaskExitError+0x28>
 8005d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d08:	f383 8811 	msr	BASEPRI, r3
 8005d0c:	f3bf 8f6f 	isb	sy
 8005d10:	f3bf 8f4f 	dsb	sy
 8005d14:	60fb      	str	r3, [r7, #12]
 8005d16:	e7fe      	b.n	8005d16 <prvTaskExitError+0x26>
 8005d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1c:	f383 8811 	msr	BASEPRI, r3
 8005d20:	f3bf 8f6f 	isb	sy
 8005d24:	f3bf 8f4f 	dsb	sy
 8005d28:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005d2a:	bf00      	nop
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d0fc      	beq.n	8005d2c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005d32:	bf00      	nop
 8005d34:	3714      	adds	r7, #20
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	2000000c 	.word	0x2000000c
	...

08005d50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005d50:	4b07      	ldr	r3, [pc, #28]	; (8005d70 <pxCurrentTCBConst2>)
 8005d52:	6819      	ldr	r1, [r3, #0]
 8005d54:	6808      	ldr	r0, [r1, #0]
 8005d56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d5a:	f380 8809 	msr	PSP, r0
 8005d5e:	f3bf 8f6f 	isb	sy
 8005d62:	f04f 0000 	mov.w	r0, #0
 8005d66:	f380 8811 	msr	BASEPRI, r0
 8005d6a:	4770      	bx	lr
 8005d6c:	f3af 8000 	nop.w

08005d70 <pxCurrentTCBConst2>:
 8005d70:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005d74:	bf00      	nop
 8005d76:	bf00      	nop

08005d78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005d78:	4808      	ldr	r0, [pc, #32]	; (8005d9c <prvPortStartFirstTask+0x24>)
 8005d7a:	6800      	ldr	r0, [r0, #0]
 8005d7c:	6800      	ldr	r0, [r0, #0]
 8005d7e:	f380 8808 	msr	MSP, r0
 8005d82:	f04f 0000 	mov.w	r0, #0
 8005d86:	f380 8814 	msr	CONTROL, r0
 8005d8a:	b662      	cpsie	i
 8005d8c:	b661      	cpsie	f
 8005d8e:	f3bf 8f4f 	dsb	sy
 8005d92:	f3bf 8f6f 	isb	sy
 8005d96:	df00      	svc	0
 8005d98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005d9a:	bf00      	nop
 8005d9c:	e000ed08 	.word	0xe000ed08

08005da0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b086      	sub	sp, #24
 8005da4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005da6:	4b44      	ldr	r3, [pc, #272]	; (8005eb8 <xPortStartScheduler+0x118>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a44      	ldr	r2, [pc, #272]	; (8005ebc <xPortStartScheduler+0x11c>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d109      	bne.n	8005dc4 <xPortStartScheduler+0x24>
 8005db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db4:	f383 8811 	msr	BASEPRI, r3
 8005db8:	f3bf 8f6f 	isb	sy
 8005dbc:	f3bf 8f4f 	dsb	sy
 8005dc0:	613b      	str	r3, [r7, #16]
 8005dc2:	e7fe      	b.n	8005dc2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005dc4:	4b3c      	ldr	r3, [pc, #240]	; (8005eb8 <xPortStartScheduler+0x118>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a3d      	ldr	r2, [pc, #244]	; (8005ec0 <xPortStartScheduler+0x120>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d109      	bne.n	8005de2 <xPortStartScheduler+0x42>
 8005dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd2:	f383 8811 	msr	BASEPRI, r3
 8005dd6:	f3bf 8f6f 	isb	sy
 8005dda:	f3bf 8f4f 	dsb	sy
 8005dde:	60fb      	str	r3, [r7, #12]
 8005de0:	e7fe      	b.n	8005de0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005de2:	4b38      	ldr	r3, [pc, #224]	; (8005ec4 <xPortStartScheduler+0x124>)
 8005de4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	22ff      	movs	r2, #255	; 0xff
 8005df2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005dfc:	78fb      	ldrb	r3, [r7, #3]
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005e04:	b2da      	uxtb	r2, r3
 8005e06:	4b30      	ldr	r3, [pc, #192]	; (8005ec8 <xPortStartScheduler+0x128>)
 8005e08:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005e0a:	4b30      	ldr	r3, [pc, #192]	; (8005ecc <xPortStartScheduler+0x12c>)
 8005e0c:	2207      	movs	r2, #7
 8005e0e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e10:	e009      	b.n	8005e26 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005e12:	4b2e      	ldr	r3, [pc, #184]	; (8005ecc <xPortStartScheduler+0x12c>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	3b01      	subs	r3, #1
 8005e18:	4a2c      	ldr	r2, [pc, #176]	; (8005ecc <xPortStartScheduler+0x12c>)
 8005e1a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005e1c:	78fb      	ldrb	r3, [r7, #3]
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	005b      	lsls	r3, r3, #1
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e26:	78fb      	ldrb	r3, [r7, #3]
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e2e:	2b80      	cmp	r3, #128	; 0x80
 8005e30:	d0ef      	beq.n	8005e12 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005e32:	4b26      	ldr	r3, [pc, #152]	; (8005ecc <xPortStartScheduler+0x12c>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f1c3 0307 	rsb	r3, r3, #7
 8005e3a:	2b04      	cmp	r3, #4
 8005e3c:	d009      	beq.n	8005e52 <xPortStartScheduler+0xb2>
 8005e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e42:	f383 8811 	msr	BASEPRI, r3
 8005e46:	f3bf 8f6f 	isb	sy
 8005e4a:	f3bf 8f4f 	dsb	sy
 8005e4e:	60bb      	str	r3, [r7, #8]
 8005e50:	e7fe      	b.n	8005e50 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005e52:	4b1e      	ldr	r3, [pc, #120]	; (8005ecc <xPortStartScheduler+0x12c>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	021b      	lsls	r3, r3, #8
 8005e58:	4a1c      	ldr	r2, [pc, #112]	; (8005ecc <xPortStartScheduler+0x12c>)
 8005e5a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005e5c:	4b1b      	ldr	r3, [pc, #108]	; (8005ecc <xPortStartScheduler+0x12c>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e64:	4a19      	ldr	r2, [pc, #100]	; (8005ecc <xPortStartScheduler+0x12c>)
 8005e66:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	b2da      	uxtb	r2, r3
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005e70:	4b17      	ldr	r3, [pc, #92]	; (8005ed0 <xPortStartScheduler+0x130>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a16      	ldr	r2, [pc, #88]	; (8005ed0 <xPortStartScheduler+0x130>)
 8005e76:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005e7a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005e7c:	4b14      	ldr	r3, [pc, #80]	; (8005ed0 <xPortStartScheduler+0x130>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a13      	ldr	r2, [pc, #76]	; (8005ed0 <xPortStartScheduler+0x130>)
 8005e82:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005e86:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005e88:	f000 f8d6 	bl	8006038 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005e8c:	4b11      	ldr	r3, [pc, #68]	; (8005ed4 <xPortStartScheduler+0x134>)
 8005e8e:	2200      	movs	r2, #0
 8005e90:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005e92:	f000 f8f5 	bl	8006080 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005e96:	4b10      	ldr	r3, [pc, #64]	; (8005ed8 <xPortStartScheduler+0x138>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a0f      	ldr	r2, [pc, #60]	; (8005ed8 <xPortStartScheduler+0x138>)
 8005e9c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005ea0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005ea2:	f7ff ff69 	bl	8005d78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005ea6:	f7ff f86b 	bl	8004f80 <vTaskSwitchContext>
	prvTaskExitError();
 8005eaa:	f7ff ff21 	bl	8005cf0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3718      	adds	r7, #24
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	e000ed00 	.word	0xe000ed00
 8005ebc:	410fc271 	.word	0x410fc271
 8005ec0:	410fc270 	.word	0x410fc270
 8005ec4:	e000e400 	.word	0xe000e400
 8005ec8:	20000d14 	.word	0x20000d14
 8005ecc:	20000d18 	.word	0x20000d18
 8005ed0:	e000ed20 	.word	0xe000ed20
 8005ed4:	2000000c 	.word	0x2000000c
 8005ed8:	e000ef34 	.word	0xe000ef34

08005edc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee6:	f383 8811 	msr	BASEPRI, r3
 8005eea:	f3bf 8f6f 	isb	sy
 8005eee:	f3bf 8f4f 	dsb	sy
 8005ef2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005ef4:	4b0e      	ldr	r3, [pc, #56]	; (8005f30 <vPortEnterCritical+0x54>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	3301      	adds	r3, #1
 8005efa:	4a0d      	ldr	r2, [pc, #52]	; (8005f30 <vPortEnterCritical+0x54>)
 8005efc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005efe:	4b0c      	ldr	r3, [pc, #48]	; (8005f30 <vPortEnterCritical+0x54>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d10e      	bne.n	8005f24 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005f06:	4b0b      	ldr	r3, [pc, #44]	; (8005f34 <vPortEnterCritical+0x58>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d009      	beq.n	8005f24 <vPortEnterCritical+0x48>
 8005f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f14:	f383 8811 	msr	BASEPRI, r3
 8005f18:	f3bf 8f6f 	isb	sy
 8005f1c:	f3bf 8f4f 	dsb	sy
 8005f20:	603b      	str	r3, [r7, #0]
 8005f22:	e7fe      	b.n	8005f22 <vPortEnterCritical+0x46>
	}
}
 8005f24:	bf00      	nop
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr
 8005f30:	2000000c 	.word	0x2000000c
 8005f34:	e000ed04 	.word	0xe000ed04

08005f38 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005f3e:	4b11      	ldr	r3, [pc, #68]	; (8005f84 <vPortExitCritical+0x4c>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d109      	bne.n	8005f5a <vPortExitCritical+0x22>
 8005f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f4a:	f383 8811 	msr	BASEPRI, r3
 8005f4e:	f3bf 8f6f 	isb	sy
 8005f52:	f3bf 8f4f 	dsb	sy
 8005f56:	607b      	str	r3, [r7, #4]
 8005f58:	e7fe      	b.n	8005f58 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005f5a:	4b0a      	ldr	r3, [pc, #40]	; (8005f84 <vPortExitCritical+0x4c>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	4a08      	ldr	r2, [pc, #32]	; (8005f84 <vPortExitCritical+0x4c>)
 8005f62:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005f64:	4b07      	ldr	r3, [pc, #28]	; (8005f84 <vPortExitCritical+0x4c>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d104      	bne.n	8005f76 <vPortExitCritical+0x3e>
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005f76:	bf00      	nop
 8005f78:	370c      	adds	r7, #12
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	2000000c 	.word	0x2000000c
	...

08005f90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005f90:	f3ef 8009 	mrs	r0, PSP
 8005f94:	f3bf 8f6f 	isb	sy
 8005f98:	4b15      	ldr	r3, [pc, #84]	; (8005ff0 <pxCurrentTCBConst>)
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	f01e 0f10 	tst.w	lr, #16
 8005fa0:	bf08      	it	eq
 8005fa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005fa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005faa:	6010      	str	r0, [r2, #0]
 8005fac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005fb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005fb4:	f380 8811 	msr	BASEPRI, r0
 8005fb8:	f3bf 8f4f 	dsb	sy
 8005fbc:	f3bf 8f6f 	isb	sy
 8005fc0:	f7fe ffde 	bl	8004f80 <vTaskSwitchContext>
 8005fc4:	f04f 0000 	mov.w	r0, #0
 8005fc8:	f380 8811 	msr	BASEPRI, r0
 8005fcc:	bc09      	pop	{r0, r3}
 8005fce:	6819      	ldr	r1, [r3, #0]
 8005fd0:	6808      	ldr	r0, [r1, #0]
 8005fd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fd6:	f01e 0f10 	tst.w	lr, #16
 8005fda:	bf08      	it	eq
 8005fdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005fe0:	f380 8809 	msr	PSP, r0
 8005fe4:	f3bf 8f6f 	isb	sy
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	f3af 8000 	nop.w

08005ff0 <pxCurrentTCBConst>:
 8005ff0:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005ff4:	bf00      	nop
 8005ff6:	bf00      	nop

08005ff8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
	__asm volatile
 8005ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006002:	f383 8811 	msr	BASEPRI, r3
 8006006:	f3bf 8f6f 	isb	sy
 800600a:	f3bf 8f4f 	dsb	sy
 800600e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006010:	f7fe fefe 	bl	8004e10 <xTaskIncrementTick>
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d003      	beq.n	8006022 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800601a:	4b06      	ldr	r3, [pc, #24]	; (8006034 <SysTick_Handler+0x3c>)
 800601c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006020:	601a      	str	r2, [r3, #0]
 8006022:	2300      	movs	r3, #0
 8006024:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800602c:	bf00      	nop
 800602e:	3708      	adds	r7, #8
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	e000ed04 	.word	0xe000ed04

08006038 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006038:	b480      	push	{r7}
 800603a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800603c:	4b0b      	ldr	r3, [pc, #44]	; (800606c <vPortSetupTimerInterrupt+0x34>)
 800603e:	2200      	movs	r2, #0
 8006040:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006042:	4b0b      	ldr	r3, [pc, #44]	; (8006070 <vPortSetupTimerInterrupt+0x38>)
 8006044:	2200      	movs	r2, #0
 8006046:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006048:	4b0a      	ldr	r3, [pc, #40]	; (8006074 <vPortSetupTimerInterrupt+0x3c>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a0a      	ldr	r2, [pc, #40]	; (8006078 <vPortSetupTimerInterrupt+0x40>)
 800604e:	fba2 2303 	umull	r2, r3, r2, r3
 8006052:	099b      	lsrs	r3, r3, #6
 8006054:	4a09      	ldr	r2, [pc, #36]	; (800607c <vPortSetupTimerInterrupt+0x44>)
 8006056:	3b01      	subs	r3, #1
 8006058:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800605a:	4b04      	ldr	r3, [pc, #16]	; (800606c <vPortSetupTimerInterrupt+0x34>)
 800605c:	2207      	movs	r2, #7
 800605e:	601a      	str	r2, [r3, #0]
}
 8006060:	bf00      	nop
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	e000e010 	.word	0xe000e010
 8006070:	e000e018 	.word	0xe000e018
 8006074:	20000000 	.word	0x20000000
 8006078:	10624dd3 	.word	0x10624dd3
 800607c:	e000e014 	.word	0xe000e014

08006080 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006080:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006090 <vPortEnableVFP+0x10>
 8006084:	6801      	ldr	r1, [r0, #0]
 8006086:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800608a:	6001      	str	r1, [r0, #0]
 800608c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800608e:	bf00      	nop
 8006090:	e000ed88 	.word	0xe000ed88

08006094 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006094:	b480      	push	{r7}
 8006096:	b085      	sub	sp, #20
 8006098:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800609a:	f3ef 8305 	mrs	r3, IPSR
 800609e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2b0f      	cmp	r3, #15
 80060a4:	d913      	bls.n	80060ce <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80060a6:	4a16      	ldr	r2, [pc, #88]	; (8006100 <vPortValidateInterruptPriority+0x6c>)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	4413      	add	r3, r2
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80060b0:	4b14      	ldr	r3, [pc, #80]	; (8006104 <vPortValidateInterruptPriority+0x70>)
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	7afa      	ldrb	r2, [r7, #11]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d209      	bcs.n	80060ce <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80060ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060be:	f383 8811 	msr	BASEPRI, r3
 80060c2:	f3bf 8f6f 	isb	sy
 80060c6:	f3bf 8f4f 	dsb	sy
 80060ca:	607b      	str	r3, [r7, #4]
 80060cc:	e7fe      	b.n	80060cc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80060ce:	4b0e      	ldr	r3, [pc, #56]	; (8006108 <vPortValidateInterruptPriority+0x74>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80060d6:	4b0d      	ldr	r3, [pc, #52]	; (800610c <vPortValidateInterruptPriority+0x78>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d909      	bls.n	80060f2 <vPortValidateInterruptPriority+0x5e>
 80060de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e2:	f383 8811 	msr	BASEPRI, r3
 80060e6:	f3bf 8f6f 	isb	sy
 80060ea:	f3bf 8f4f 	dsb	sy
 80060ee:	603b      	str	r3, [r7, #0]
 80060f0:	e7fe      	b.n	80060f0 <vPortValidateInterruptPriority+0x5c>
	}
 80060f2:	bf00      	nop
 80060f4:	3714      	adds	r7, #20
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop
 8006100:	e000e3f0 	.word	0xe000e3f0
 8006104:	20000d14 	.word	0x20000d14
 8006108:	e000ed0c 	.word	0xe000ed0c
 800610c:	20000d18 	.word	0x20000d18

08006110 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b08a      	sub	sp, #40	; 0x28
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006118:	2300      	movs	r3, #0
 800611a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800611c:	f7fe fdbe 	bl	8004c9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006120:	4b57      	ldr	r3, [pc, #348]	; (8006280 <pvPortMalloc+0x170>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d101      	bne.n	800612c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006128:	f000 f90c 	bl	8006344 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800612c:	4b55      	ldr	r3, [pc, #340]	; (8006284 <pvPortMalloc+0x174>)
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4013      	ands	r3, r2
 8006134:	2b00      	cmp	r3, #0
 8006136:	f040 808c 	bne.w	8006252 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d01c      	beq.n	800617a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006140:	2208      	movs	r2, #8
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4413      	add	r3, r2
 8006146:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f003 0307 	and.w	r3, r3, #7
 800614e:	2b00      	cmp	r3, #0
 8006150:	d013      	beq.n	800617a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f023 0307 	bic.w	r3, r3, #7
 8006158:	3308      	adds	r3, #8
 800615a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f003 0307 	and.w	r3, r3, #7
 8006162:	2b00      	cmp	r3, #0
 8006164:	d009      	beq.n	800617a <pvPortMalloc+0x6a>
 8006166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800616a:	f383 8811 	msr	BASEPRI, r3
 800616e:	f3bf 8f6f 	isb	sy
 8006172:	f3bf 8f4f 	dsb	sy
 8006176:	617b      	str	r3, [r7, #20]
 8006178:	e7fe      	b.n	8006178 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d068      	beq.n	8006252 <pvPortMalloc+0x142>
 8006180:	4b41      	ldr	r3, [pc, #260]	; (8006288 <pvPortMalloc+0x178>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	429a      	cmp	r2, r3
 8006188:	d863      	bhi.n	8006252 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800618a:	4b40      	ldr	r3, [pc, #256]	; (800628c <pvPortMalloc+0x17c>)
 800618c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800618e:	4b3f      	ldr	r3, [pc, #252]	; (800628c <pvPortMalloc+0x17c>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006194:	e004      	b.n	80061a0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006198:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800619a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d903      	bls.n	80061b2 <pvPortMalloc+0xa2>
 80061aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d1f1      	bne.n	8006196 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80061b2:	4b33      	ldr	r3, [pc, #204]	; (8006280 <pvPortMalloc+0x170>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d04a      	beq.n	8006252 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80061bc:	6a3b      	ldr	r3, [r7, #32]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2208      	movs	r2, #8
 80061c2:	4413      	add	r3, r2
 80061c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80061c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	6a3b      	ldr	r3, [r7, #32]
 80061cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80061ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d0:	685a      	ldr	r2, [r3, #4]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	1ad2      	subs	r2, r2, r3
 80061d6:	2308      	movs	r3, #8
 80061d8:	005b      	lsls	r3, r3, #1
 80061da:	429a      	cmp	r2, r3
 80061dc:	d91e      	bls.n	800621c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80061de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4413      	add	r3, r2
 80061e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	f003 0307 	and.w	r3, r3, #7
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d009      	beq.n	8006204 <pvPortMalloc+0xf4>
 80061f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f4:	f383 8811 	msr	BASEPRI, r3
 80061f8:	f3bf 8f6f 	isb	sy
 80061fc:	f3bf 8f4f 	dsb	sy
 8006200:	613b      	str	r3, [r7, #16]
 8006202:	e7fe      	b.n	8006202 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006206:	685a      	ldr	r2, [r3, #4]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	1ad2      	subs	r2, r2, r3
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006216:	69b8      	ldr	r0, [r7, #24]
 8006218:	f000 f8f6 	bl	8006408 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800621c:	4b1a      	ldr	r3, [pc, #104]	; (8006288 <pvPortMalloc+0x178>)
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	4a18      	ldr	r2, [pc, #96]	; (8006288 <pvPortMalloc+0x178>)
 8006228:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800622a:	4b17      	ldr	r3, [pc, #92]	; (8006288 <pvPortMalloc+0x178>)
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	4b18      	ldr	r3, [pc, #96]	; (8006290 <pvPortMalloc+0x180>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	429a      	cmp	r2, r3
 8006234:	d203      	bcs.n	800623e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006236:	4b14      	ldr	r3, [pc, #80]	; (8006288 <pvPortMalloc+0x178>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a15      	ldr	r2, [pc, #84]	; (8006290 <pvPortMalloc+0x180>)
 800623c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800623e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006240:	685a      	ldr	r2, [r3, #4]
 8006242:	4b10      	ldr	r3, [pc, #64]	; (8006284 <pvPortMalloc+0x174>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	431a      	orrs	r2, r3
 8006248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800624c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624e:	2200      	movs	r2, #0
 8006250:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006252:	f7fe fd31 	bl	8004cb8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	f003 0307 	and.w	r3, r3, #7
 800625c:	2b00      	cmp	r3, #0
 800625e:	d009      	beq.n	8006274 <pvPortMalloc+0x164>
 8006260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006264:	f383 8811 	msr	BASEPRI, r3
 8006268:	f3bf 8f6f 	isb	sy
 800626c:	f3bf 8f4f 	dsb	sy
 8006270:	60fb      	str	r3, [r7, #12]
 8006272:	e7fe      	b.n	8006272 <pvPortMalloc+0x162>
	return pvReturn;
 8006274:	69fb      	ldr	r3, [r7, #28]
}
 8006276:	4618      	mov	r0, r3
 8006278:	3728      	adds	r7, #40	; 0x28
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	200018dc 	.word	0x200018dc
 8006284:	200018e8 	.word	0x200018e8
 8006288:	200018e0 	.word	0x200018e0
 800628c:	200018d4 	.word	0x200018d4
 8006290:	200018e4 	.word	0x200018e4

08006294 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b086      	sub	sp, #24
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d046      	beq.n	8006334 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80062a6:	2308      	movs	r3, #8
 80062a8:	425b      	negs	r3, r3
 80062aa:	697a      	ldr	r2, [r7, #20]
 80062ac:	4413      	add	r3, r2
 80062ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	685a      	ldr	r2, [r3, #4]
 80062b8:	4b20      	ldr	r3, [pc, #128]	; (800633c <vPortFree+0xa8>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4013      	ands	r3, r2
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d109      	bne.n	80062d6 <vPortFree+0x42>
 80062c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c6:	f383 8811 	msr	BASEPRI, r3
 80062ca:	f3bf 8f6f 	isb	sy
 80062ce:	f3bf 8f4f 	dsb	sy
 80062d2:	60fb      	str	r3, [r7, #12]
 80062d4:	e7fe      	b.n	80062d4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d009      	beq.n	80062f2 <vPortFree+0x5e>
 80062de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e2:	f383 8811 	msr	BASEPRI, r3
 80062e6:	f3bf 8f6f 	isb	sy
 80062ea:	f3bf 8f4f 	dsb	sy
 80062ee:	60bb      	str	r3, [r7, #8]
 80062f0:	e7fe      	b.n	80062f0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	685a      	ldr	r2, [r3, #4]
 80062f6:	4b11      	ldr	r3, [pc, #68]	; (800633c <vPortFree+0xa8>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4013      	ands	r3, r2
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d019      	beq.n	8006334 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d115      	bne.n	8006334 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	685a      	ldr	r2, [r3, #4]
 800630c:	4b0b      	ldr	r3, [pc, #44]	; (800633c <vPortFree+0xa8>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	43db      	mvns	r3, r3
 8006312:	401a      	ands	r2, r3
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006318:	f7fe fcc0 	bl	8004c9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	685a      	ldr	r2, [r3, #4]
 8006320:	4b07      	ldr	r3, [pc, #28]	; (8006340 <vPortFree+0xac>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4413      	add	r3, r2
 8006326:	4a06      	ldr	r2, [pc, #24]	; (8006340 <vPortFree+0xac>)
 8006328:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800632a:	6938      	ldr	r0, [r7, #16]
 800632c:	f000 f86c 	bl	8006408 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006330:	f7fe fcc2 	bl	8004cb8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006334:	bf00      	nop
 8006336:	3718      	adds	r7, #24
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}
 800633c:	200018e8 	.word	0x200018e8
 8006340:	200018e0 	.word	0x200018e0

08006344 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006344:	b480      	push	{r7}
 8006346:	b085      	sub	sp, #20
 8006348:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800634a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800634e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006350:	4b27      	ldr	r3, [pc, #156]	; (80063f0 <prvHeapInit+0xac>)
 8006352:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f003 0307 	and.w	r3, r3, #7
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00c      	beq.n	8006378 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	3307      	adds	r3, #7
 8006362:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f023 0307 	bic.w	r3, r3, #7
 800636a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800636c:	68ba      	ldr	r2, [r7, #8]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	4a1f      	ldr	r2, [pc, #124]	; (80063f0 <prvHeapInit+0xac>)
 8006374:	4413      	add	r3, r2
 8006376:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800637c:	4a1d      	ldr	r2, [pc, #116]	; (80063f4 <prvHeapInit+0xb0>)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006382:	4b1c      	ldr	r3, [pc, #112]	; (80063f4 <prvHeapInit+0xb0>)
 8006384:	2200      	movs	r2, #0
 8006386:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	68ba      	ldr	r2, [r7, #8]
 800638c:	4413      	add	r3, r2
 800638e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006390:	2208      	movs	r2, #8
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	1a9b      	subs	r3, r3, r2
 8006396:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f023 0307 	bic.w	r3, r3, #7
 800639e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	4a15      	ldr	r2, [pc, #84]	; (80063f8 <prvHeapInit+0xb4>)
 80063a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80063a6:	4b14      	ldr	r3, [pc, #80]	; (80063f8 <prvHeapInit+0xb4>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2200      	movs	r2, #0
 80063ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80063ae:	4b12      	ldr	r3, [pc, #72]	; (80063f8 <prvHeapInit+0xb4>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2200      	movs	r2, #0
 80063b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	1ad2      	subs	r2, r2, r3
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80063c4:	4b0c      	ldr	r3, [pc, #48]	; (80063f8 <prvHeapInit+0xb4>)
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	4a0a      	ldr	r2, [pc, #40]	; (80063fc <prvHeapInit+0xb8>)
 80063d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	4a09      	ldr	r2, [pc, #36]	; (8006400 <prvHeapInit+0xbc>)
 80063da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80063dc:	4b09      	ldr	r3, [pc, #36]	; (8006404 <prvHeapInit+0xc0>)
 80063de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80063e2:	601a      	str	r2, [r3, #0]
}
 80063e4:	bf00      	nop
 80063e6:	3714      	adds	r7, #20
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr
 80063f0:	20000d1c 	.word	0x20000d1c
 80063f4:	200018d4 	.word	0x200018d4
 80063f8:	200018dc 	.word	0x200018dc
 80063fc:	200018e4 	.word	0x200018e4
 8006400:	200018e0 	.word	0x200018e0
 8006404:	200018e8 	.word	0x200018e8

08006408 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006410:	4b28      	ldr	r3, [pc, #160]	; (80064b4 <prvInsertBlockIntoFreeList+0xac>)
 8006412:	60fb      	str	r3, [r7, #12]
 8006414:	e002      	b.n	800641c <prvInsertBlockIntoFreeList+0x14>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	60fb      	str	r3, [r7, #12]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	429a      	cmp	r2, r3
 8006424:	d8f7      	bhi.n	8006416 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	68ba      	ldr	r2, [r7, #8]
 8006430:	4413      	add	r3, r2
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	429a      	cmp	r2, r3
 8006436:	d108      	bne.n	800644a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	685a      	ldr	r2, [r3, #4]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	441a      	add	r2, r3
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	68ba      	ldr	r2, [r7, #8]
 8006454:	441a      	add	r2, r3
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	429a      	cmp	r2, r3
 800645c:	d118      	bne.n	8006490 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	4b15      	ldr	r3, [pc, #84]	; (80064b8 <prvInsertBlockIntoFreeList+0xb0>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	429a      	cmp	r2, r3
 8006468:	d00d      	beq.n	8006486 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	685a      	ldr	r2, [r3, #4]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	441a      	add	r2, r3
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	601a      	str	r2, [r3, #0]
 8006484:	e008      	b.n	8006498 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006486:	4b0c      	ldr	r3, [pc, #48]	; (80064b8 <prvInsertBlockIntoFreeList+0xb0>)
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	601a      	str	r2, [r3, #0]
 800648e:	e003      	b.n	8006498 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	429a      	cmp	r2, r3
 800649e:	d002      	beq.n	80064a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064a6:	bf00      	nop
 80064a8:	3714      	adds	r7, #20
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	200018d4 	.word	0x200018d4
 80064b8:	200018dc 	.word	0x200018dc

080064bc <__libc_init_array>:
 80064bc:	b570      	push	{r4, r5, r6, lr}
 80064be:	4e0d      	ldr	r6, [pc, #52]	; (80064f4 <__libc_init_array+0x38>)
 80064c0:	4c0d      	ldr	r4, [pc, #52]	; (80064f8 <__libc_init_array+0x3c>)
 80064c2:	1ba4      	subs	r4, r4, r6
 80064c4:	10a4      	asrs	r4, r4, #2
 80064c6:	2500      	movs	r5, #0
 80064c8:	42a5      	cmp	r5, r4
 80064ca:	d109      	bne.n	80064e0 <__libc_init_array+0x24>
 80064cc:	4e0b      	ldr	r6, [pc, #44]	; (80064fc <__libc_init_array+0x40>)
 80064ce:	4c0c      	ldr	r4, [pc, #48]	; (8006500 <__libc_init_array+0x44>)
 80064d0:	f000 f82c 	bl	800652c <_init>
 80064d4:	1ba4      	subs	r4, r4, r6
 80064d6:	10a4      	asrs	r4, r4, #2
 80064d8:	2500      	movs	r5, #0
 80064da:	42a5      	cmp	r5, r4
 80064dc:	d105      	bne.n	80064ea <__libc_init_array+0x2e>
 80064de:	bd70      	pop	{r4, r5, r6, pc}
 80064e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80064e4:	4798      	blx	r3
 80064e6:	3501      	adds	r5, #1
 80064e8:	e7ee      	b.n	80064c8 <__libc_init_array+0xc>
 80064ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80064ee:	4798      	blx	r3
 80064f0:	3501      	adds	r5, #1
 80064f2:	e7f2      	b.n	80064da <__libc_init_array+0x1e>
 80064f4:	0800661c 	.word	0x0800661c
 80064f8:	0800661c 	.word	0x0800661c
 80064fc:	0800661c 	.word	0x0800661c
 8006500:	08006620 	.word	0x08006620

08006504 <memcpy>:
 8006504:	b510      	push	{r4, lr}
 8006506:	1e43      	subs	r3, r0, #1
 8006508:	440a      	add	r2, r1
 800650a:	4291      	cmp	r1, r2
 800650c:	d100      	bne.n	8006510 <memcpy+0xc>
 800650e:	bd10      	pop	{r4, pc}
 8006510:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006514:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006518:	e7f7      	b.n	800650a <memcpy+0x6>

0800651a <memset>:
 800651a:	4402      	add	r2, r0
 800651c:	4603      	mov	r3, r0
 800651e:	4293      	cmp	r3, r2
 8006520:	d100      	bne.n	8006524 <memset+0xa>
 8006522:	4770      	bx	lr
 8006524:	f803 1b01 	strb.w	r1, [r3], #1
 8006528:	e7f9      	b.n	800651e <memset+0x4>
	...

0800652c <_init>:
 800652c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800652e:	bf00      	nop
 8006530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006532:	bc08      	pop	{r3}
 8006534:	469e      	mov	lr, r3
 8006536:	4770      	bx	lr

08006538 <_fini>:
 8006538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800653a:	bf00      	nop
 800653c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800653e:	bc08      	pop	{r3}
 8006540:	469e      	mov	lr, r3
 8006542:	4770      	bx	lr
