
playgound-basic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006554  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080066e4  080066e4  000166e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800677c  0800677c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800677c  0800677c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800677c  0800677c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800677c  0800677c  0001677c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006780  08006780  00016780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006784  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a08  20000010  08006794  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a18  08006794  00021a18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cdaf  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000032f2  00000000  00000000  0003cdef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016f8  00000000  00000000  000400e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001580  00000000  00000000  000417e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000035ab  00000000  00000000  00042d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000127ea  00000000  00000000  0004630b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d0aee  00000000  00000000  00058af5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001295e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000605c  00000000  00000000  00129660  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080066cc 	.word	0x080066cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080066cc 	.word	0x080066cc

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d4:	f000 fc1f 	bl	8000a16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d8:	f000 f820 	bl	800021c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001dc:	f000 f956 	bl	800048c <MX_GPIO_Init>
  MX_TIM2_Init();
 80001e0:	f000 f8de 	bl	80003a0 <MX_TIM2_Init>
  MX_I2C1_Init();
 80001e4:	f000 f89c 	bl	8000320 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80001e8:	2104      	movs	r1, #4
 80001ea:	4808      	ldr	r0, [pc, #32]	; (800020c <main+0x3c>)
 80001ec:	f002 fcdc 	bl	8002ba8 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001f0:	f003 fcf8 	bl	8003be4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80001f4:	4a06      	ldr	r2, [pc, #24]	; (8000210 <main+0x40>)
 80001f6:	2100      	movs	r1, #0
 80001f8:	4806      	ldr	r0, [pc, #24]	; (8000214 <main+0x44>)
 80001fa:	f003 fd5d 	bl	8003cb8 <osThreadNew>
 80001fe:	4602      	mov	r2, r0
 8000200:	4b05      	ldr	r3, [pc, #20]	; (8000218 <main+0x48>)
 8000202:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000204:	f003 fd22 	bl	8003c4c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000208:	e7fe      	b.n	8000208 <main+0x38>
 800020a:	bf00      	nop
 800020c:	2000193c 	.word	0x2000193c
 8000210:	08006710 	.word	0x08006710
 8000214:	08000691 	.word	0x08000691
 8000218:	200018ec 	.word	0x200018ec

0800021c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b0ac      	sub	sp, #176	; 0xb0
 8000220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000222:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000226:	2244      	movs	r2, #68	; 0x44
 8000228:	2100      	movs	r1, #0
 800022a:	4618      	mov	r0, r3
 800022c:	f006 fa45 	bl	80066ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000230:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000234:	2200      	movs	r2, #0
 8000236:	601a      	str	r2, [r3, #0]
 8000238:	605a      	str	r2, [r3, #4]
 800023a:	609a      	str	r2, [r3, #8]
 800023c:	60da      	str	r2, [r3, #12]
 800023e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000240:	1d3b      	adds	r3, r7, #4
 8000242:	2254      	movs	r2, #84	; 0x54
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f006 fa37 	bl	80066ba <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800024c:	f001 f9f8 	bl	8001640 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000250:	4b32      	ldr	r3, [pc, #200]	; (800031c <SystemClock_Config+0x100>)
 8000252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000256:	4a31      	ldr	r2, [pc, #196]	; (800031c <SystemClock_Config+0x100>)
 8000258:	f023 0318 	bic.w	r3, r3, #24
 800025c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000260:	2314      	movs	r3, #20
 8000262:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000264:	2301      	movs	r3, #1
 8000266:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000268:	2301      	movs	r3, #1
 800026a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800026e:	2300      	movs	r3, #0
 8000270:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000274:	2360      	movs	r3, #96	; 0x60
 8000276:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800027a:	2302      	movs	r3, #2
 800027c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000280:	2301      	movs	r3, #1
 8000282:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000286:	2301      	movs	r3, #1
 8000288:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 40;
 800028c:	2328      	movs	r3, #40	; 0x28
 800028e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000292:	2307      	movs	r3, #7
 8000294:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000298:	2302      	movs	r3, #2
 800029a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800029e:	2302      	movs	r3, #2
 80002a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80002a8:	4618      	mov	r0, r3
 80002aa:	f001 fa3d 	bl	8001728 <HAL_RCC_OscConfig>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80002b4:	f000 fa16 	bl	80006e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b8:	230f      	movs	r3, #15
 80002ba:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002bc:	2303      	movs	r3, #3
 80002be:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c0:	2300      	movs	r3, #0
 80002c2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002c4:	2300      	movs	r3, #0
 80002c6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c8:	2300      	movs	r3, #0
 80002ca:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002cc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80002d0:	2104      	movs	r1, #4
 80002d2:	4618      	mov	r0, r3
 80002d4:	f001 fe48 	bl	8001f68 <HAL_RCC_ClockConfig>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80002de:	f000 fa01 	bl	80006e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80002e2:	2340      	movs	r3, #64	; 0x40
 80002e4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80002e6:	2300      	movs	r3, #0
 80002e8:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	4618      	mov	r0, r3
 80002ee:	f002 f85b 	bl	80023a8 <HAL_RCCEx_PeriphCLKConfig>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <SystemClock_Config+0xe0>
  {
    Error_Handler();
 80002f8:	f000 f9f4 	bl	80006e4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002fc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000300:	f001 f9bc 	bl	800167c <HAL_PWREx_ControlVoltageScaling>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800030a:	f000 f9eb 	bl	80006e4 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800030e:	f002 fa3d 	bl	800278c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000312:	bf00      	nop
 8000314:	37b0      	adds	r7, #176	; 0xb0
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	40021000 	.word	0x40021000

08000320 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000324:	4b1b      	ldr	r3, [pc, #108]	; (8000394 <MX_I2C1_Init+0x74>)
 8000326:	4a1c      	ldr	r2, [pc, #112]	; (8000398 <MX_I2C1_Init+0x78>)
 8000328:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800032a:	4b1a      	ldr	r3, [pc, #104]	; (8000394 <MX_I2C1_Init+0x74>)
 800032c:	4a1b      	ldr	r2, [pc, #108]	; (800039c <MX_I2C1_Init+0x7c>)
 800032e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000330:	4b18      	ldr	r3, [pc, #96]	; (8000394 <MX_I2C1_Init+0x74>)
 8000332:	2200      	movs	r2, #0
 8000334:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000336:	4b17      	ldr	r3, [pc, #92]	; (8000394 <MX_I2C1_Init+0x74>)
 8000338:	2201      	movs	r2, #1
 800033a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800033c:	4b15      	ldr	r3, [pc, #84]	; (8000394 <MX_I2C1_Init+0x74>)
 800033e:	2200      	movs	r2, #0
 8000340:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000342:	4b14      	ldr	r3, [pc, #80]	; (8000394 <MX_I2C1_Init+0x74>)
 8000344:	2200      	movs	r2, #0
 8000346:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000348:	4b12      	ldr	r3, [pc, #72]	; (8000394 <MX_I2C1_Init+0x74>)
 800034a:	2200      	movs	r2, #0
 800034c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800034e:	4b11      	ldr	r3, [pc, #68]	; (8000394 <MX_I2C1_Init+0x74>)
 8000350:	2200      	movs	r2, #0
 8000352:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000354:	4b0f      	ldr	r3, [pc, #60]	; (8000394 <MX_I2C1_Init+0x74>)
 8000356:	2200      	movs	r2, #0
 8000358:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800035a:	480e      	ldr	r0, [pc, #56]	; (8000394 <MX_I2C1_Init+0x74>)
 800035c:	f000 fde0 	bl	8000f20 <HAL_I2C_Init>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000366:	f000 f9bd 	bl	80006e4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800036a:	2100      	movs	r1, #0
 800036c:	4809      	ldr	r0, [pc, #36]	; (8000394 <MX_I2C1_Init+0x74>)
 800036e:	f001 f8cf 	bl	8001510 <HAL_I2CEx_ConfigAnalogFilter>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000378:	f000 f9b4 	bl	80006e4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800037c:	2100      	movs	r1, #0
 800037e:	4805      	ldr	r0, [pc, #20]	; (8000394 <MX_I2C1_Init+0x74>)
 8000380:	f001 f911 	bl	80015a6 <HAL_I2CEx_ConfigDigitalFilter>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800038a:	f000 f9ab 	bl	80006e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800038e:	bf00      	nop
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	200018f0 	.word	0x200018f0
 8000398:	40005400 	.word	0x40005400
 800039c:	10909cec 	.word	0x10909cec

080003a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b08e      	sub	sp, #56	; 0x38
 80003a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003aa:	2200      	movs	r2, #0
 80003ac:	601a      	str	r2, [r3, #0]
 80003ae:	605a      	str	r2, [r3, #4]
 80003b0:	609a      	str	r2, [r3, #8]
 80003b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003b4:	f107 031c 	add.w	r3, r7, #28
 80003b8:	2200      	movs	r2, #0
 80003ba:	601a      	str	r2, [r3, #0]
 80003bc:	605a      	str	r2, [r3, #4]
 80003be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003c0:	463b      	mov	r3, r7
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
 80003c6:	605a      	str	r2, [r3, #4]
 80003c8:	609a      	str	r2, [r3, #8]
 80003ca:	60da      	str	r2, [r3, #12]
 80003cc:	611a      	str	r2, [r3, #16]
 80003ce:	615a      	str	r2, [r3, #20]
 80003d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003d2:	4b2d      	ldr	r3, [pc, #180]	; (8000488 <MX_TIM2_Init+0xe8>)
 80003d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 80003da:	4b2b      	ldr	r3, [pc, #172]	; (8000488 <MX_TIM2_Init+0xe8>)
 80003dc:	224f      	movs	r2, #79	; 0x4f
 80003de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003e0:	4b29      	ldr	r3, [pc, #164]	; (8000488 <MX_TIM2_Init+0xe8>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 199;
 80003e6:	4b28      	ldr	r3, [pc, #160]	; (8000488 <MX_TIM2_Init+0xe8>)
 80003e8:	22c7      	movs	r2, #199	; 0xc7
 80003ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ec:	4b26      	ldr	r3, [pc, #152]	; (8000488 <MX_TIM2_Init+0xe8>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003f2:	4b25      	ldr	r3, [pc, #148]	; (8000488 <MX_TIM2_Init+0xe8>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003f8:	4823      	ldr	r0, [pc, #140]	; (8000488 <MX_TIM2_Init+0xe8>)
 80003fa:	f002 fac7 	bl	800298c <HAL_TIM_Base_Init>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000404:	f000 f96e 	bl	80006e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000408:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800040c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800040e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000412:	4619      	mov	r1, r3
 8000414:	481c      	ldr	r0, [pc, #112]	; (8000488 <MX_TIM2_Init+0xe8>)
 8000416:	f002 fed5 	bl	80031c4 <HAL_TIM_ConfigClockSource>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000420:	f000 f960 	bl	80006e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000424:	4818      	ldr	r0, [pc, #96]	; (8000488 <MX_TIM2_Init+0xe8>)
 8000426:	f002 fb5d 	bl	8002ae4 <HAL_TIM_PWM_Init>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000430:	f000 f958 	bl	80006e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000434:	2300      	movs	r3, #0
 8000436:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000438:	2300      	movs	r3, #0
 800043a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800043c:	f107 031c 	add.w	r3, r7, #28
 8000440:	4619      	mov	r1, r3
 8000442:	4811      	ldr	r0, [pc, #68]	; (8000488 <MX_TIM2_Init+0xe8>)
 8000444:	f003 fb42 	bl	8003acc <HAL_TIMEx_MasterConfigSynchronization>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800044e:	f000 f949 	bl	80006e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000452:	2360      	movs	r3, #96	; 0x60
 8000454:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 20;
 8000456:	2314      	movs	r3, #20
 8000458:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800045a:	2300      	movs	r3, #0
 800045c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800045e:	2300      	movs	r3, #0
 8000460:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000462:	463b      	mov	r3, r7
 8000464:	2204      	movs	r2, #4
 8000466:	4619      	mov	r1, r3
 8000468:	4807      	ldr	r0, [pc, #28]	; (8000488 <MX_TIM2_Init+0xe8>)
 800046a:	f002 fd9b 	bl	8002fa4 <HAL_TIM_PWM_ConfigChannel>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000474:	f000 f936 	bl	80006e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000478:	4803      	ldr	r0, [pc, #12]	; (8000488 <MX_TIM2_Init+0xe8>)
 800047a:	f000 f9c1 	bl	8000800 <HAL_TIM_MspPostInit>

}
 800047e:	bf00      	nop
 8000480:	3738      	adds	r7, #56	; 0x38
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	2000193c 	.word	0x2000193c

0800048c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b088      	sub	sp, #32
 8000490:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000492:	f107 030c 	add.w	r3, r7, #12
 8000496:	2200      	movs	r2, #0
 8000498:	601a      	str	r2, [r3, #0]
 800049a:	605a      	str	r2, [r3, #4]
 800049c:	609a      	str	r2, [r3, #8]
 800049e:	60da      	str	r2, [r3, #12]
 80004a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004a2:	4b1a      	ldr	r3, [pc, #104]	; (800050c <MX_GPIO_Init+0x80>)
 80004a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004a6:	4a19      	ldr	r2, [pc, #100]	; (800050c <MX_GPIO_Init+0x80>)
 80004a8:	f043 0304 	orr.w	r3, r3, #4
 80004ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ae:	4b17      	ldr	r3, [pc, #92]	; (800050c <MX_GPIO_Init+0x80>)
 80004b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004b2:	f003 0304 	and.w	r3, r3, #4
 80004b6:	60bb      	str	r3, [r7, #8]
 80004b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ba:	4b14      	ldr	r3, [pc, #80]	; (800050c <MX_GPIO_Init+0x80>)
 80004bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004be:	4a13      	ldr	r2, [pc, #76]	; (800050c <MX_GPIO_Init+0x80>)
 80004c0:	f043 0301 	orr.w	r3, r3, #1
 80004c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004c6:	4b11      	ldr	r3, [pc, #68]	; (800050c <MX_GPIO_Init+0x80>)
 80004c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ca:	f003 0301 	and.w	r3, r3, #1
 80004ce:	607b      	str	r3, [r7, #4]
 80004d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d2:	4b0e      	ldr	r3, [pc, #56]	; (800050c <MX_GPIO_Init+0x80>)
 80004d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004d6:	4a0d      	ldr	r2, [pc, #52]	; (800050c <MX_GPIO_Init+0x80>)
 80004d8:	f043 0302 	orr.w	r3, r3, #2
 80004dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004de:	4b0b      	ldr	r3, [pc, #44]	; (800050c <MX_GPIO_Init+0x80>)
 80004e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e2:	f003 0302 	and.w	r3, r3, #2
 80004e6:	603b      	str	r3, [r7, #0]
 80004e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80004ea:	2380      	movs	r3, #128	; 0x80
 80004ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80004ee:	230b      	movs	r3, #11
 80004f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f2:	2300      	movs	r3, #0
 80004f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f6:	f107 030c 	add.w	r3, r7, #12
 80004fa:	4619      	mov	r1, r3
 80004fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000500:	f000 fba4 	bl	8000c4c <HAL_GPIO_Init>

}
 8000504:	bf00      	nop
 8000506:	3720      	adds	r7, #32
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40021000 	.word	0x40021000

08000510 <pca9685_init>:

/* USER CODE BEGIN 4 */
void pca9685_init(I2C_HandleTypeDef *hi2c, uint8_t address)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b086      	sub	sp, #24
 8000514:	af02      	add	r7, sp, #8
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	460b      	mov	r3, r1
 800051a:	70fb      	strb	r3, [r7, #3]
	#define PCA9685_MODE1 0x00
	//reset
	uint8_t cmd = 0x06;
 800051c:	2306      	movs	r3, #6
 800051e:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(hi2c, address, &cmd, 1, HAL_MAX_DELAY);
 8000520:	78fb      	ldrb	r3, [r7, #3]
 8000522:	b299      	uxth	r1, r3
 8000524:	f107 020c 	add.w	r2, r7, #12
 8000528:	f04f 33ff 	mov.w	r3, #4294967295
 800052c:	9300      	str	r3, [sp, #0]
 800052e:	2301      	movs	r3, #1
 8000530:	6878      	ldr	r0, [r7, #4]
 8000532:	f000 fd85 	bl	8001040 <HAL_I2C_Master_Transmit>
	uint8_t initStruct[2];
	uint8_t prescale = 0x03; // hardcoded
 8000536:	2303      	movs	r3, #3
 8000538:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(hi2c, address, PCA9685_MODE1, 1, HAL_MAX_DELAY);
 800053a:	78fb      	ldrb	r3, [r7, #3]
 800053c:	b299      	uxth	r1, r3
 800053e:	f04f 33ff 	mov.w	r3, #4294967295
 8000542:	9300      	str	r3, [sp, #0]
 8000544:	2301      	movs	r3, #1
 8000546:	2200      	movs	r2, #0
 8000548:	6878      	ldr	r0, [r7, #4]
 800054a:	f000 fd79 	bl	8001040 <HAL_I2C_Master_Transmit>
	uint8_t oldmode = 0; // hardcoded
 800054e:	2300      	movs	r3, #0
 8000550:	73bb      	strb	r3, [r7, #14]
	// HAL_I2C_Master_Receive(hi2c, address, &oldmode, 1, 1);
	uint8_t newmode = ((oldmode & 0x7F) | 0x10);
 8000552:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000556:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 800055a:	b25b      	sxtb	r3, r3
 800055c:	f043 0310 	orr.w	r3, r3, #16
 8000560:	b25b      	sxtb	r3, r3
 8000562:	737b      	strb	r3, [r7, #13]
	initStruct[0] = PCA9685_MODE1;
 8000564:	2300      	movs	r3, #0
 8000566:	723b      	strb	r3, [r7, #8]
	initStruct[1] = newmode;
 8000568:	7b7b      	ldrb	r3, [r7, #13]
 800056a:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(hi2c, address, initStruct, 2, HAL_MAX_DELAY);
 800056c:	78fb      	ldrb	r3, [r7, #3]
 800056e:	b299      	uxth	r1, r3
 8000570:	f107 0208 	add.w	r2, r7, #8
 8000574:	f04f 33ff 	mov.w	r3, #4294967295
 8000578:	9300      	str	r3, [sp, #0]
 800057a:	2302      	movs	r3, #2
 800057c:	6878      	ldr	r0, [r7, #4]
 800057e:	f000 fd5f 	bl	8001040 <HAL_I2C_Master_Transmit>
	initStruct[1] = prescale;
 8000582:	7bfb      	ldrb	r3, [r7, #15]
 8000584:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(hi2c, address, initStruct, 2, HAL_MAX_DELAY);
 8000586:	78fb      	ldrb	r3, [r7, #3]
 8000588:	b299      	uxth	r1, r3
 800058a:	f107 0208 	add.w	r2, r7, #8
 800058e:	f04f 33ff 	mov.w	r3, #4294967295
 8000592:	9300      	str	r3, [sp, #0]
 8000594:	2302      	movs	r3, #2
 8000596:	6878      	ldr	r0, [r7, #4]
 8000598:	f000 fd52 	bl	8001040 <HAL_I2C_Master_Transmit>
	initStruct[1] = oldmode;
 800059c:	7bbb      	ldrb	r3, [r7, #14]
 800059e:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(hi2c, address, initStruct, 2, HAL_MAX_DELAY);
 80005a0:	78fb      	ldrb	r3, [r7, #3]
 80005a2:	b299      	uxth	r1, r3
 80005a4:	f107 0208 	add.w	r2, r7, #8
 80005a8:	f04f 33ff 	mov.w	r3, #4294967295
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	2302      	movs	r3, #2
 80005b0:	6878      	ldr	r0, [r7, #4]
 80005b2:	f000 fd45 	bl	8001040 <HAL_I2C_Master_Transmit>
	osDelay(100);
 80005b6:	2064      	movs	r0, #100	; 0x64
 80005b8:	f003 fc24 	bl	8003e04 <osDelay>
	initStruct[1] = (oldmode | 0xA1);
 80005bc:	7bbb      	ldrb	r3, [r7, #14]
 80005be:	f063 035e 	orn	r3, r3, #94	; 0x5e
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(hi2c, address, initStruct, 2, HAL_MAX_DELAY);
 80005c6:	78fb      	ldrb	r3, [r7, #3]
 80005c8:	b299      	uxth	r1, r3
 80005ca:	f107 0208 	add.w	r2, r7, #8
 80005ce:	f04f 33ff 	mov.w	r3, #4294967295
 80005d2:	9300      	str	r3, [sp, #0]
 80005d4:	2302      	movs	r3, #2
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f000 fd32 	bl	8001040 <HAL_I2C_Master_Transmit>
}
 80005dc:	bf00      	nop
 80005de:	3710      	adds	r7, #16
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <turnOnAll>:

	//uint8_t outputBuffer2[5] = {0x06 + 4*CH2, on, (on >> 8), off, (off >> 8)};
	//HAL_I2C_Master_Transmit(&hi2c1, address, outputBuffer2, sizeof(outputBuffer2), HAL_MAX_DELAY);
}

void turnOnAll(I2C_HandleTypeDef *hi2c, uint8_t address){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af02      	add	r7, sp, #8
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	460b      	mov	r3, r1
 80005ee:	70fb      	strb	r3, [r7, #3]
	uint8_t allOutputBuffer[2] = {ALL_LED_ON_H, 0x10};
 80005f0:	4b08      	ldr	r3, [pc, #32]	; (8000614 <turnOnAll+0x30>)
 80005f2:	881b      	ldrh	r3, [r3, #0]
 80005f4:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c1, address, allOutputBuffer, sizeof(allOutputBuffer), HAL_MAX_DELAY);
 80005f6:	78fb      	ldrb	r3, [r7, #3]
 80005f8:	b299      	uxth	r1, r3
 80005fa:	f107 020c 	add.w	r2, r7, #12
 80005fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000602:	9300      	str	r3, [sp, #0]
 8000604:	2302      	movs	r3, #2
 8000606:	4804      	ldr	r0, [pc, #16]	; (8000618 <turnOnAll+0x34>)
 8000608:	f000 fd1a 	bl	8001040 <HAL_I2C_Master_Transmit>
}
 800060c:	bf00      	nop
 800060e:	3710      	adds	r7, #16
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	080066f0 	.word	0x080066f0
 8000618:	200018f0 	.word	0x200018f0

0800061c <turnOffAll>:
void turnOffAll(I2C_HandleTypeDef *hi2c, uint8_t address){
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af02      	add	r7, sp, #8
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	460b      	mov	r3, r1
 8000626:	70fb      	strb	r3, [r7, #3]
	uint8_t allOutputBuffer[2] = {ALL_LED_OFF_H, 0x10};
 8000628:	4b08      	ldr	r3, [pc, #32]	; (800064c <turnOffAll+0x30>)
 800062a:	881b      	ldrh	r3, [r3, #0]
 800062c:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c1, address, allOutputBuffer, sizeof(allOutputBuffer), HAL_MAX_DELAY);
 800062e:	78fb      	ldrb	r3, [r7, #3]
 8000630:	b299      	uxth	r1, r3
 8000632:	f107 020c 	add.w	r2, r7, #12
 8000636:	f04f 33ff 	mov.w	r3, #4294967295
 800063a:	9300      	str	r3, [sp, #0]
 800063c:	2302      	movs	r3, #2
 800063e:	4804      	ldr	r0, [pc, #16]	; (8000650 <turnOffAll+0x34>)
 8000640:	f000 fcfe 	bl	8001040 <HAL_I2C_Master_Transmit>
}
 8000644:	bf00      	nop
 8000646:	3710      	adds	r7, #16
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	080066f4 	.word	0x080066f4
 8000650:	200018f0 	.word	0x200018f0

08000654 <onOff>:
			osDelay(5);
		}
	}
}

void onOff(I2C_HandleTypeDef *hi2c, uint8_t address, uint16_t delay){
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
 800065c:	460b      	mov	r3, r1
 800065e:	70fb      	strb	r3, [r7, #3]
 8000660:	4613      	mov	r3, r2
 8000662:	803b      	strh	r3, [r7, #0]
	/* Infinite loop */
	for(;;){
		turnOnAll(&hi2c1, address);
 8000664:	78fb      	ldrb	r3, [r7, #3]
 8000666:	4619      	mov	r1, r3
 8000668:	4808      	ldr	r0, [pc, #32]	; (800068c <onOff+0x38>)
 800066a:	f7ff ffbb 	bl	80005e4 <turnOnAll>
		//pca9685_pwm(&hi2c1, address, channel, 0, 4095-(16*256));
		osDelay(delay);
 800066e:	883b      	ldrh	r3, [r7, #0]
 8000670:	4618      	mov	r0, r3
 8000672:	f003 fbc7 	bl	8003e04 <osDelay>
		turnOffAll(&hi2c1, address);
 8000676:	78fb      	ldrb	r3, [r7, #3]
 8000678:	4619      	mov	r1, r3
 800067a:	4804      	ldr	r0, [pc, #16]	; (800068c <onOff+0x38>)
 800067c:	f7ff ffce 	bl	800061c <turnOffAll>
		//pca9685_pwm(&hi2c1, address, channel, 0, (16*255));
		osDelay(delay);
 8000680:	883b      	ldrh	r3, [r7, #0]
 8000682:	4618      	mov	r0, r3
 8000684:	f003 fbbe 	bl	8003e04 <osDelay>
		turnOnAll(&hi2c1, address);
 8000688:	e7ec      	b.n	8000664 <onOff+0x10>
 800068a:	bf00      	nop
 800068c:	200018f0 	.word	0x200018f0

08000690 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	enum channel {CH1, CH2};
	uint8_t address = 0x80;
 8000698:	2380      	movs	r3, #128	; 0x80
 800069a:	73fb      	strb	r3, [r7, #15]
	pca9685_init(&hi2c1, address);
 800069c:	7bfb      	ldrb	r3, [r7, #15]
 800069e:	4619      	mov	r1, r3
 80006a0:	4806      	ldr	r0, [pc, #24]	; (80006bc <StartDefaultTask+0x2c>)
 80006a2:	f7ff ff35 	bl	8000510 <pca9685_init>
	//pca9685_pwm(&hi2c1, address, CH1, 0, 4095);
	//upAndDown(address, CH1);
	onOff(&hi2c1, address, 2000);
 80006a6:	7bfb      	ldrb	r3, [r7, #15]
 80006a8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80006ac:	4619      	mov	r1, r3
 80006ae:	4803      	ldr	r0, [pc, #12]	; (80006bc <StartDefaultTask+0x2c>)
 80006b0:	f7ff ffd0 	bl	8000654 <onOff>
  /* USER CODE END 5 */
}
 80006b4:	bf00      	nop
 80006b6:	3710      	adds	r7, #16
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	200018f0 	.word	0x200018f0

080006c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a04      	ldr	r2, [pc, #16]	; (80006e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d101      	bne.n	80006d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006d2:	f000 f9b9 	bl	8000a48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40001000 	.word	0x40001000

080006e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ea:	e7fe      	b.n	80006ea <Error_Handler+0x6>

080006ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f2:	4b11      	ldr	r3, [pc, #68]	; (8000738 <HAL_MspInit+0x4c>)
 80006f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006f6:	4a10      	ldr	r2, [pc, #64]	; (8000738 <HAL_MspInit+0x4c>)
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	6613      	str	r3, [r2, #96]	; 0x60
 80006fe:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <HAL_MspInit+0x4c>)
 8000700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800070a:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <HAL_MspInit+0x4c>)
 800070c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800070e:	4a0a      	ldr	r2, [pc, #40]	; (8000738 <HAL_MspInit+0x4c>)
 8000710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000714:	6593      	str	r3, [r2, #88]	; 0x58
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <HAL_MspInit+0x4c>)
 8000718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800071a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800071e:	603b      	str	r3, [r7, #0]
 8000720:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000722:	2200      	movs	r2, #0
 8000724:	210f      	movs	r1, #15
 8000726:	f06f 0001 	mvn.w	r0, #1
 800072a:	f000 fa65 	bl	8000bf8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800072e:	bf00      	nop
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40021000 	.word	0x40021000

0800073c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08a      	sub	sp, #40	; 0x28
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000744:	f107 0314 	add.w	r3, r7, #20
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a18      	ldr	r2, [pc, #96]	; (80007bc <HAL_I2C_MspInit+0x80>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d129      	bne.n	80007b2 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800075e:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <HAL_I2C_MspInit+0x84>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000762:	4a17      	ldr	r2, [pc, #92]	; (80007c0 <HAL_I2C_MspInit+0x84>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076a:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <HAL_I2C_MspInit+0x84>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	613b      	str	r3, [r7, #16]
 8000774:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000776:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800077a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800077c:	2312      	movs	r3, #18
 800077e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000780:	2301      	movs	r3, #1
 8000782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000784:	2303      	movs	r3, #3
 8000786:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000788:	2304      	movs	r3, #4
 800078a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078c:	f107 0314 	add.w	r3, r7, #20
 8000790:	4619      	mov	r1, r3
 8000792:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000796:	f000 fa59 	bl	8000c4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <HAL_I2C_MspInit+0x84>)
 800079c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800079e:	4a08      	ldr	r2, [pc, #32]	; (80007c0 <HAL_I2C_MspInit+0x84>)
 80007a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007a4:	6593      	str	r3, [r2, #88]	; 0x58
 80007a6:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <HAL_I2C_MspInit+0x84>)
 80007a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80007b2:	bf00      	nop
 80007b4:	3728      	adds	r7, #40	; 0x28
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40005400 	.word	0x40005400
 80007c0:	40021000 	.word	0x40021000

080007c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007d4:	d10b      	bne.n	80007ee <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <HAL_TIM_Base_MspInit+0x38>)
 80007d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007da:	4a08      	ldr	r2, [pc, #32]	; (80007fc <HAL_TIM_Base_MspInit+0x38>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6593      	str	r3, [r2, #88]	; 0x58
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <HAL_TIM_Base_MspInit+0x38>)
 80007e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80007ee:	bf00      	nop
 80007f0:	3714      	adds	r7, #20
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	40021000 	.word	0x40021000

08000800 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b088      	sub	sp, #32
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	f107 030c 	add.w	r3, r7, #12
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000820:	d11b      	bne.n	800085a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	4b10      	ldr	r3, [pc, #64]	; (8000864 <HAL_TIM_MspPostInit+0x64>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	4a0f      	ldr	r2, [pc, #60]	; (8000864 <HAL_TIM_MspPostInit+0x64>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082e:	4b0d      	ldr	r3, [pc, #52]	; (8000864 <HAL_TIM_MspPostInit+0x64>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800083a:	2308      	movs	r3, #8
 800083c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	2302      	movs	r3, #2
 8000840:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800084a:	2301      	movs	r3, #1
 800084c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800084e:	f107 030c 	add.w	r3, r7, #12
 8000852:	4619      	mov	r1, r3
 8000854:	4804      	ldr	r0, [pc, #16]	; (8000868 <HAL_TIM_MspPostInit+0x68>)
 8000856:	f000 f9f9 	bl	8000c4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800085a:	bf00      	nop
 800085c:	3720      	adds	r7, #32
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40021000 	.word	0x40021000
 8000868:	48000400 	.word	0x48000400

0800086c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08c      	sub	sp, #48	; 0x30
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000874:	2300      	movs	r3, #0
 8000876:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800087c:	2200      	movs	r2, #0
 800087e:	6879      	ldr	r1, [r7, #4]
 8000880:	2036      	movs	r0, #54	; 0x36
 8000882:	f000 f9b9 	bl	8000bf8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000886:	2036      	movs	r0, #54	; 0x36
 8000888:	f000 f9d2 	bl	8000c30 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800088c:	4b1e      	ldr	r3, [pc, #120]	; (8000908 <HAL_InitTick+0x9c>)
 800088e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000890:	4a1d      	ldr	r2, [pc, #116]	; (8000908 <HAL_InitTick+0x9c>)
 8000892:	f043 0310 	orr.w	r3, r3, #16
 8000896:	6593      	str	r3, [r2, #88]	; 0x58
 8000898:	4b1b      	ldr	r3, [pc, #108]	; (8000908 <HAL_InitTick+0x9c>)
 800089a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800089c:	f003 0310 	and.w	r3, r3, #16
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008a4:	f107 0210 	add.w	r2, r7, #16
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	4611      	mov	r1, r2
 80008ae:	4618      	mov	r0, r3
 80008b0:	f001 fce8 	bl	8002284 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008b4:	f001 fcd0 	bl	8002258 <HAL_RCC_GetPCLK1Freq>
 80008b8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008bc:	4a13      	ldr	r2, [pc, #76]	; (800090c <HAL_InitTick+0xa0>)
 80008be:	fba2 2303 	umull	r2, r3, r2, r3
 80008c2:	0c9b      	lsrs	r3, r3, #18
 80008c4:	3b01      	subs	r3, #1
 80008c6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80008c8:	4b11      	ldr	r3, [pc, #68]	; (8000910 <HAL_InitTick+0xa4>)
 80008ca:	4a12      	ldr	r2, [pc, #72]	; (8000914 <HAL_InitTick+0xa8>)
 80008cc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80008ce:	4b10      	ldr	r3, [pc, #64]	; (8000910 <HAL_InitTick+0xa4>)
 80008d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008d4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80008d6:	4a0e      	ldr	r2, [pc, #56]	; (8000910 <HAL_InitTick+0xa4>)
 80008d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008da:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80008dc:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <HAL_InitTick+0xa4>)
 80008de:	2200      	movs	r2, #0
 80008e0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e2:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <HAL_InitTick+0xa4>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80008e8:	4809      	ldr	r0, [pc, #36]	; (8000910 <HAL_InitTick+0xa4>)
 80008ea:	f002 f84f 	bl	800298c <HAL_TIM_Base_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d104      	bne.n	80008fe <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80008f4:	4806      	ldr	r0, [pc, #24]	; (8000910 <HAL_InitTick+0xa4>)
 80008f6:	f002 f8a1 	bl	8002a3c <HAL_TIM_Base_Start_IT>
 80008fa:	4603      	mov	r3, r0
 80008fc:	e000      	b.n	8000900 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
}
 8000900:	4618      	mov	r0, r3
 8000902:	3730      	adds	r7, #48	; 0x30
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40021000 	.word	0x40021000
 800090c:	431bde83 	.word	0x431bde83
 8000910:	20001988 	.word	0x20001988
 8000914:	40001000 	.word	0x40001000

08000918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800091c:	e7fe      	b.n	800091c <NMI_Handler+0x4>

0800091e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000922:	e7fe      	b.n	8000922 <HardFault_Handler+0x4>

08000924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000928:	e7fe      	b.n	8000928 <MemManage_Handler+0x4>

0800092a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800092e:	e7fe      	b.n	800092e <BusFault_Handler+0x4>

08000930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000934:	e7fe      	b.n	8000934 <UsageFault_Handler+0x4>

08000936 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000948:	4802      	ldr	r0, [pc, #8]	; (8000954 <TIM6_DAC_IRQHandler+0x10>)
 800094a:	f002 fa0b 	bl	8002d64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20001988 	.word	0x20001988

08000958 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800095c:	4b17      	ldr	r3, [pc, #92]	; (80009bc <SystemInit+0x64>)
 800095e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000962:	4a16      	ldr	r2, [pc, #88]	; (80009bc <SystemInit+0x64>)
 8000964:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000968:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800096c:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <SystemInit+0x68>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a13      	ldr	r2, [pc, #76]	; (80009c0 <SystemInit+0x68>)
 8000972:	f043 0301 	orr.w	r3, r3, #1
 8000976:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000978:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <SystemInit+0x68>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <SystemInit+0x68>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a0f      	ldr	r2, [pc, #60]	; (80009c0 <SystemInit+0x68>)
 8000984:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000988:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800098c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800098e:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <SystemInit+0x68>)
 8000990:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000994:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000996:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <SystemInit+0x68>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a09      	ldr	r2, [pc, #36]	; (80009c0 <SystemInit+0x68>)
 800099c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009a0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80009a2:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <SystemInit+0x68>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009a8:	4b04      	ldr	r3, [pc, #16]	; (80009bc <SystemInit+0x64>)
 80009aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009ae:	609a      	str	r2, [r3, #8]
#endif
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	e000ed00 	.word	0xe000ed00
 80009c0:	40021000 	.word	0x40021000

080009c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009c8:	f7ff ffc6 	bl	8000958 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80009cc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80009ce:	e003      	b.n	80009d8 <LoopCopyDataInit>

080009d0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80009d0:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80009d2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80009d4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80009d6:	3104      	adds	r1, #4

080009d8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80009d8:	480a      	ldr	r0, [pc, #40]	; (8000a04 <LoopForever+0xa>)
	ldr	r3, =_edata
 80009da:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <LoopForever+0xe>)
	adds	r2, r0, r1
 80009dc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80009de:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80009e0:	d3f6      	bcc.n	80009d0 <CopyDataInit>
	ldr	r2, =_sbss
 80009e2:	4a0a      	ldr	r2, [pc, #40]	; (8000a0c <LoopForever+0x12>)
	b	LoopFillZerobss
 80009e4:	e002      	b.n	80009ec <LoopFillZerobss>

080009e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80009e6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80009e8:	f842 3b04 	str.w	r3, [r2], #4

080009ec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80009ec:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <LoopForever+0x16>)
	cmp	r2, r3
 80009ee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80009f0:	d3f9      	bcc.n	80009e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009f2:	f005 fe33 	bl	800665c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009f6:	f7ff fbeb 	bl	80001d0 <main>

080009fa <LoopForever>:

LoopForever:
    b LoopForever
 80009fa:	e7fe      	b.n	80009fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009fc:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000a00:	08006784 	.word	0x08006784
	ldr	r0, =_sdata
 8000a04:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000a08:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000a0c:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000a10:	20001a18 	.word	0x20001a18

08000a14 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a14:	e7fe      	b.n	8000a14 <ADC1_IRQHandler>

08000a16 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b082      	sub	sp, #8
 8000a1a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a20:	2003      	movs	r0, #3
 8000a22:	f000 f8de 	bl	8000be2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a26:	2000      	movs	r0, #0
 8000a28:	f7ff ff20 	bl	800086c <HAL_InitTick>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d002      	beq.n	8000a38 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a32:	2301      	movs	r3, #1
 8000a34:	71fb      	strb	r3, [r7, #7]
 8000a36:	e001      	b.n	8000a3c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a38:	f7ff fe58 	bl	80006ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a3c:	79fb      	ldrb	r3, [r7, #7]
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
	...

08000a48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_IncTick+0x20>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	461a      	mov	r2, r3
 8000a52:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <HAL_IncTick+0x24>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4413      	add	r3, r2
 8000a58:	4a04      	ldr	r2, [pc, #16]	; (8000a6c <HAL_IncTick+0x24>)
 8000a5a:	6013      	str	r3, [r2, #0]
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	20000008 	.word	0x20000008
 8000a6c:	200019d4 	.word	0x200019d4

08000a70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  return uwTick;
 8000a74:	4b03      	ldr	r3, [pc, #12]	; (8000a84 <HAL_GetTick+0x14>)
 8000a76:	681b      	ldr	r3, [r3, #0]
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	200019d4 	.word	0x200019d4

08000a88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	f003 0307 	and.w	r3, r3, #7
 8000a96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <__NVIC_SetPriorityGrouping+0x44>)
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a9e:	68ba      	ldr	r2, [r7, #8]
 8000aa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ab0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aba:	4a04      	ldr	r2, [pc, #16]	; (8000acc <__NVIC_SetPriorityGrouping+0x44>)
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	60d3      	str	r3, [r2, #12]
}
 8000ac0:	bf00      	nop
 8000ac2:	3714      	adds	r7, #20
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad4:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	0a1b      	lsrs	r3, r3, #8
 8000ada:	f003 0307 	and.w	r3, r3, #7
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	db0b      	blt.n	8000b16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	f003 021f 	and.w	r2, r3, #31
 8000b04:	4907      	ldr	r1, [pc, #28]	; (8000b24 <__NVIC_EnableIRQ+0x38>)
 8000b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0a:	095b      	lsrs	r3, r3, #5
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	e000e100 	.word	0xe000e100

08000b28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	6039      	str	r1, [r7, #0]
 8000b32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	db0a      	blt.n	8000b52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	b2da      	uxtb	r2, r3
 8000b40:	490c      	ldr	r1, [pc, #48]	; (8000b74 <__NVIC_SetPriority+0x4c>)
 8000b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b46:	0112      	lsls	r2, r2, #4
 8000b48:	b2d2      	uxtb	r2, r2
 8000b4a:	440b      	add	r3, r1
 8000b4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b50:	e00a      	b.n	8000b68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	4908      	ldr	r1, [pc, #32]	; (8000b78 <__NVIC_SetPriority+0x50>)
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	f003 030f 	and.w	r3, r3, #15
 8000b5e:	3b04      	subs	r3, #4
 8000b60:	0112      	lsls	r2, r2, #4
 8000b62:	b2d2      	uxtb	r2, r2
 8000b64:	440b      	add	r3, r1
 8000b66:	761a      	strb	r2, [r3, #24]
}
 8000b68:	bf00      	nop
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	e000e100 	.word	0xe000e100
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b089      	sub	sp, #36	; 0x24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	f003 0307 	and.w	r3, r3, #7
 8000b8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b90:	69fb      	ldr	r3, [r7, #28]
 8000b92:	f1c3 0307 	rsb	r3, r3, #7
 8000b96:	2b04      	cmp	r3, #4
 8000b98:	bf28      	it	cs
 8000b9a:	2304      	movcs	r3, #4
 8000b9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	3304      	adds	r3, #4
 8000ba2:	2b06      	cmp	r3, #6
 8000ba4:	d902      	bls.n	8000bac <NVIC_EncodePriority+0x30>
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	3b03      	subs	r3, #3
 8000baa:	e000      	b.n	8000bae <NVIC_EncodePriority+0x32>
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bba:	43da      	mvns	r2, r3
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	fa01 f303 	lsl.w	r3, r1, r3
 8000bce:	43d9      	mvns	r1, r3
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd4:	4313      	orrs	r3, r2
         );
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3724      	adds	r7, #36	; 0x24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr

08000be2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b082      	sub	sp, #8
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f7ff ff4c 	bl	8000a88 <__NVIC_SetPriorityGrouping>
}
 8000bf0:	bf00      	nop
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
 8000c04:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c0a:	f7ff ff61 	bl	8000ad0 <__NVIC_GetPriorityGrouping>
 8000c0e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c10:	687a      	ldr	r2, [r7, #4]
 8000c12:	68b9      	ldr	r1, [r7, #8]
 8000c14:	6978      	ldr	r0, [r7, #20]
 8000c16:	f7ff ffb1 	bl	8000b7c <NVIC_EncodePriority>
 8000c1a:	4602      	mov	r2, r0
 8000c1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c20:	4611      	mov	r1, r2
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff ff80 	bl	8000b28 <__NVIC_SetPriority>
}
 8000c28:	bf00      	nop
 8000c2a:	3718      	adds	r7, #24
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff ff54 	bl	8000aec <__NVIC_EnableIRQ>
}
 8000c44:	bf00      	nop
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b087      	sub	sp, #28
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c5a:	e148      	b.n	8000eee <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	2101      	movs	r1, #1
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	fa01 f303 	lsl.w	r3, r1, r3
 8000c68:	4013      	ands	r3, r2
 8000c6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	f000 813a 	beq.w	8000ee8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d00b      	beq.n	8000c94 <HAL_GPIO_Init+0x48>
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	2b02      	cmp	r3, #2
 8000c82:	d007      	beq.n	8000c94 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c88:	2b11      	cmp	r3, #17
 8000c8a:	d003      	beq.n	8000c94 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	2b12      	cmp	r3, #18
 8000c92:	d130      	bne.n	8000cf6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	2203      	movs	r2, #3
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	68da      	ldr	r2, [r3, #12]
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	693a      	ldr	r2, [r7, #16]
 8000cc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cca:	2201      	movs	r2, #1
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	43db      	mvns	r3, r3
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	091b      	lsrs	r3, r3, #4
 8000ce0:	f003 0201 	and.w	r2, r3, #1
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	68db      	ldr	r3, [r3, #12]
 8000cfa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	2203      	movs	r2, #3
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43db      	mvns	r3, r3
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	689a      	ldr	r2, [r3, #8]
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	2b02      	cmp	r3, #2
 8000d2c:	d003      	beq.n	8000d36 <HAL_GPIO_Init+0xea>
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	2b12      	cmp	r3, #18
 8000d34:	d123      	bne.n	8000d7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	08da      	lsrs	r2, r3, #3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	3208      	adds	r2, #8
 8000d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	f003 0307 	and.w	r3, r3, #7
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	220f      	movs	r2, #15
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43db      	mvns	r3, r3
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	4013      	ands	r3, r2
 8000d58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	691a      	ldr	r2, [r3, #16]
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	f003 0307 	and.w	r3, r3, #7
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	08da      	lsrs	r2, r3, #3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3208      	adds	r2, #8
 8000d78:	6939      	ldr	r1, [r7, #16]
 8000d7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	2203      	movs	r2, #3
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	4013      	ands	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f003 0203 	and.w	r2, r3, #3
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	f000 8094 	beq.w	8000ee8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc0:	4b52      	ldr	r3, [pc, #328]	; (8000f0c <HAL_GPIO_Init+0x2c0>)
 8000dc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dc4:	4a51      	ldr	r2, [pc, #324]	; (8000f0c <HAL_GPIO_Init+0x2c0>)
 8000dc6:	f043 0301 	orr.w	r3, r3, #1
 8000dca:	6613      	str	r3, [r2, #96]	; 0x60
 8000dcc:	4b4f      	ldr	r3, [pc, #316]	; (8000f0c <HAL_GPIO_Init+0x2c0>)
 8000dce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dd0:	f003 0301 	and.w	r3, r3, #1
 8000dd4:	60bb      	str	r3, [r7, #8]
 8000dd6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000dd8:	4a4d      	ldr	r2, [pc, #308]	; (8000f10 <HAL_GPIO_Init+0x2c4>)
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	089b      	lsrs	r3, r3, #2
 8000dde:	3302      	adds	r3, #2
 8000de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	f003 0303 	and.w	r3, r3, #3
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	220f      	movs	r2, #15
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e02:	d00d      	beq.n	8000e20 <HAL_GPIO_Init+0x1d4>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a43      	ldr	r2, [pc, #268]	; (8000f14 <HAL_GPIO_Init+0x2c8>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d007      	beq.n	8000e1c <HAL_GPIO_Init+0x1d0>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4a42      	ldr	r2, [pc, #264]	; (8000f18 <HAL_GPIO_Init+0x2cc>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d101      	bne.n	8000e18 <HAL_GPIO_Init+0x1cc>
 8000e14:	2302      	movs	r3, #2
 8000e16:	e004      	b.n	8000e22 <HAL_GPIO_Init+0x1d6>
 8000e18:	2307      	movs	r3, #7
 8000e1a:	e002      	b.n	8000e22 <HAL_GPIO_Init+0x1d6>
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	e000      	b.n	8000e22 <HAL_GPIO_Init+0x1d6>
 8000e20:	2300      	movs	r3, #0
 8000e22:	697a      	ldr	r2, [r7, #20]
 8000e24:	f002 0203 	and.w	r2, r2, #3
 8000e28:	0092      	lsls	r2, r2, #2
 8000e2a:	4093      	lsls	r3, r2
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e32:	4937      	ldr	r1, [pc, #220]	; (8000f10 <HAL_GPIO_Init+0x2c4>)
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	089b      	lsrs	r3, r3, #2
 8000e38:	3302      	adds	r3, #2
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000e40:	4b36      	ldr	r3, [pc, #216]	; (8000f1c <HAL_GPIO_Init+0x2d0>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d003      	beq.n	8000e64 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e64:	4a2d      	ldr	r2, [pc, #180]	; (8000f1c <HAL_GPIO_Init+0x2d0>)
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000e6a:	4b2c      	ldr	r3, [pc, #176]	; (8000f1c <HAL_GPIO_Init+0x2d0>)
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	43db      	mvns	r3, r3
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	4013      	ands	r3, r2
 8000e78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d003      	beq.n	8000e8e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e8e:	4a23      	ldr	r2, [pc, #140]	; (8000f1c <HAL_GPIO_Init+0x2d0>)
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e94:	4b21      	ldr	r3, [pc, #132]	; (8000f1c <HAL_GPIO_Init+0x2d0>)
 8000e96:	689b      	ldr	r3, [r3, #8]
 8000e98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d003      	beq.n	8000eb8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000eb8:	4a18      	ldr	r2, [pc, #96]	; (8000f1c <HAL_GPIO_Init+0x2d0>)
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ebe:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <HAL_GPIO_Init+0x2d0>)
 8000ec0:	68db      	ldr	r3, [r3, #12]
 8000ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d003      	beq.n	8000ee2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ee2:	4a0e      	ldr	r2, [pc, #56]	; (8000f1c <HAL_GPIO_Init+0x2d0>)
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	3301      	adds	r3, #1
 8000eec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	f47f aeaf 	bne.w	8000c5c <HAL_GPIO_Init+0x10>
  }
}
 8000efe:	bf00      	nop
 8000f00:	371c      	adds	r7, #28
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	40010000 	.word	0x40010000
 8000f14:	48000400 	.word	0x48000400
 8000f18:	48000800 	.word	0x48000800
 8000f1c:	40010400 	.word	0x40010400

08000f20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d101      	bne.n	8000f32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e081      	b.n	8001036 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d106      	bne.n	8000f4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2200      	movs	r2, #0
 8000f42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f7ff fbf8 	bl	800073c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2224      	movs	r2, #36	; 0x24
 8000f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f022 0201 	bic.w	r2, r2, #1
 8000f62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	685a      	ldr	r2, [r3, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000f70:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	689a      	ldr	r2, [r3, #8]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f80:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d107      	bne.n	8000f9a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	689a      	ldr	r2, [r3, #8]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	e006      	b.n	8000fa8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	689a      	ldr	r2, [r3, #8]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000fa6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d104      	bne.n	8000fba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fb8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	6812      	ldr	r2, [r2, #0]
 8000fc4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fcc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	68da      	ldr	r2, [r3, #12]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000fdc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	691a      	ldr	r2, [r3, #16]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	695b      	ldr	r3, [r3, #20]
 8000fe6:	ea42 0103 	orr.w	r1, r2, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	699b      	ldr	r3, [r3, #24]
 8000fee:	021a      	lsls	r2, r3, #8
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	69d9      	ldr	r1, [r3, #28]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6a1a      	ldr	r2, [r3, #32]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	430a      	orrs	r2, r1
 8001006:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f042 0201 	orr.w	r2, r2, #1
 8001016:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2200      	movs	r2, #0
 800101c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2220      	movs	r2, #32
 8001022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b088      	sub	sp, #32
 8001044:	af02      	add	r7, sp, #8
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	607a      	str	r2, [r7, #4]
 800104a:	461a      	mov	r2, r3
 800104c:	460b      	mov	r3, r1
 800104e:	817b      	strh	r3, [r7, #10]
 8001050:	4613      	mov	r3, r2
 8001052:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800105a:	b2db      	uxtb	r3, r3
 800105c:	2b20      	cmp	r3, #32
 800105e:	f040 80da 	bne.w	8001216 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001068:	2b01      	cmp	r3, #1
 800106a:	d101      	bne.n	8001070 <HAL_I2C_Master_Transmit+0x30>
 800106c:	2302      	movs	r3, #2
 800106e:	e0d3      	b.n	8001218 <HAL_I2C_Master_Transmit+0x1d8>
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	2201      	movs	r2, #1
 8001074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001078:	f7ff fcfa 	bl	8000a70 <HAL_GetTick>
 800107c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	2319      	movs	r3, #25
 8001084:	2201      	movs	r2, #1
 8001086:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800108a:	68f8      	ldr	r0, [r7, #12]
 800108c:	f000 f8f0 	bl	8001270 <I2C_WaitOnFlagUntilTimeout>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e0be      	b.n	8001218 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	2221      	movs	r2, #33	; 0x21
 800109e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	2210      	movs	r2, #16
 80010a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	2200      	movs	r2, #0
 80010ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	893a      	ldrh	r2, [r7, #8]
 80010ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	2200      	movs	r2, #0
 80010c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	2bff      	cmp	r3, #255	; 0xff
 80010ca:	d90e      	bls.n	80010ea <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	22ff      	movs	r2, #255	; 0xff
 80010d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	8979      	ldrh	r1, [r7, #10]
 80010da:	4b51      	ldr	r3, [pc, #324]	; (8001220 <HAL_I2C_Master_Transmit+0x1e0>)
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010e2:	68f8      	ldr	r0, [r7, #12]
 80010e4:	f000 f9e6 	bl	80014b4 <I2C_TransferConfig>
 80010e8:	e06c      	b.n	80011c4 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	8979      	ldrh	r1, [r7, #10]
 80010fc:	4b48      	ldr	r3, [pc, #288]	; (8001220 <HAL_I2C_Master_Transmit+0x1e0>)
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001104:	68f8      	ldr	r0, [r7, #12]
 8001106:	f000 f9d5 	bl	80014b4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800110a:	e05b      	b.n	80011c4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800110c:	697a      	ldr	r2, [r7, #20]
 800110e:	6a39      	ldr	r1, [r7, #32]
 8001110:	68f8      	ldr	r0, [r7, #12]
 8001112:	f000 f8ed 	bl	80012f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	e07b      	b.n	8001218 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001124:	781a      	ldrb	r2, [r3, #0]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001130:	1c5a      	adds	r2, r3, #1
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800113a:	b29b      	uxth	r3, r3
 800113c:	3b01      	subs	r3, #1
 800113e:	b29a      	uxth	r2, r3
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001148:	3b01      	subs	r3, #1
 800114a:	b29a      	uxth	r2, r3
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001154:	b29b      	uxth	r3, r3
 8001156:	2b00      	cmp	r3, #0
 8001158:	d034      	beq.n	80011c4 <HAL_I2C_Master_Transmit+0x184>
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800115e:	2b00      	cmp	r3, #0
 8001160:	d130      	bne.n	80011c4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	6a3b      	ldr	r3, [r7, #32]
 8001168:	2200      	movs	r2, #0
 800116a:	2180      	movs	r1, #128	; 0x80
 800116c:	68f8      	ldr	r0, [r7, #12]
 800116e:	f000 f87f 	bl	8001270 <I2C_WaitOnFlagUntilTimeout>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e04d      	b.n	8001218 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001180:	b29b      	uxth	r3, r3
 8001182:	2bff      	cmp	r3, #255	; 0xff
 8001184:	d90e      	bls.n	80011a4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	22ff      	movs	r2, #255	; 0xff
 800118a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001190:	b2da      	uxtb	r2, r3
 8001192:	8979      	ldrh	r1, [r7, #10]
 8001194:	2300      	movs	r3, #0
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800119c:	68f8      	ldr	r0, [r7, #12]
 800119e:	f000 f989 	bl	80014b4 <I2C_TransferConfig>
 80011a2:	e00f      	b.n	80011c4 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	8979      	ldrh	r1, [r7, #10]
 80011b6:	2300      	movs	r3, #0
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011be:	68f8      	ldr	r0, [r7, #12]
 80011c0:	f000 f978 	bl	80014b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d19e      	bne.n	800110c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011ce:	697a      	ldr	r2, [r7, #20]
 80011d0:	6a39      	ldr	r1, [r7, #32]
 80011d2:	68f8      	ldr	r0, [r7, #12]
 80011d4:	f000 f8cc 	bl	8001370 <I2C_WaitOnSTOPFlagUntilTimeout>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e01a      	b.n	8001218 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2220      	movs	r2, #32
 80011e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	6859      	ldr	r1, [r3, #4]
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <HAL_I2C_Master_Transmit+0x1e4>)
 80011f6:	400b      	ands	r3, r1
 80011f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2220      	movs	r2, #32
 80011fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	2200      	movs	r2, #0
 8001206:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	2200      	movs	r2, #0
 800120e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001212:	2300      	movs	r3, #0
 8001214:	e000      	b.n	8001218 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001216:	2302      	movs	r3, #2
  }
}
 8001218:	4618      	mov	r0, r3
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	80002000 	.word	0x80002000
 8001224:	fe00e800 	.word	0xfe00e800

08001228 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	699b      	ldr	r3, [r3, #24]
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	2b02      	cmp	r3, #2
 800123c:	d103      	bne.n	8001246 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2200      	movs	r2, #0
 8001244:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	2b01      	cmp	r3, #1
 8001252:	d007      	beq.n	8001264 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	699a      	ldr	r2, [r3, #24]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f042 0201 	orr.w	r2, r2, #1
 8001262:	619a      	str	r2, [r3, #24]
  }
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	603b      	str	r3, [r7, #0]
 800127c:	4613      	mov	r3, r2
 800127e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001280:	e022      	b.n	80012c8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001288:	d01e      	beq.n	80012c8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800128a:	f7ff fbf1 	bl	8000a70 <HAL_GetTick>
 800128e:	4602      	mov	r2, r0
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	429a      	cmp	r2, r3
 8001298:	d302      	bcc.n	80012a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d113      	bne.n	80012c8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a4:	f043 0220 	orr.w	r2, r3, #32
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	2220      	movs	r2, #32
 80012b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e00f      	b.n	80012e8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	699a      	ldr	r2, [r3, #24]
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	4013      	ands	r3, r2
 80012d2:	68ba      	ldr	r2, [r7, #8]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	bf0c      	ite	eq
 80012d8:	2301      	moveq	r3, #1
 80012da:	2300      	movne	r3, #0
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	461a      	mov	r2, r3
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d0cd      	beq.n	8001282 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80012fc:	e02c      	b.n	8001358 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	68b9      	ldr	r1, [r7, #8]
 8001302:	68f8      	ldr	r0, [r7, #12]
 8001304:	f000 f870 	bl	80013e8 <I2C_IsAcknowledgeFailed>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e02a      	b.n	8001368 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001318:	d01e      	beq.n	8001358 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800131a:	f7ff fba9 	bl	8000a70 <HAL_GetTick>
 800131e:	4602      	mov	r2, r0
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	68ba      	ldr	r2, [r7, #8]
 8001326:	429a      	cmp	r2, r3
 8001328:	d302      	bcc.n	8001330 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d113      	bne.n	8001358 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001334:	f043 0220 	orr.w	r2, r3, #32
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2220      	movs	r2, #32
 8001340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2200      	movs	r2, #0
 8001348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2200      	movs	r2, #0
 8001350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	e007      	b.n	8001368 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b02      	cmp	r3, #2
 8001364:	d1cb      	bne.n	80012fe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001366:	2300      	movs	r3, #0
}
 8001368:	4618      	mov	r0, r3
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800137c:	e028      	b.n	80013d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	68b9      	ldr	r1, [r7, #8]
 8001382:	68f8      	ldr	r0, [r7, #12]
 8001384:	f000 f830 	bl	80013e8 <I2C_IsAcknowledgeFailed>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e026      	b.n	80013e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001392:	f7ff fb6d 	bl	8000a70 <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	68ba      	ldr	r2, [r7, #8]
 800139e:	429a      	cmp	r2, r3
 80013a0:	d302      	bcc.n	80013a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d113      	bne.n	80013d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ac:	f043 0220 	orr.w	r2, r3, #32
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2220      	movs	r2, #32
 80013b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2200      	movs	r2, #0
 80013c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2200      	movs	r2, #0
 80013c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e007      	b.n	80013e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	699b      	ldr	r3, [r3, #24]
 80013d6:	f003 0320 	and.w	r3, r3, #32
 80013da:	2b20      	cmp	r3, #32
 80013dc:	d1cf      	bne.n	800137e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80013de:	2300      	movs	r3, #0
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3710      	adds	r7, #16
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	f003 0310 	and.w	r3, r3, #16
 80013fe:	2b10      	cmp	r3, #16
 8001400:	d151      	bne.n	80014a6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001402:	e022      	b.n	800144a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800140a:	d01e      	beq.n	800144a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800140c:	f7ff fb30 	bl	8000a70 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	68ba      	ldr	r2, [r7, #8]
 8001418:	429a      	cmp	r2, r3
 800141a:	d302      	bcc.n	8001422 <I2C_IsAcknowledgeFailed+0x3a>
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d113      	bne.n	800144a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001426:	f043 0220 	orr.w	r2, r3, #32
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	2220      	movs	r2, #32
 8001432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	2200      	movs	r2, #0
 800143a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	2200      	movs	r2, #0
 8001442:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e02e      	b.n	80014a8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	f003 0320 	and.w	r3, r3, #32
 8001454:	2b20      	cmp	r3, #32
 8001456:	d1d5      	bne.n	8001404 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2210      	movs	r2, #16
 800145e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2220      	movs	r2, #32
 8001466:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001468:	68f8      	ldr	r0, [r7, #12]
 800146a:	f7ff fedd 	bl	8001228 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	6859      	ldr	r1, [r3, #4]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	4b0d      	ldr	r3, [pc, #52]	; (80014b0 <I2C_IsAcknowledgeFailed+0xc8>)
 800147a:	400b      	ands	r3, r1
 800147c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001482:	f043 0204 	orr.w	r2, r3, #4
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2220      	movs	r2, #32
 800148e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	2200      	movs	r2, #0
 8001496:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2200      	movs	r2, #0
 800149e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e000      	b.n	80014a8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80014a6:	2300      	movs	r3, #0
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3710      	adds	r7, #16
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	fe00e800 	.word	0xfe00e800

080014b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	460b      	mov	r3, r1
 80014c0:	817b      	strh	r3, [r7, #10]
 80014c2:	4613      	mov	r3, r2
 80014c4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	685a      	ldr	r2, [r3, #4]
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	0d5b      	lsrs	r3, r3, #21
 80014d0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80014d4:	4b0d      	ldr	r3, [pc, #52]	; (800150c <I2C_TransferConfig+0x58>)
 80014d6:	430b      	orrs	r3, r1
 80014d8:	43db      	mvns	r3, r3
 80014da:	ea02 0103 	and.w	r1, r2, r3
 80014de:	897b      	ldrh	r3, [r7, #10]
 80014e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80014e4:	7a7b      	ldrb	r3, [r7, #9]
 80014e6:	041b      	lsls	r3, r3, #16
 80014e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80014ec:	431a      	orrs	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	431a      	orrs	r2, r3
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	431a      	orrs	r2, r3
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	430a      	orrs	r2, r1
 80014fc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80014fe:	bf00      	nop
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	03ff63ff 	.word	0x03ff63ff

08001510 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b20      	cmp	r3, #32
 8001524:	d138      	bne.n	8001598 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800152c:	2b01      	cmp	r3, #1
 800152e:	d101      	bne.n	8001534 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001530:	2302      	movs	r3, #2
 8001532:	e032      	b.n	800159a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2201      	movs	r2, #1
 8001538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2224      	movs	r2, #36	; 0x24
 8001540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f022 0201 	bic.w	r2, r2, #1
 8001552:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001562:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6819      	ldr	r1, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	683a      	ldr	r2, [r7, #0]
 8001570:	430a      	orrs	r2, r1
 8001572:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f042 0201 	orr.w	r2, r2, #1
 8001582:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2220      	movs	r2, #32
 8001588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001594:	2300      	movs	r3, #0
 8001596:	e000      	b.n	800159a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001598:	2302      	movs	r3, #2
  }
}
 800159a:	4618      	mov	r0, r3
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b085      	sub	sp, #20
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
 80015ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b20      	cmp	r3, #32
 80015ba:	d139      	bne.n	8001630 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d101      	bne.n	80015ca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80015c6:	2302      	movs	r3, #2
 80015c8:	e033      	b.n	8001632 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2201      	movs	r2, #1
 80015ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2224      	movs	r2, #36	; 0x24
 80015d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f022 0201 	bic.w	r2, r2, #1
 80015e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80015f8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	021b      	lsls	r3, r3, #8
 80015fe:	68fa      	ldr	r2, [r7, #12]
 8001600:	4313      	orrs	r3, r2
 8001602:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	68fa      	ldr	r2, [r7, #12]
 800160a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f042 0201 	orr.w	r2, r2, #1
 800161a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2220      	movs	r2, #32
 8001620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800162c:	2300      	movs	r3, #0
 800162e:	e000      	b.n	8001632 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001630:	2302      	movs	r3, #2
  }
}
 8001632:	4618      	mov	r0, r3
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
	...

08001640 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001644:	4b05      	ldr	r3, [pc, #20]	; (800165c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a04      	ldr	r2, [pc, #16]	; (800165c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800164a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800164e:	6013      	str	r3, [r2, #0]
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	40007000 	.word	0x40007000

08001660 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001664:	4b04      	ldr	r3, [pc, #16]	; (8001678 <HAL_PWREx_GetVoltageRange+0x18>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800166c:	4618      	mov	r0, r3
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	40007000 	.word	0x40007000

0800167c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800168a:	d130      	bne.n	80016ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800168c:	4b23      	ldr	r3, [pc, #140]	; (800171c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001694:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001698:	d038      	beq.n	800170c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800169a:	4b20      	ldr	r3, [pc, #128]	; (800171c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016a2:	4a1e      	ldr	r2, [pc, #120]	; (800171c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016a8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016aa:	4b1d      	ldr	r3, [pc, #116]	; (8001720 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2232      	movs	r2, #50	; 0x32
 80016b0:	fb02 f303 	mul.w	r3, r2, r3
 80016b4:	4a1b      	ldr	r2, [pc, #108]	; (8001724 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80016b6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ba:	0c9b      	lsrs	r3, r3, #18
 80016bc:	3301      	adds	r3, #1
 80016be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016c0:	e002      	b.n	80016c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	3b01      	subs	r3, #1
 80016c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016c8:	4b14      	ldr	r3, [pc, #80]	; (800171c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ca:	695b      	ldr	r3, [r3, #20]
 80016cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016d4:	d102      	bne.n	80016dc <HAL_PWREx_ControlVoltageScaling+0x60>
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1f2      	bne.n	80016c2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016dc:	4b0f      	ldr	r3, [pc, #60]	; (800171c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016de:	695b      	ldr	r3, [r3, #20]
 80016e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016e8:	d110      	bne.n	800170c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e00f      	b.n	800170e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80016ee:	4b0b      	ldr	r3, [pc, #44]	; (800171c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016fa:	d007      	beq.n	800170c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80016fc:	4b07      	ldr	r3, [pc, #28]	; (800171c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001704:	4a05      	ldr	r2, [pc, #20]	; (800171c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001706:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800170a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3714      	adds	r7, #20
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	40007000 	.word	0x40007000
 8001720:	20000000 	.word	0x20000000
 8001724:	431bde83 	.word	0x431bde83

08001728 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b088      	sub	sp, #32
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d102      	bne.n	800173c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	f000 bc11 	b.w	8001f5e <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800173c:	4ba0      	ldr	r3, [pc, #640]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f003 030c 	and.w	r3, r3, #12
 8001744:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001746:	4b9e      	ldr	r3, [pc, #632]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	f003 0303 	and.w	r3, r3, #3
 800174e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0310 	and.w	r3, r3, #16
 8001758:	2b00      	cmp	r3, #0
 800175a:	f000 80e4 	beq.w	8001926 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d007      	beq.n	8001774 <HAL_RCC_OscConfig+0x4c>
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	2b0c      	cmp	r3, #12
 8001768:	f040 808b 	bne.w	8001882 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	2b01      	cmp	r3, #1
 8001770:	f040 8087 	bne.w	8001882 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001774:	4b92      	ldr	r3, [pc, #584]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d005      	beq.n	800178c <HAL_RCC_OscConfig+0x64>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d101      	bne.n	800178c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e3e8      	b.n	8001f5e <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a1a      	ldr	r2, [r3, #32]
 8001790:	4b8b      	ldr	r3, [pc, #556]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0308 	and.w	r3, r3, #8
 8001798:	2b00      	cmp	r3, #0
 800179a:	d004      	beq.n	80017a6 <HAL_RCC_OscConfig+0x7e>
 800179c:	4b88      	ldr	r3, [pc, #544]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017a4:	e005      	b.n	80017b2 <HAL_RCC_OscConfig+0x8a>
 80017a6:	4b86      	ldr	r3, [pc, #536]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 80017a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017ac:	091b      	lsrs	r3, r3, #4
 80017ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d223      	bcs.n	80017fe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a1b      	ldr	r3, [r3, #32]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 fd94 	bl	80022e8 <RCC_SetFlashLatencyFromMSIRange>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e3c9      	b.n	8001f5e <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017ca:	4b7d      	ldr	r3, [pc, #500]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a7c      	ldr	r2, [pc, #496]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 80017d0:	f043 0308 	orr.w	r3, r3, #8
 80017d4:	6013      	str	r3, [r2, #0]
 80017d6:	4b7a      	ldr	r3, [pc, #488]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a1b      	ldr	r3, [r3, #32]
 80017e2:	4977      	ldr	r1, [pc, #476]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 80017e4:	4313      	orrs	r3, r2
 80017e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017e8:	4b75      	ldr	r3, [pc, #468]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	69db      	ldr	r3, [r3, #28]
 80017f4:	021b      	lsls	r3, r3, #8
 80017f6:	4972      	ldr	r1, [pc, #456]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 80017f8:	4313      	orrs	r3, r2
 80017fa:	604b      	str	r3, [r1, #4]
 80017fc:	e025      	b.n	800184a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017fe:	4b70      	ldr	r3, [pc, #448]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a6f      	ldr	r2, [pc, #444]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 8001804:	f043 0308 	orr.w	r3, r3, #8
 8001808:	6013      	str	r3, [r2, #0]
 800180a:	4b6d      	ldr	r3, [pc, #436]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a1b      	ldr	r3, [r3, #32]
 8001816:	496a      	ldr	r1, [pc, #424]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 8001818:	4313      	orrs	r3, r2
 800181a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800181c:	4b68      	ldr	r3, [pc, #416]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	69db      	ldr	r3, [r3, #28]
 8001828:	021b      	lsls	r3, r3, #8
 800182a:	4965      	ldr	r1, [pc, #404]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 800182c:	4313      	orrs	r3, r2
 800182e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d109      	bne.n	800184a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a1b      	ldr	r3, [r3, #32]
 800183a:	4618      	mov	r0, r3
 800183c:	f000 fd54 	bl	80022e8 <RCC_SetFlashLatencyFromMSIRange>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e389      	b.n	8001f5e <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800184a:	f000 fc6f 	bl	800212c <HAL_RCC_GetSysClockFreq>
 800184e:	4601      	mov	r1, r0
 8001850:	4b5b      	ldr	r3, [pc, #364]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	091b      	lsrs	r3, r3, #4
 8001856:	f003 030f 	and.w	r3, r3, #15
 800185a:	4a5a      	ldr	r2, [pc, #360]	; (80019c4 <HAL_RCC_OscConfig+0x29c>)
 800185c:	5cd3      	ldrb	r3, [r2, r3]
 800185e:	f003 031f 	and.w	r3, r3, #31
 8001862:	fa21 f303 	lsr.w	r3, r1, r3
 8001866:	4a58      	ldr	r2, [pc, #352]	; (80019c8 <HAL_RCC_OscConfig+0x2a0>)
 8001868:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800186a:	4b58      	ldr	r3, [pc, #352]	; (80019cc <HAL_RCC_OscConfig+0x2a4>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f7fe fffc 	bl	800086c <HAL_InitTick>
 8001874:	4603      	mov	r3, r0
 8001876:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001878:	7bfb      	ldrb	r3, [r7, #15]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d052      	beq.n	8001924 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800187e:	7bfb      	ldrb	r3, [r7, #15]
 8001880:	e36d      	b.n	8001f5e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d032      	beq.n	80018f0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800188a:	4b4d      	ldr	r3, [pc, #308]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a4c      	ldr	r2, [pc, #304]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001896:	f7ff f8eb 	bl	8000a70 <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800189e:	f7ff f8e7 	bl	8000a70 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e356      	b.n	8001f5e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018b0:	4b43      	ldr	r3, [pc, #268]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d0f0      	beq.n	800189e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018bc:	4b40      	ldr	r3, [pc, #256]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a3f      	ldr	r2, [pc, #252]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 80018c2:	f043 0308 	orr.w	r3, r3, #8
 80018c6:	6013      	str	r3, [r2, #0]
 80018c8:	4b3d      	ldr	r3, [pc, #244]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a1b      	ldr	r3, [r3, #32]
 80018d4:	493a      	ldr	r1, [pc, #232]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018da:	4b39      	ldr	r3, [pc, #228]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	021b      	lsls	r3, r3, #8
 80018e8:	4935      	ldr	r1, [pc, #212]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	604b      	str	r3, [r1, #4]
 80018ee:	e01a      	b.n	8001926 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018f0:	4b33      	ldr	r3, [pc, #204]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a32      	ldr	r2, [pc, #200]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 80018f6:	f023 0301 	bic.w	r3, r3, #1
 80018fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018fc:	f7ff f8b8 	bl	8000a70 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001904:	f7ff f8b4 	bl	8000a70 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e323      	b.n	8001f5e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001916:	4b2a      	ldr	r3, [pc, #168]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1f0      	bne.n	8001904 <HAL_RCC_OscConfig+0x1dc>
 8001922:	e000      	b.n	8001926 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001924:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b00      	cmp	r3, #0
 8001930:	d073      	beq.n	8001a1a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	2b08      	cmp	r3, #8
 8001936:	d005      	beq.n	8001944 <HAL_RCC_OscConfig+0x21c>
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	2b0c      	cmp	r3, #12
 800193c:	d10e      	bne.n	800195c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	2b03      	cmp	r3, #3
 8001942:	d10b      	bne.n	800195c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001944:	4b1e      	ldr	r3, [pc, #120]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d063      	beq.n	8001a18 <HAL_RCC_OscConfig+0x2f0>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d15f      	bne.n	8001a18 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e300      	b.n	8001f5e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001964:	d106      	bne.n	8001974 <HAL_RCC_OscConfig+0x24c>
 8001966:	4b16      	ldr	r3, [pc, #88]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a15      	ldr	r2, [pc, #84]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 800196c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001970:	6013      	str	r3, [r2, #0]
 8001972:	e01d      	b.n	80019b0 <HAL_RCC_OscConfig+0x288>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800197c:	d10c      	bne.n	8001998 <HAL_RCC_OscConfig+0x270>
 800197e:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a0f      	ldr	r2, [pc, #60]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 8001984:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001988:	6013      	str	r3, [r2, #0]
 800198a:	4b0d      	ldr	r3, [pc, #52]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a0c      	ldr	r2, [pc, #48]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 8001990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001994:	6013      	str	r3, [r2, #0]
 8001996:	e00b      	b.n	80019b0 <HAL_RCC_OscConfig+0x288>
 8001998:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a08      	ldr	r2, [pc, #32]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 800199e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019a2:	6013      	str	r3, [r2, #0]
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a05      	ldr	r2, [pc, #20]	; (80019c0 <HAL_RCC_OscConfig+0x298>)
 80019aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d01b      	beq.n	80019f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b8:	f7ff f85a 	bl	8000a70 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019be:	e010      	b.n	80019e2 <HAL_RCC_OscConfig+0x2ba>
 80019c0:	40021000 	.word	0x40021000
 80019c4:	08006734 	.word	0x08006734
 80019c8:	20000000 	.word	0x20000000
 80019cc:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019d0:	f7ff f84e 	bl	8000a70 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b64      	cmp	r3, #100	; 0x64
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e2bd      	b.n	8001f5e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019e2:	4baf      	ldr	r3, [pc, #700]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d0f0      	beq.n	80019d0 <HAL_RCC_OscConfig+0x2a8>
 80019ee:	e014      	b.n	8001a1a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f0:	f7ff f83e 	bl	8000a70 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019f8:	f7ff f83a 	bl	8000a70 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b64      	cmp	r3, #100	; 0x64
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e2a9      	b.n	8001f5e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a0a:	4ba5      	ldr	r3, [pc, #660]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1f0      	bne.n	80019f8 <HAL_RCC_OscConfig+0x2d0>
 8001a16:	e000      	b.n	8001a1a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d060      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	2b04      	cmp	r3, #4
 8001a2a:	d005      	beq.n	8001a38 <HAL_RCC_OscConfig+0x310>
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	2b0c      	cmp	r3, #12
 8001a30:	d119      	bne.n	8001a66 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d116      	bne.n	8001a66 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a38:	4b99      	ldr	r3, [pc, #612]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d005      	beq.n	8001a50 <HAL_RCC_OscConfig+0x328>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d101      	bne.n	8001a50 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e286      	b.n	8001f5e <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a50:	4b93      	ldr	r3, [pc, #588]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	691b      	ldr	r3, [r3, #16]
 8001a5c:	061b      	lsls	r3, r3, #24
 8001a5e:	4990      	ldr	r1, [pc, #576]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001a60:	4313      	orrs	r3, r2
 8001a62:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a64:	e040      	b.n	8001ae8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d023      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a6e:	4b8c      	ldr	r3, [pc, #560]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a8b      	ldr	r2, [pc, #556]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7a:	f7fe fff9 	bl	8000a70 <HAL_GetTick>
 8001a7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a80:	e008      	b.n	8001a94 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a82:	f7fe fff5 	bl	8000a70 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e264      	b.n	8001f5e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a94:	4b82      	ldr	r3, [pc, #520]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d0f0      	beq.n	8001a82 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa0:	4b7f      	ldr	r3, [pc, #508]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	061b      	lsls	r3, r3, #24
 8001aae:	497c      	ldr	r1, [pc, #496]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	604b      	str	r3, [r1, #4]
 8001ab4:	e018      	b.n	8001ae8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ab6:	4b7a      	ldr	r3, [pc, #488]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a79      	ldr	r2, [pc, #484]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001abc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ac0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac2:	f7fe ffd5 	bl	8000a70 <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aca:	f7fe ffd1 	bl	8000a70 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e240      	b.n	8001f5e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001adc:	4b70      	ldr	r3, [pc, #448]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1f0      	bne.n	8001aca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0308 	and.w	r3, r3, #8
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d03c      	beq.n	8001b6e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	695b      	ldr	r3, [r3, #20]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d01c      	beq.n	8001b36 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001afc:	4b68      	ldr	r3, [pc, #416]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001afe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b02:	4a67      	ldr	r2, [pc, #412]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b0c:	f7fe ffb0 	bl	8000a70 <HAL_GetTick>
 8001b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b12:	e008      	b.n	8001b26 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b14:	f7fe ffac 	bl	8000a70 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e21b      	b.n	8001f5e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b26:	4b5e      	ldr	r3, [pc, #376]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001b28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d0ef      	beq.n	8001b14 <HAL_RCC_OscConfig+0x3ec>
 8001b34:	e01b      	b.n	8001b6e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b36:	4b5a      	ldr	r3, [pc, #360]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001b38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b3c:	4a58      	ldr	r2, [pc, #352]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001b3e:	f023 0301 	bic.w	r3, r3, #1
 8001b42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b46:	f7fe ff93 	bl	8000a70 <HAL_GetTick>
 8001b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b4e:	f7fe ff8f 	bl	8000a70 <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e1fe      	b.n	8001f5e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b60:	4b4f      	ldr	r3, [pc, #316]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001b62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1ef      	bne.n	8001b4e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0304 	and.w	r3, r3, #4
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f000 80a6 	beq.w	8001cc8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b80:	4b47      	ldr	r3, [pc, #284]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d10d      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b8c:	4b44      	ldr	r3, [pc, #272]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b90:	4a43      	ldr	r2, [pc, #268]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b96:	6593      	str	r3, [r2, #88]	; 0x58
 8001b98:	4b41      	ldr	r3, [pc, #260]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba0:	60bb      	str	r3, [r7, #8]
 8001ba2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ba8:	4b3e      	ldr	r3, [pc, #248]	; (8001ca4 <HAL_RCC_OscConfig+0x57c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d118      	bne.n	8001be6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bb4:	4b3b      	ldr	r3, [pc, #236]	; (8001ca4 <HAL_RCC_OscConfig+0x57c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a3a      	ldr	r2, [pc, #232]	; (8001ca4 <HAL_RCC_OscConfig+0x57c>)
 8001bba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bbe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bc0:	f7fe ff56 	bl	8000a70 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bc8:	f7fe ff52 	bl	8000a70 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e1c1      	b.n	8001f5e <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bda:	4b32      	ldr	r3, [pc, #200]	; (8001ca4 <HAL_RCC_OscConfig+0x57c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d0f0      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d108      	bne.n	8001c00 <HAL_RCC_OscConfig+0x4d8>
 8001bee:	4b2c      	ldr	r3, [pc, #176]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bf4:	4a2a      	ldr	r2, [pc, #168]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001bf6:	f043 0301 	orr.w	r3, r3, #1
 8001bfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bfe:	e024      	b.n	8001c4a <HAL_RCC_OscConfig+0x522>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	2b05      	cmp	r3, #5
 8001c06:	d110      	bne.n	8001c2a <HAL_RCC_OscConfig+0x502>
 8001c08:	4b25      	ldr	r3, [pc, #148]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c0e:	4a24      	ldr	r2, [pc, #144]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001c10:	f043 0304 	orr.w	r3, r3, #4
 8001c14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c18:	4b21      	ldr	r3, [pc, #132]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c1e:	4a20      	ldr	r2, [pc, #128]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c28:	e00f      	b.n	8001c4a <HAL_RCC_OscConfig+0x522>
 8001c2a:	4b1d      	ldr	r3, [pc, #116]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c30:	4a1b      	ldr	r2, [pc, #108]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001c32:	f023 0301 	bic.w	r3, r3, #1
 8001c36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c3a:	4b19      	ldr	r3, [pc, #100]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c40:	4a17      	ldr	r2, [pc, #92]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001c42:	f023 0304 	bic.w	r3, r3, #4
 8001c46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d016      	beq.n	8001c80 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c52:	f7fe ff0d 	bl	8000a70 <HAL_GetTick>
 8001c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c58:	e00a      	b.n	8001c70 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5a:	f7fe ff09 	bl	8000a70 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e176      	b.n	8001f5e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c70:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <HAL_RCC_OscConfig+0x578>)
 8001c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d0ed      	beq.n	8001c5a <HAL_RCC_OscConfig+0x532>
 8001c7e:	e01a      	b.n	8001cb6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c80:	f7fe fef6 	bl	8000a70 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c86:	e00f      	b.n	8001ca8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c88:	f7fe fef2 	bl	8000a70 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d906      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e15f      	b.n	8001f5e <HAL_RCC_OscConfig+0x836>
 8001c9e:	bf00      	nop
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ca8:	4baa      	ldr	r3, [pc, #680]	; (8001f54 <HAL_RCC_OscConfig+0x82c>)
 8001caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1e8      	bne.n	8001c88 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cb6:	7ffb      	ldrb	r3, [r7, #31]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d105      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cbc:	4ba5      	ldr	r3, [pc, #660]	; (8001f54 <HAL_RCC_OscConfig+0x82c>)
 8001cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc0:	4aa4      	ldr	r2, [pc, #656]	; (8001f54 <HAL_RCC_OscConfig+0x82c>)
 8001cc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cc6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0320 	and.w	r3, r3, #32
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d03c      	beq.n	8001d4e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d01c      	beq.n	8001d16 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001cdc:	4b9d      	ldr	r3, [pc, #628]	; (8001f54 <HAL_RCC_OscConfig+0x82c>)
 8001cde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ce2:	4a9c      	ldr	r2, [pc, #624]	; (8001f54 <HAL_RCC_OscConfig+0x82c>)
 8001ce4:	f043 0301 	orr.w	r3, r3, #1
 8001ce8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cec:	f7fe fec0 	bl	8000a70 <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cf4:	f7fe febc 	bl	8000a70 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e12b      	b.n	8001f5e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d06:	4b93      	ldr	r3, [pc, #588]	; (8001f54 <HAL_RCC_OscConfig+0x82c>)
 8001d08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0ef      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x5cc>
 8001d14:	e01b      	b.n	8001d4e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d16:	4b8f      	ldr	r3, [pc, #572]	; (8001f54 <HAL_RCC_OscConfig+0x82c>)
 8001d18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d1c:	4a8d      	ldr	r2, [pc, #564]	; (8001f54 <HAL_RCC_OscConfig+0x82c>)
 8001d1e:	f023 0301 	bic.w	r3, r3, #1
 8001d22:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d26:	f7fe fea3 	bl	8000a70 <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d2c:	e008      	b.n	8001d40 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d2e:	f7fe fe9f 	bl	8000a70 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e10e      	b.n	8001f5e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d40:	4b84      	ldr	r3, [pc, #528]	; (8001f54 <HAL_RCC_OscConfig+0x82c>)
 8001d42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1ef      	bne.n	8001d2e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f000 8102 	beq.w	8001f5c <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	f040 80c5 	bne.w	8001eec <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d62:	4b7c      	ldr	r3, [pc, #496]	; (8001f54 <HAL_RCC_OscConfig+0x82c>)
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	f003 0203 	and.w	r2, r3, #3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d12c      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d80:	3b01      	subs	r3, #1
 8001d82:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d123      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d92:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d11b      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001da2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d113      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001db2:	085b      	lsrs	r3, r3, #1
 8001db4:	3b01      	subs	r3, #1
 8001db6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d109      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	085b      	lsrs	r3, r3, #1
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d067      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	2b0c      	cmp	r3, #12
 8001dd4:	d062      	beq.n	8001e9c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001dd6:	4b5f      	ldr	r3, [pc, #380]	; (8001f54 <HAL_RCC_OscConfig+0x82c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e0bb      	b.n	8001f5e <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001de6:	4b5b      	ldr	r3, [pc, #364]	; (8001f54 <HAL_RCC_OscConfig+0x82c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a5a      	ldr	r2, [pc, #360]	; (8001f54 <HAL_RCC_OscConfig+0x82c>)
 8001dec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001df0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001df2:	f7fe fe3d 	bl	8000a70 <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001df8:	e008      	b.n	8001e0c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dfa:	f7fe fe39 	bl	8000a70 <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e0a8      	b.n	8001f5e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e0c:	4b51      	ldr	r3, [pc, #324]	; (8001f54 <HAL_RCC_OscConfig+0x82c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1f0      	bne.n	8001dfa <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e18:	4b4e      	ldr	r3, [pc, #312]	; (8001f54 <HAL_RCC_OscConfig+0x82c>)
 8001e1a:	68da      	ldr	r2, [r3, #12]
 8001e1c:	4b4e      	ldr	r3, [pc, #312]	; (8001f58 <HAL_RCC_OscConfig+0x830>)
 8001e1e:	4013      	ands	r3, r2
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e28:	3a01      	subs	r2, #1
 8001e2a:	0112      	lsls	r2, r2, #4
 8001e2c:	4311      	orrs	r1, r2
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e32:	0212      	lsls	r2, r2, #8
 8001e34:	4311      	orrs	r1, r2
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e3a:	0852      	lsrs	r2, r2, #1
 8001e3c:	3a01      	subs	r2, #1
 8001e3e:	0552      	lsls	r2, r2, #21
 8001e40:	4311      	orrs	r1, r2
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e46:	0852      	lsrs	r2, r2, #1
 8001e48:	3a01      	subs	r2, #1
 8001e4a:	0652      	lsls	r2, r2, #25
 8001e4c:	4311      	orrs	r1, r2
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e52:	06d2      	lsls	r2, r2, #27
 8001e54:	430a      	orrs	r2, r1
 8001e56:	493f      	ldr	r1, [pc, #252]	; (8001f54 <HAL_RCC_OscConfig+0x82c>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e5c:	4b3d      	ldr	r3, [pc, #244]	; (8001f54 <HAL_RCC_OscConfig+0x82c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a3c      	ldr	r2, [pc, #240]	; (8001f54 <HAL_RCC_OscConfig+0x82c>)
 8001e62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e66:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e68:	4b3a      	ldr	r3, [pc, #232]	; (8001f54 <HAL_RCC_OscConfig+0x82c>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	4a39      	ldr	r2, [pc, #228]	; (8001f54 <HAL_RCC_OscConfig+0x82c>)
 8001e6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e72:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e74:	f7fe fdfc 	bl	8000a70 <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e7c:	f7fe fdf8 	bl	8000a70 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e067      	b.n	8001f5e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e8e:	4b31      	ldr	r3, [pc, #196]	; (8001f54 <HAL_RCC_OscConfig+0x82c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d0f0      	beq.n	8001e7c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e9a:	e05f      	b.n	8001f5c <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e05e      	b.n	8001f5e <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ea0:	4b2c      	ldr	r3, [pc, #176]	; (8001f54 <HAL_RCC_OscConfig+0x82c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d157      	bne.n	8001f5c <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001eac:	4b29      	ldr	r3, [pc, #164]	; (8001f54 <HAL_RCC_OscConfig+0x82c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a28      	ldr	r2, [pc, #160]	; (8001f54 <HAL_RCC_OscConfig+0x82c>)
 8001eb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eb6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001eb8:	4b26      	ldr	r3, [pc, #152]	; (8001f54 <HAL_RCC_OscConfig+0x82c>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	4a25      	ldr	r2, [pc, #148]	; (8001f54 <HAL_RCC_OscConfig+0x82c>)
 8001ebe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ec2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ec4:	f7fe fdd4 	bl	8000a70 <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ecc:	f7fe fdd0 	bl	8000a70 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e03f      	b.n	8001f5e <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ede:	4b1d      	ldr	r3, [pc, #116]	; (8001f54 <HAL_RCC_OscConfig+0x82c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d0f0      	beq.n	8001ecc <HAL_RCC_OscConfig+0x7a4>
 8001eea:	e037      	b.n	8001f5c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	2b0c      	cmp	r3, #12
 8001ef0:	d02d      	beq.n	8001f4e <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ef2:	4b18      	ldr	r3, [pc, #96]	; (8001f54 <HAL_RCC_OscConfig+0x82c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a17      	ldr	r2, [pc, #92]	; (8001f54 <HAL_RCC_OscConfig+0x82c>)
 8001ef8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001efc:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001efe:	4b15      	ldr	r3, [pc, #84]	; (8001f54 <HAL_RCC_OscConfig+0x82c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d105      	bne.n	8001f16 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001f0a:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <HAL_RCC_OscConfig+0x82c>)
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	4a11      	ldr	r2, [pc, #68]	; (8001f54 <HAL_RCC_OscConfig+0x82c>)
 8001f10:	f023 0303 	bic.w	r3, r3, #3
 8001f14:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001f16:	4b0f      	ldr	r3, [pc, #60]	; (8001f54 <HAL_RCC_OscConfig+0x82c>)
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	4a0e      	ldr	r2, [pc, #56]	; (8001f54 <HAL_RCC_OscConfig+0x82c>)
 8001f1c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001f20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f24:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f26:	f7fe fda3 	bl	8000a70 <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f2c:	e008      	b.n	8001f40 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f2e:	f7fe fd9f 	bl	8000a70 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e00e      	b.n	8001f5e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f40:	4b04      	ldr	r3, [pc, #16]	; (8001f54 <HAL_RCC_OscConfig+0x82c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1f0      	bne.n	8001f2e <HAL_RCC_OscConfig+0x806>
 8001f4c:	e006      	b.n	8001f5c <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e005      	b.n	8001f5e <HAL_RCC_OscConfig+0x836>
 8001f52:	bf00      	nop
 8001f54:	40021000 	.word	0x40021000
 8001f58:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3720      	adds	r7, #32
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop

08001f68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e0c8      	b.n	800210e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f7c:	4b66      	ldr	r3, [pc, #408]	; (8002118 <HAL_RCC_ClockConfig+0x1b0>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d910      	bls.n	8001fac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8a:	4b63      	ldr	r3, [pc, #396]	; (8002118 <HAL_RCC_ClockConfig+0x1b0>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f023 0207 	bic.w	r2, r3, #7
 8001f92:	4961      	ldr	r1, [pc, #388]	; (8002118 <HAL_RCC_ClockConfig+0x1b0>)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9a:	4b5f      	ldr	r3, [pc, #380]	; (8002118 <HAL_RCC_ClockConfig+0x1b0>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d001      	beq.n	8001fac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e0b0      	b.n	800210e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d04c      	beq.n	8002052 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	2b03      	cmp	r3, #3
 8001fbe:	d107      	bne.n	8001fd0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fc0:	4b56      	ldr	r3, [pc, #344]	; (800211c <HAL_RCC_ClockConfig+0x1b4>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d121      	bne.n	8002010 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e09e      	b.n	800210e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d107      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fd8:	4b50      	ldr	r3, [pc, #320]	; (800211c <HAL_RCC_ClockConfig+0x1b4>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d115      	bne.n	8002010 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e092      	b.n	800210e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d107      	bne.n	8002000 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ff0:	4b4a      	ldr	r3, [pc, #296]	; (800211c <HAL_RCC_ClockConfig+0x1b4>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d109      	bne.n	8002010 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e086      	b.n	800210e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002000:	4b46      	ldr	r3, [pc, #280]	; (800211c <HAL_RCC_ClockConfig+0x1b4>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002008:	2b00      	cmp	r3, #0
 800200a:	d101      	bne.n	8002010 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e07e      	b.n	800210e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002010:	4b42      	ldr	r3, [pc, #264]	; (800211c <HAL_RCC_ClockConfig+0x1b4>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f023 0203 	bic.w	r2, r3, #3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	493f      	ldr	r1, [pc, #252]	; (800211c <HAL_RCC_ClockConfig+0x1b4>)
 800201e:	4313      	orrs	r3, r2
 8002020:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002022:	f7fe fd25 	bl	8000a70 <HAL_GetTick>
 8002026:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002028:	e00a      	b.n	8002040 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800202a:	f7fe fd21 	bl	8000a70 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	f241 3288 	movw	r2, #5000	; 0x1388
 8002038:	4293      	cmp	r3, r2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e066      	b.n	800210e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002040:	4b36      	ldr	r3, [pc, #216]	; (800211c <HAL_RCC_ClockConfig+0x1b4>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f003 020c 	and.w	r2, r3, #12
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	429a      	cmp	r2, r3
 8002050:	d1eb      	bne.n	800202a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d008      	beq.n	8002070 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800205e:	4b2f      	ldr	r3, [pc, #188]	; (800211c <HAL_RCC_ClockConfig+0x1b4>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	492c      	ldr	r1, [pc, #176]	; (800211c <HAL_RCC_ClockConfig+0x1b4>)
 800206c:	4313      	orrs	r3, r2
 800206e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002070:	4b29      	ldr	r3, [pc, #164]	; (8002118 <HAL_RCC_ClockConfig+0x1b0>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0307 	and.w	r3, r3, #7
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	429a      	cmp	r2, r3
 800207c:	d210      	bcs.n	80020a0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207e:	4b26      	ldr	r3, [pc, #152]	; (8002118 <HAL_RCC_ClockConfig+0x1b0>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f023 0207 	bic.w	r2, r3, #7
 8002086:	4924      	ldr	r1, [pc, #144]	; (8002118 <HAL_RCC_ClockConfig+0x1b0>)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	4313      	orrs	r3, r2
 800208c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800208e:	4b22      	ldr	r3, [pc, #136]	; (8002118 <HAL_RCC_ClockConfig+0x1b0>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	429a      	cmp	r2, r3
 800209a:	d001      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e036      	b.n	800210e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d008      	beq.n	80020be <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020ac:	4b1b      	ldr	r3, [pc, #108]	; (800211c <HAL_RCC_ClockConfig+0x1b4>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	4918      	ldr	r1, [pc, #96]	; (800211c <HAL_RCC_ClockConfig+0x1b4>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0308 	and.w	r3, r3, #8
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d009      	beq.n	80020de <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020ca:	4b14      	ldr	r3, [pc, #80]	; (800211c <HAL_RCC_ClockConfig+0x1b4>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	4910      	ldr	r1, [pc, #64]	; (800211c <HAL_RCC_ClockConfig+0x1b4>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020de:	f000 f825 	bl	800212c <HAL_RCC_GetSysClockFreq>
 80020e2:	4601      	mov	r1, r0
 80020e4:	4b0d      	ldr	r3, [pc, #52]	; (800211c <HAL_RCC_ClockConfig+0x1b4>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	091b      	lsrs	r3, r3, #4
 80020ea:	f003 030f 	and.w	r3, r3, #15
 80020ee:	4a0c      	ldr	r2, [pc, #48]	; (8002120 <HAL_RCC_ClockConfig+0x1b8>)
 80020f0:	5cd3      	ldrb	r3, [r2, r3]
 80020f2:	f003 031f 	and.w	r3, r3, #31
 80020f6:	fa21 f303 	lsr.w	r3, r1, r3
 80020fa:	4a0a      	ldr	r2, [pc, #40]	; (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 80020fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80020fe:	4b0a      	ldr	r3, [pc, #40]	; (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	f7fe fbb2 	bl	800086c <HAL_InitTick>
 8002108:	4603      	mov	r3, r0
 800210a:	72fb      	strb	r3, [r7, #11]

  return status;
 800210c:	7afb      	ldrb	r3, [r7, #11]
}
 800210e:	4618      	mov	r0, r3
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40022000 	.word	0x40022000
 800211c:	40021000 	.word	0x40021000
 8002120:	08006734 	.word	0x08006734
 8002124:	20000000 	.word	0x20000000
 8002128:	20000004 	.word	0x20000004

0800212c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800212c:	b480      	push	{r7}
 800212e:	b089      	sub	sp, #36	; 0x24
 8002130:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002132:	2300      	movs	r3, #0
 8002134:	61fb      	str	r3, [r7, #28]
 8002136:	2300      	movs	r3, #0
 8002138:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800213a:	4b3d      	ldr	r3, [pc, #244]	; (8002230 <HAL_RCC_GetSysClockFreq+0x104>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f003 030c 	and.w	r3, r3, #12
 8002142:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002144:	4b3a      	ldr	r3, [pc, #232]	; (8002230 <HAL_RCC_GetSysClockFreq+0x104>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	f003 0303 	and.w	r3, r3, #3
 800214c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d005      	beq.n	8002160 <HAL_RCC_GetSysClockFreq+0x34>
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	2b0c      	cmp	r3, #12
 8002158:	d121      	bne.n	800219e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d11e      	bne.n	800219e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002160:	4b33      	ldr	r3, [pc, #204]	; (8002230 <HAL_RCC_GetSysClockFreq+0x104>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0308 	and.w	r3, r3, #8
 8002168:	2b00      	cmp	r3, #0
 800216a:	d107      	bne.n	800217c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800216c:	4b30      	ldr	r3, [pc, #192]	; (8002230 <HAL_RCC_GetSysClockFreq+0x104>)
 800216e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002172:	0a1b      	lsrs	r3, r3, #8
 8002174:	f003 030f 	and.w	r3, r3, #15
 8002178:	61fb      	str	r3, [r7, #28]
 800217a:	e005      	b.n	8002188 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800217c:	4b2c      	ldr	r3, [pc, #176]	; (8002230 <HAL_RCC_GetSysClockFreq+0x104>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	091b      	lsrs	r3, r3, #4
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002188:	4a2a      	ldr	r2, [pc, #168]	; (8002234 <HAL_RCC_GetSysClockFreq+0x108>)
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002190:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d10d      	bne.n	80021b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800219c:	e00a      	b.n	80021b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	2b04      	cmp	r3, #4
 80021a2:	d102      	bne.n	80021aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80021a4:	4b24      	ldr	r3, [pc, #144]	; (8002238 <HAL_RCC_GetSysClockFreq+0x10c>)
 80021a6:	61bb      	str	r3, [r7, #24]
 80021a8:	e004      	b.n	80021b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	d101      	bne.n	80021b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021b0:	4b22      	ldr	r3, [pc, #136]	; (800223c <HAL_RCC_GetSysClockFreq+0x110>)
 80021b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	2b0c      	cmp	r3, #12
 80021b8:	d133      	bne.n	8002222 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021ba:	4b1d      	ldr	r3, [pc, #116]	; (8002230 <HAL_RCC_GetSysClockFreq+0x104>)
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	f003 0303 	and.w	r3, r3, #3
 80021c2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d002      	beq.n	80021d0 <HAL_RCC_GetSysClockFreq+0xa4>
 80021ca:	2b03      	cmp	r3, #3
 80021cc:	d003      	beq.n	80021d6 <HAL_RCC_GetSysClockFreq+0xaa>
 80021ce:	e005      	b.n	80021dc <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80021d0:	4b19      	ldr	r3, [pc, #100]	; (8002238 <HAL_RCC_GetSysClockFreq+0x10c>)
 80021d2:	617b      	str	r3, [r7, #20]
      break;
 80021d4:	e005      	b.n	80021e2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80021d6:	4b19      	ldr	r3, [pc, #100]	; (800223c <HAL_RCC_GetSysClockFreq+0x110>)
 80021d8:	617b      	str	r3, [r7, #20]
      break;
 80021da:	e002      	b.n	80021e2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	617b      	str	r3, [r7, #20]
      break;
 80021e0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021e2:	4b13      	ldr	r3, [pc, #76]	; (8002230 <HAL_RCC_GetSysClockFreq+0x104>)
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	091b      	lsrs	r3, r3, #4
 80021e8:	f003 0307 	and.w	r3, r3, #7
 80021ec:	3301      	adds	r3, #1
 80021ee:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021f0:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <HAL_RCC_GetSysClockFreq+0x104>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	0a1b      	lsrs	r3, r3, #8
 80021f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	fb02 f203 	mul.w	r2, r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	fbb2 f3f3 	udiv	r3, r2, r3
 8002206:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002208:	4b09      	ldr	r3, [pc, #36]	; (8002230 <HAL_RCC_GetSysClockFreq+0x104>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	0e5b      	lsrs	r3, r3, #25
 800220e:	f003 0303 	and.w	r3, r3, #3
 8002212:	3301      	adds	r3, #1
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002220:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002222:	69bb      	ldr	r3, [r7, #24]
}
 8002224:	4618      	mov	r0, r3
 8002226:	3724      	adds	r7, #36	; 0x24
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	40021000 	.word	0x40021000
 8002234:	0800674c 	.word	0x0800674c
 8002238:	00f42400 	.word	0x00f42400
 800223c:	007a1200 	.word	0x007a1200

08002240 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002244:	4b03      	ldr	r3, [pc, #12]	; (8002254 <HAL_RCC_GetHCLKFreq+0x14>)
 8002246:	681b      	ldr	r3, [r3, #0]
}
 8002248:	4618      	mov	r0, r3
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	20000000 	.word	0x20000000

08002258 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800225c:	f7ff fff0 	bl	8002240 <HAL_RCC_GetHCLKFreq>
 8002260:	4601      	mov	r1, r0
 8002262:	4b06      	ldr	r3, [pc, #24]	; (800227c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	0a1b      	lsrs	r3, r3, #8
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	4a04      	ldr	r2, [pc, #16]	; (8002280 <HAL_RCC_GetPCLK1Freq+0x28>)
 800226e:	5cd3      	ldrb	r3, [r2, r3]
 8002270:	f003 031f 	and.w	r3, r3, #31
 8002274:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002278:	4618      	mov	r0, r3
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40021000 	.word	0x40021000
 8002280:	08006744 	.word	0x08006744

08002284 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	220f      	movs	r2, #15
 8002292:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002294:	4b12      	ldr	r3, [pc, #72]	; (80022e0 <HAL_RCC_GetClockConfig+0x5c>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f003 0203 	and.w	r2, r3, #3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80022a0:	4b0f      	ldr	r3, [pc, #60]	; (80022e0 <HAL_RCC_GetClockConfig+0x5c>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80022ac:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <HAL_RCC_GetClockConfig+0x5c>)
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80022b8:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <HAL_RCC_GetClockConfig+0x5c>)
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	08db      	lsrs	r3, r3, #3
 80022be:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80022c6:	4b07      	ldr	r3, [pc, #28]	; (80022e4 <HAL_RCC_GetClockConfig+0x60>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0207 	and.w	r2, r3, #7
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	601a      	str	r2, [r3, #0]
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	40021000 	.word	0x40021000
 80022e4:	40022000 	.word	0x40022000

080022e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80022f0:	2300      	movs	r3, #0
 80022f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80022f4:	4b2a      	ldr	r3, [pc, #168]	; (80023a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002300:	f7ff f9ae 	bl	8001660 <HAL_PWREx_GetVoltageRange>
 8002304:	6178      	str	r0, [r7, #20]
 8002306:	e014      	b.n	8002332 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002308:	4b25      	ldr	r3, [pc, #148]	; (80023a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800230a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230c:	4a24      	ldr	r2, [pc, #144]	; (80023a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800230e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002312:	6593      	str	r3, [r2, #88]	; 0x58
 8002314:	4b22      	ldr	r3, [pc, #136]	; (80023a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002320:	f7ff f99e 	bl	8001660 <HAL_PWREx_GetVoltageRange>
 8002324:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002326:	4b1e      	ldr	r3, [pc, #120]	; (80023a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800232a:	4a1d      	ldr	r2, [pc, #116]	; (80023a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800232c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002330:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002338:	d10b      	bne.n	8002352 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b80      	cmp	r3, #128	; 0x80
 800233e:	d919      	bls.n	8002374 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2ba0      	cmp	r3, #160	; 0xa0
 8002344:	d902      	bls.n	800234c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002346:	2302      	movs	r3, #2
 8002348:	613b      	str	r3, [r7, #16]
 800234a:	e013      	b.n	8002374 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800234c:	2301      	movs	r3, #1
 800234e:	613b      	str	r3, [r7, #16]
 8002350:	e010      	b.n	8002374 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b80      	cmp	r3, #128	; 0x80
 8002356:	d902      	bls.n	800235e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002358:	2303      	movs	r3, #3
 800235a:	613b      	str	r3, [r7, #16]
 800235c:	e00a      	b.n	8002374 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b80      	cmp	r3, #128	; 0x80
 8002362:	d102      	bne.n	800236a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002364:	2302      	movs	r3, #2
 8002366:	613b      	str	r3, [r7, #16]
 8002368:	e004      	b.n	8002374 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2b70      	cmp	r3, #112	; 0x70
 800236e:	d101      	bne.n	8002374 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002370:	2301      	movs	r3, #1
 8002372:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002374:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f023 0207 	bic.w	r2, r3, #7
 800237c:	4909      	ldr	r1, [pc, #36]	; (80023a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	4313      	orrs	r3, r2
 8002382:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002384:	4b07      	ldr	r3, [pc, #28]	; (80023a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	429a      	cmp	r2, r3
 8002390:	d001      	beq.n	8002396 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e000      	b.n	8002398 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3718      	adds	r7, #24
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40021000 	.word	0x40021000
 80023a4:	40022000 	.word	0x40022000

080023a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023b0:	2300      	movs	r3, #0
 80023b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023b4:	2300      	movs	r3, #0
 80023b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d02f      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80023cc:	d005      	beq.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x32>
 80023ce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80023d2:	d015      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x58>
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d007      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80023d8:	e00f      	b.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80023da:	4bac      	ldr	r3, [pc, #688]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	4aab      	ldr	r2, [pc, #684]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80023e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023e6:	e00c      	b.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3304      	adds	r3, #4
 80023ec:	2100      	movs	r1, #0
 80023ee:	4618      	mov	r0, r3
 80023f0:	f000 f9dc 	bl	80027ac <RCCEx_PLLSAI1_Config>
 80023f4:	4603      	mov	r3, r0
 80023f6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023f8:	e003      	b.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	74fb      	strb	r3, [r7, #19]
      break;
 80023fe:	e000      	b.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8002400:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002402:	7cfb      	ldrb	r3, [r7, #19]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d10b      	bne.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002408:	4ba0      	ldr	r3, [pc, #640]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800240a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800240e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002416:	499d      	ldr	r1, [pc, #628]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002418:	4313      	orrs	r3, r2
 800241a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800241e:	e001      	b.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002420:	7cfb      	ldrb	r3, [r7, #19]
 8002422:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242c:	2b00      	cmp	r3, #0
 800242e:	f000 8099 	beq.w	8002564 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002432:	2300      	movs	r3, #0
 8002434:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002436:	4b95      	ldr	r3, [pc, #596]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8002442:	2301      	movs	r3, #1
 8002444:	e000      	b.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002446:	2300      	movs	r3, #0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00d      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800244c:	4b8f      	ldr	r3, [pc, #572]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800244e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002450:	4a8e      	ldr	r2, [pc, #568]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002456:	6593      	str	r3, [r2, #88]	; 0x58
 8002458:	4b8c      	ldr	r3, [pc, #560]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800245a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002460:	60bb      	str	r3, [r7, #8]
 8002462:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002464:	2301      	movs	r3, #1
 8002466:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002468:	4b89      	ldr	r3, [pc, #548]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a88      	ldr	r2, [pc, #544]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800246e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002472:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002474:	f7fe fafc 	bl	8000a70 <HAL_GetTick>
 8002478:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800247a:	e009      	b.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800247c:	f7fe faf8 	bl	8000a70 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d902      	bls.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	74fb      	strb	r3, [r7, #19]
        break;
 800248e:	e005      	b.n	800249c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002490:	4b7f      	ldr	r3, [pc, #508]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002498:	2b00      	cmp	r3, #0
 800249a:	d0ef      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 800249c:	7cfb      	ldrb	r3, [r7, #19]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d155      	bne.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80024a2:	4b7a      	ldr	r3, [pc, #488]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80024a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024ac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d01e      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d019      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80024be:	4b73      	ldr	r3, [pc, #460]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80024c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024c8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80024ca:	4b70      	ldr	r3, [pc, #448]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80024cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d0:	4a6e      	ldr	r2, [pc, #440]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80024d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80024da:	4b6c      	ldr	r3, [pc, #432]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80024dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e0:	4a6a      	ldr	r2, [pc, #424]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80024e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024ea:	4a68      	ldr	r2, [pc, #416]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d016      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fc:	f7fe fab8 	bl	8000a70 <HAL_GetTick>
 8002500:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002502:	e00b      	b.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002504:	f7fe fab4 	bl	8000a70 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002512:	4293      	cmp	r3, r2
 8002514:	d902      	bls.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	74fb      	strb	r3, [r7, #19]
            break;
 800251a:	e006      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800251c:	4b5b      	ldr	r3, [pc, #364]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800251e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d0ec      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 800252a:	7cfb      	ldrb	r3, [r7, #19]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d10b      	bne.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002530:	4b56      	ldr	r3, [pc, #344]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002536:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800253e:	4953      	ldr	r1, [pc, #332]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002546:	e004      	b.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002548:	7cfb      	ldrb	r3, [r7, #19]
 800254a:	74bb      	strb	r3, [r7, #18]
 800254c:	e001      	b.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800254e:	7cfb      	ldrb	r3, [r7, #19]
 8002550:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002552:	7c7b      	ldrb	r3, [r7, #17]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d105      	bne.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002558:	4b4c      	ldr	r3, [pc, #304]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800255a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800255c:	4a4b      	ldr	r2, [pc, #300]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800255e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002562:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00a      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002570:	4b46      	ldr	r3, [pc, #280]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002576:	f023 0203 	bic.w	r2, r3, #3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a1b      	ldr	r3, [r3, #32]
 800257e:	4943      	ldr	r1, [pc, #268]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002580:	4313      	orrs	r3, r2
 8002582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00a      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002592:	4b3e      	ldr	r3, [pc, #248]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002598:	f023 020c 	bic.w	r2, r3, #12
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a0:	493a      	ldr	r1, [pc, #232]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0320 	and.w	r3, r3, #32
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00a      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025b4:	4b35      	ldr	r3, [pc, #212]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80025b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c2:	4932      	ldr	r1, [pc, #200]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00a      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025d6:	4b2d      	ldr	r3, [pc, #180]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80025d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025e4:	4929      	ldr	r1, [pc, #164]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d00a      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80025f8:	4b24      	ldr	r3, [pc, #144]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80025fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002606:	4921      	ldr	r1, [pc, #132]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002608:	4313      	orrs	r3, r2
 800260a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00a      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800261a:	4b1c      	ldr	r3, [pc, #112]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800261c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002620:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002628:	4918      	ldr	r1, [pc, #96]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800262a:	4313      	orrs	r3, r2
 800262c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00a      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800263c:	4b13      	ldr	r3, [pc, #76]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800263e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002642:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	4910      	ldr	r1, [pc, #64]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800264c:	4313      	orrs	r3, r2
 800264e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d02c      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800265e:	4b0b      	ldr	r3, [pc, #44]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002664:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266c:	4907      	ldr	r1, [pc, #28]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800266e:	4313      	orrs	r3, r2
 8002670:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002678:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800267c:	d10a      	bne.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800267e:	4b03      	ldr	r3, [pc, #12]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	4a02      	ldr	r2, [pc, #8]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002688:	60d3      	str	r3, [r2, #12]
 800268a:	e015      	b.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800268c:	40021000 	.word	0x40021000
 8002690:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002698:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800269c:	d10c      	bne.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	3304      	adds	r3, #4
 80026a2:	2101      	movs	r1, #1
 80026a4:	4618      	mov	r0, r3
 80026a6:	f000 f881 	bl	80027ac <RCCEx_PLLSAI1_Config>
 80026aa:	4603      	mov	r3, r0
 80026ac:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80026ae:	7cfb      	ldrb	r3, [r7, #19]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 80026b4:	7cfb      	ldrb	r3, [r7, #19]
 80026b6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d028      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026c4:	4b30      	ldr	r3, [pc, #192]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d2:	492d      	ldr	r1, [pc, #180]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026e2:	d106      	bne.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026e4:	4b28      	ldr	r3, [pc, #160]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	4a27      	ldr	r2, [pc, #156]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ee:	60d3      	str	r3, [r2, #12]
 80026f0:	e011      	b.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026fa:	d10c      	bne.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3304      	adds	r3, #4
 8002700:	2101      	movs	r1, #1
 8002702:	4618      	mov	r0, r3
 8002704:	f000 f852 	bl	80027ac <RCCEx_PLLSAI1_Config>
 8002708:	4603      	mov	r3, r0
 800270a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800270c:	7cfb      	ldrb	r3, [r7, #19]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 8002712:	7cfb      	ldrb	r3, [r7, #19]
 8002714:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d01c      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002722:	4b19      	ldr	r3, [pc, #100]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002728:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002730:	4915      	ldr	r1, [pc, #84]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002732:	4313      	orrs	r3, r2
 8002734:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800273c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002740:	d10c      	bne.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	3304      	adds	r3, #4
 8002746:	2102      	movs	r1, #2
 8002748:	4618      	mov	r0, r3
 800274a:	f000 f82f 	bl	80027ac <RCCEx_PLLSAI1_Config>
 800274e:	4603      	mov	r3, r0
 8002750:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002752:	7cfb      	ldrb	r3, [r7, #19]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8002758:	7cfb      	ldrb	r3, [r7, #19]
 800275a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00a      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002768:	4b07      	ldr	r3, [pc, #28]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800276a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002776:	4904      	ldr	r1, [pc, #16]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002778:	4313      	orrs	r3, r2
 800277a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800277e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002780:	4618      	mov	r0, r3
 8002782:	3718      	adds	r7, #24
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40021000 	.word	0x40021000

0800278c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002790:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a04      	ldr	r2, [pc, #16]	; (80027a8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002796:	f043 0304 	orr.w	r3, r3, #4
 800279a:	6013      	str	r3, [r2, #0]
}
 800279c:	bf00      	nop
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	40021000 	.word	0x40021000

080027ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027b6:	2300      	movs	r3, #0
 80027b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027ba:	4b73      	ldr	r3, [pc, #460]	; (8002988 <RCCEx_PLLSAI1_Config+0x1dc>)
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	f003 0303 	and.w	r3, r3, #3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d018      	beq.n	80027f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80027c6:	4b70      	ldr	r3, [pc, #448]	; (8002988 <RCCEx_PLLSAI1_Config+0x1dc>)
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	f003 0203 	and.w	r2, r3, #3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d10d      	bne.n	80027f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
       ||
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d009      	beq.n	80027f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80027de:	4b6a      	ldr	r3, [pc, #424]	; (8002988 <RCCEx_PLLSAI1_Config+0x1dc>)
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	091b      	lsrs	r3, r3, #4
 80027e4:	f003 0307 	and.w	r3, r3, #7
 80027e8:	1c5a      	adds	r2, r3, #1
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
       ||
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d044      	beq.n	800287c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	73fb      	strb	r3, [r7, #15]
 80027f6:	e041      	b.n	800287c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d00c      	beq.n	800281a <RCCEx_PLLSAI1_Config+0x6e>
 8002800:	2b03      	cmp	r3, #3
 8002802:	d013      	beq.n	800282c <RCCEx_PLLSAI1_Config+0x80>
 8002804:	2b01      	cmp	r3, #1
 8002806:	d120      	bne.n	800284a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002808:	4b5f      	ldr	r3, [pc, #380]	; (8002988 <RCCEx_PLLSAI1_Config+0x1dc>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d11d      	bne.n	8002850 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002818:	e01a      	b.n	8002850 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800281a:	4b5b      	ldr	r3, [pc, #364]	; (8002988 <RCCEx_PLLSAI1_Config+0x1dc>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002822:	2b00      	cmp	r3, #0
 8002824:	d116      	bne.n	8002854 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800282a:	e013      	b.n	8002854 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800282c:	4b56      	ldr	r3, [pc, #344]	; (8002988 <RCCEx_PLLSAI1_Config+0x1dc>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d10f      	bne.n	8002858 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002838:	4b53      	ldr	r3, [pc, #332]	; (8002988 <RCCEx_PLLSAI1_Config+0x1dc>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d109      	bne.n	8002858 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002848:	e006      	b.n	8002858 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	73fb      	strb	r3, [r7, #15]
      break;
 800284e:	e004      	b.n	800285a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002850:	bf00      	nop
 8002852:	e002      	b.n	800285a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002854:	bf00      	nop
 8002856:	e000      	b.n	800285a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002858:	bf00      	nop
    }

    if(status == HAL_OK)
 800285a:	7bfb      	ldrb	r3, [r7, #15]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d10d      	bne.n	800287c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002860:	4b49      	ldr	r3, [pc, #292]	; (8002988 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6819      	ldr	r1, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	3b01      	subs	r3, #1
 8002872:	011b      	lsls	r3, r3, #4
 8002874:	430b      	orrs	r3, r1
 8002876:	4944      	ldr	r1, [pc, #272]	; (8002988 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002878:	4313      	orrs	r3, r2
 800287a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800287c:	7bfb      	ldrb	r3, [r7, #15]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d17c      	bne.n	800297c <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002882:	4b41      	ldr	r3, [pc, #260]	; (8002988 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a40      	ldr	r2, [pc, #256]	; (8002988 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002888:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800288c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800288e:	f7fe f8ef 	bl	8000a70 <HAL_GetTick>
 8002892:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002894:	e009      	b.n	80028aa <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002896:	f7fe f8eb 	bl	8000a70 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d902      	bls.n	80028aa <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	73fb      	strb	r3, [r7, #15]
        break;
 80028a8:	e005      	b.n	80028b6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028aa:	4b37      	ldr	r3, [pc, #220]	; (8002988 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1ef      	bne.n	8002896 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80028b6:	7bfb      	ldrb	r3, [r7, #15]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d15f      	bne.n	800297c <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d110      	bne.n	80028e4 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028c2:	4b31      	ldr	r3, [pc, #196]	; (8002988 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80028ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6892      	ldr	r2, [r2, #8]
 80028d2:	0211      	lsls	r1, r2, #8
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	68d2      	ldr	r2, [r2, #12]
 80028d8:	06d2      	lsls	r2, r2, #27
 80028da:	430a      	orrs	r2, r1
 80028dc:	492a      	ldr	r1, [pc, #168]	; (8002988 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	610b      	str	r3, [r1, #16]
 80028e2:	e027      	b.n	8002934 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d112      	bne.n	8002910 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028ea:	4b27      	ldr	r3, [pc, #156]	; (8002988 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80028f2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	6892      	ldr	r2, [r2, #8]
 80028fa:	0211      	lsls	r1, r2, #8
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6912      	ldr	r2, [r2, #16]
 8002900:	0852      	lsrs	r2, r2, #1
 8002902:	3a01      	subs	r2, #1
 8002904:	0552      	lsls	r2, r2, #21
 8002906:	430a      	orrs	r2, r1
 8002908:	491f      	ldr	r1, [pc, #124]	; (8002988 <RCCEx_PLLSAI1_Config+0x1dc>)
 800290a:	4313      	orrs	r3, r2
 800290c:	610b      	str	r3, [r1, #16]
 800290e:	e011      	b.n	8002934 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002910:	4b1d      	ldr	r3, [pc, #116]	; (8002988 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002918:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	6892      	ldr	r2, [r2, #8]
 8002920:	0211      	lsls	r1, r2, #8
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6952      	ldr	r2, [r2, #20]
 8002926:	0852      	lsrs	r2, r2, #1
 8002928:	3a01      	subs	r2, #1
 800292a:	0652      	lsls	r2, r2, #25
 800292c:	430a      	orrs	r2, r1
 800292e:	4916      	ldr	r1, [pc, #88]	; (8002988 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002930:	4313      	orrs	r3, r2
 8002932:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002934:	4b14      	ldr	r3, [pc, #80]	; (8002988 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a13      	ldr	r2, [pc, #76]	; (8002988 <RCCEx_PLLSAI1_Config+0x1dc>)
 800293a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800293e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002940:	f7fe f896 	bl	8000a70 <HAL_GetTick>
 8002944:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002946:	e009      	b.n	800295c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002948:	f7fe f892 	bl	8000a70 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d902      	bls.n	800295c <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	73fb      	strb	r3, [r7, #15]
          break;
 800295a:	e005      	b.n	8002968 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800295c:	4b0a      	ldr	r3, [pc, #40]	; (8002988 <RCCEx_PLLSAI1_Config+0x1dc>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d0ef      	beq.n	8002948 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8002968:	7bfb      	ldrb	r3, [r7, #15]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d106      	bne.n	800297c <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800296e:	4b06      	ldr	r3, [pc, #24]	; (8002988 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002970:	691a      	ldr	r2, [r3, #16]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	4904      	ldr	r1, [pc, #16]	; (8002988 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002978:	4313      	orrs	r3, r2
 800297a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800297c:	7bfb      	ldrb	r3, [r7, #15]
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	40021000 	.word	0x40021000

0800298c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e049      	b.n	8002a32 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d106      	bne.n	80029b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7fd ff06 	bl	80007c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2202      	movs	r2, #2
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3304      	adds	r3, #4
 80029c8:	4619      	mov	r1, r3
 80029ca:	4610      	mov	r0, r2
 80029cc:	f000 fcdc 	bl	8003388 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
	...

08002a3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d001      	beq.n	8002a54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e03b      	b.n	8002acc <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2202      	movs	r2, #2
 8002a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68da      	ldr	r2, [r3, #12]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 0201 	orr.w	r2, r2, #1
 8002a6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a19      	ldr	r2, [pc, #100]	; (8002ad8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d009      	beq.n	8002a8a <HAL_TIM_Base_Start_IT+0x4e>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a7e:	d004      	beq.n	8002a8a <HAL_TIM_Base_Start_IT+0x4e>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a15      	ldr	r2, [pc, #84]	; (8002adc <HAL_TIM_Base_Start_IT+0xa0>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d115      	bne.n	8002ab6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	4b13      	ldr	r3, [pc, #76]	; (8002ae0 <HAL_TIM_Base_Start_IT+0xa4>)
 8002a92:	4013      	ands	r3, r2
 8002a94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2b06      	cmp	r3, #6
 8002a9a:	d015      	beq.n	8002ac8 <HAL_TIM_Base_Start_IT+0x8c>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aa2:	d011      	beq.n	8002ac8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f042 0201 	orr.w	r2, r2, #1
 8002ab2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ab4:	e008      	b.n	8002ac8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f042 0201 	orr.w	r2, r2, #1
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	e000      	b.n	8002aca <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ac8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3714      	adds	r7, #20
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr
 8002ad8:	40012c00 	.word	0x40012c00
 8002adc:	40014000 	.word	0x40014000
 8002ae0:	00010007 	.word	0x00010007

08002ae4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e049      	b.n	8002b8a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d106      	bne.n	8002b10 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f841 	bl	8002b92 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2202      	movs	r2, #2
 8002b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	3304      	adds	r3, #4
 8002b20:	4619      	mov	r1, r3
 8002b22:	4610      	mov	r0, r2
 8002b24:	f000 fc30 	bl	8003388 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b92:	b480      	push	{r7}
 8002b94:	b083      	sub	sp, #12
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b9a:	bf00      	nop
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
	...

08002ba8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d109      	bne.n	8002bcc <HAL_TIM_PWM_Start+0x24>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	bf14      	ite	ne
 8002bc4:	2301      	movne	r3, #1
 8002bc6:	2300      	moveq	r3, #0
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	e03c      	b.n	8002c46 <HAL_TIM_PWM_Start+0x9e>
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	d109      	bne.n	8002be6 <HAL_TIM_PWM_Start+0x3e>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	bf14      	ite	ne
 8002bde:	2301      	movne	r3, #1
 8002be0:	2300      	moveq	r3, #0
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	e02f      	b.n	8002c46 <HAL_TIM_PWM_Start+0x9e>
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	2b08      	cmp	r3, #8
 8002bea:	d109      	bne.n	8002c00 <HAL_TIM_PWM_Start+0x58>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	bf14      	ite	ne
 8002bf8:	2301      	movne	r3, #1
 8002bfa:	2300      	moveq	r3, #0
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	e022      	b.n	8002c46 <HAL_TIM_PWM_Start+0x9e>
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	2b0c      	cmp	r3, #12
 8002c04:	d109      	bne.n	8002c1a <HAL_TIM_PWM_Start+0x72>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	bf14      	ite	ne
 8002c12:	2301      	movne	r3, #1
 8002c14:	2300      	moveq	r3, #0
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	e015      	b.n	8002c46 <HAL_TIM_PWM_Start+0x9e>
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	2b10      	cmp	r3, #16
 8002c1e:	d109      	bne.n	8002c34 <HAL_TIM_PWM_Start+0x8c>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	bf14      	ite	ne
 8002c2c:	2301      	movne	r3, #1
 8002c2e:	2300      	moveq	r3, #0
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	e008      	b.n	8002c46 <HAL_TIM_PWM_Start+0x9e>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	bf14      	ite	ne
 8002c40:	2301      	movne	r3, #1
 8002c42:	2300      	moveq	r3, #0
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e07e      	b.n	8002d4c <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d104      	bne.n	8002c5e <HAL_TIM_PWM_Start+0xb6>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2202      	movs	r2, #2
 8002c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c5c:	e023      	b.n	8002ca6 <HAL_TIM_PWM_Start+0xfe>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	2b04      	cmp	r3, #4
 8002c62:	d104      	bne.n	8002c6e <HAL_TIM_PWM_Start+0xc6>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2202      	movs	r2, #2
 8002c68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c6c:	e01b      	b.n	8002ca6 <HAL_TIM_PWM_Start+0xfe>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	2b08      	cmp	r3, #8
 8002c72:	d104      	bne.n	8002c7e <HAL_TIM_PWM_Start+0xd6>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2202      	movs	r2, #2
 8002c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c7c:	e013      	b.n	8002ca6 <HAL_TIM_PWM_Start+0xfe>
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	2b0c      	cmp	r3, #12
 8002c82:	d104      	bne.n	8002c8e <HAL_TIM_PWM_Start+0xe6>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2202      	movs	r2, #2
 8002c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c8c:	e00b      	b.n	8002ca6 <HAL_TIM_PWM_Start+0xfe>
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	2b10      	cmp	r3, #16
 8002c92:	d104      	bne.n	8002c9e <HAL_TIM_PWM_Start+0xf6>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2202      	movs	r2, #2
 8002c98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c9c:	e003      	b.n	8002ca6 <HAL_TIM_PWM_Start+0xfe>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2201      	movs	r2, #1
 8002cac:	6839      	ldr	r1, [r7, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f000 fee6 	bl	8003a80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a26      	ldr	r2, [pc, #152]	; (8002d54 <HAL_TIM_PWM_Start+0x1ac>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d009      	beq.n	8002cd2 <HAL_TIM_PWM_Start+0x12a>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a25      	ldr	r2, [pc, #148]	; (8002d58 <HAL_TIM_PWM_Start+0x1b0>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d004      	beq.n	8002cd2 <HAL_TIM_PWM_Start+0x12a>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a23      	ldr	r2, [pc, #140]	; (8002d5c <HAL_TIM_PWM_Start+0x1b4>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d101      	bne.n	8002cd6 <HAL_TIM_PWM_Start+0x12e>
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e000      	b.n	8002cd8 <HAL_TIM_PWM_Start+0x130>
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d007      	beq.n	8002cec <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cea:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a18      	ldr	r2, [pc, #96]	; (8002d54 <HAL_TIM_PWM_Start+0x1ac>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d009      	beq.n	8002d0a <HAL_TIM_PWM_Start+0x162>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cfe:	d004      	beq.n	8002d0a <HAL_TIM_PWM_Start+0x162>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a14      	ldr	r2, [pc, #80]	; (8002d58 <HAL_TIM_PWM_Start+0x1b0>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d115      	bne.n	8002d36 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	4b13      	ldr	r3, [pc, #76]	; (8002d60 <HAL_TIM_PWM_Start+0x1b8>)
 8002d12:	4013      	ands	r3, r2
 8002d14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2b06      	cmp	r3, #6
 8002d1a:	d015      	beq.n	8002d48 <HAL_TIM_PWM_Start+0x1a0>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d22:	d011      	beq.n	8002d48 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f042 0201 	orr.w	r2, r2, #1
 8002d32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d34:	e008      	b.n	8002d48 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f042 0201 	orr.w	r2, r2, #1
 8002d44:	601a      	str	r2, [r3, #0]
 8002d46:	e000      	b.n	8002d4a <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d48:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40012c00 	.word	0x40012c00
 8002d58:	40014000 	.word	0x40014000
 8002d5c:	40014400 	.word	0x40014400
 8002d60:	00010007 	.word	0x00010007

08002d64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d122      	bne.n	8002dc0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d11b      	bne.n	8002dc0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f06f 0202 	mvn.w	r2, #2
 8002d90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2201      	movs	r2, #1
 8002d96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	f003 0303 	and.w	r3, r3, #3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 facf 	bl	800334a <HAL_TIM_IC_CaptureCallback>
 8002dac:	e005      	b.n	8002dba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 fac1 	bl	8003336 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 fad2 	bl	800335e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	f003 0304 	and.w	r3, r3, #4
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	d122      	bne.n	8002e14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	2b04      	cmp	r3, #4
 8002dda:	d11b      	bne.n	8002e14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f06f 0204 	mvn.w	r2, #4
 8002de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2202      	movs	r2, #2
 8002dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d003      	beq.n	8002e02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 faa5 	bl	800334a <HAL_TIM_IC_CaptureCallback>
 8002e00:	e005      	b.n	8002e0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 fa97 	bl	8003336 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f000 faa8 	bl	800335e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	f003 0308 	and.w	r3, r3, #8
 8002e1e:	2b08      	cmp	r3, #8
 8002e20:	d122      	bne.n	8002e68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	f003 0308 	and.w	r3, r3, #8
 8002e2c:	2b08      	cmp	r3, #8
 8002e2e:	d11b      	bne.n	8002e68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f06f 0208 	mvn.w	r2, #8
 8002e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2204      	movs	r2, #4
 8002e3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	f003 0303 	and.w	r3, r3, #3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d003      	beq.n	8002e56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 fa7b 	bl	800334a <HAL_TIM_IC_CaptureCallback>
 8002e54:	e005      	b.n	8002e62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 fa6d 	bl	8003336 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f000 fa7e 	bl	800335e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	f003 0310 	and.w	r3, r3, #16
 8002e72:	2b10      	cmp	r3, #16
 8002e74:	d122      	bne.n	8002ebc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	f003 0310 	and.w	r3, r3, #16
 8002e80:	2b10      	cmp	r3, #16
 8002e82:	d11b      	bne.n	8002ebc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f06f 0210 	mvn.w	r2, #16
 8002e8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2208      	movs	r2, #8
 8002e92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d003      	beq.n	8002eaa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 fa51 	bl	800334a <HAL_TIM_IC_CaptureCallback>
 8002ea8:	e005      	b.n	8002eb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 fa43 	bl	8003336 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 fa54 	bl	800335e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d10e      	bne.n	8002ee8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	f003 0301 	and.w	r3, r3, #1
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d107      	bne.n	8002ee8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f06f 0201 	mvn.w	r2, #1
 8002ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7fd fbec 	bl	80006c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef2:	2b80      	cmp	r3, #128	; 0x80
 8002ef4:	d10e      	bne.n	8002f14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f00:	2b80      	cmp	r3, #128	; 0x80
 8002f02:	d107      	bne.n	8002f14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 fe4c 	bl	8003bac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f22:	d10e      	bne.n	8002f42 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f2e:	2b80      	cmp	r3, #128	; 0x80
 8002f30:	d107      	bne.n	8002f42 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002f3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 fe3f 	bl	8003bc0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4c:	2b40      	cmp	r3, #64	; 0x40
 8002f4e:	d10e      	bne.n	8002f6e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f5a:	2b40      	cmp	r3, #64	; 0x40
 8002f5c:	d107      	bne.n	8002f6e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 fa02 	bl	8003372 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	f003 0320 	and.w	r3, r3, #32
 8002f78:	2b20      	cmp	r3, #32
 8002f7a:	d10e      	bne.n	8002f9a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	f003 0320 	and.w	r3, r3, #32
 8002f86:	2b20      	cmp	r3, #32
 8002f88:	d107      	bne.n	8002f9a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f06f 0220 	mvn.w	r2, #32
 8002f92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 fdff 	bl	8003b98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f9a:	bf00      	nop
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
	...

08002fa4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d101      	bne.n	8002fbe <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002fba:	2302      	movs	r3, #2
 8002fbc:	e0fd      	b.n	80031ba <HAL_TIM_PWM_ConfigChannel+0x216>
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2b14      	cmp	r3, #20
 8002fca:	f200 80f0 	bhi.w	80031ae <HAL_TIM_PWM_ConfigChannel+0x20a>
 8002fce:	a201      	add	r2, pc, #4	; (adr r2, 8002fd4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd4:	08003029 	.word	0x08003029
 8002fd8:	080031af 	.word	0x080031af
 8002fdc:	080031af 	.word	0x080031af
 8002fe0:	080031af 	.word	0x080031af
 8002fe4:	08003069 	.word	0x08003069
 8002fe8:	080031af 	.word	0x080031af
 8002fec:	080031af 	.word	0x080031af
 8002ff0:	080031af 	.word	0x080031af
 8002ff4:	080030ab 	.word	0x080030ab
 8002ff8:	080031af 	.word	0x080031af
 8002ffc:	080031af 	.word	0x080031af
 8003000:	080031af 	.word	0x080031af
 8003004:	080030eb 	.word	0x080030eb
 8003008:	080031af 	.word	0x080031af
 800300c:	080031af 	.word	0x080031af
 8003010:	080031af 	.word	0x080031af
 8003014:	0800312d 	.word	0x0800312d
 8003018:	080031af 	.word	0x080031af
 800301c:	080031af 	.word	0x080031af
 8003020:	080031af 	.word	0x080031af
 8003024:	0800316d 	.word	0x0800316d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68b9      	ldr	r1, [r7, #8]
 800302e:	4618      	mov	r0, r3
 8003030:	f000 fa0e 	bl	8003450 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	699a      	ldr	r2, [r3, #24]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f042 0208 	orr.w	r2, r2, #8
 8003042:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	699a      	ldr	r2, [r3, #24]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 0204 	bic.w	r2, r2, #4
 8003052:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6999      	ldr	r1, [r3, #24]
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	691a      	ldr	r2, [r3, #16]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	619a      	str	r2, [r3, #24]
      break;
 8003066:	e0a3      	b.n	80031b0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68b9      	ldr	r1, [r7, #8]
 800306e:	4618      	mov	r0, r3
 8003070:	f000 fa6a 	bl	8003548 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	699a      	ldr	r2, [r3, #24]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003082:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	699a      	ldr	r2, [r3, #24]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003092:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6999      	ldr	r1, [r3, #24]
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	021a      	lsls	r2, r3, #8
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	430a      	orrs	r2, r1
 80030a6:	619a      	str	r2, [r3, #24]
      break;
 80030a8:	e082      	b.n	80031b0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68b9      	ldr	r1, [r7, #8]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f000 fac3 	bl	800363c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	69da      	ldr	r2, [r3, #28]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f042 0208 	orr.w	r2, r2, #8
 80030c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	69da      	ldr	r2, [r3, #28]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 0204 	bic.w	r2, r2, #4
 80030d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	69d9      	ldr	r1, [r3, #28]
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	691a      	ldr	r2, [r3, #16]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	430a      	orrs	r2, r1
 80030e6:	61da      	str	r2, [r3, #28]
      break;
 80030e8:	e062      	b.n	80031b0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68b9      	ldr	r1, [r7, #8]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f000 fb1b 	bl	800372c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	69da      	ldr	r2, [r3, #28]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003104:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	69da      	ldr	r2, [r3, #28]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003114:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	69d9      	ldr	r1, [r3, #28]
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	021a      	lsls	r2, r3, #8
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	430a      	orrs	r2, r1
 8003128:	61da      	str	r2, [r3, #28]
      break;
 800312a:	e041      	b.n	80031b0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68b9      	ldr	r1, [r7, #8]
 8003132:	4618      	mov	r0, r3
 8003134:	f000 fb58 	bl	80037e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f042 0208 	orr.w	r2, r2, #8
 8003146:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f022 0204 	bic.w	r2, r2, #4
 8003156:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	691a      	ldr	r2, [r3, #16]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	430a      	orrs	r2, r1
 8003168:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800316a:	e021      	b.n	80031b0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68b9      	ldr	r1, [r7, #8]
 8003172:	4618      	mov	r0, r3
 8003174:	f000 fb90 	bl	8003898 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003186:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003196:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	021a      	lsls	r2, r3, #8
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80031ac:	e000      	b.n	80031b0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80031ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop

080031c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d101      	bne.n	80031dc <HAL_TIM_ConfigClockSource+0x18>
 80031d8:	2302      	movs	r3, #2
 80031da:	e0a8      	b.n	800332e <HAL_TIM_ConfigClockSource+0x16a>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2202      	movs	r2, #2
 80031e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80031fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003206:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2b40      	cmp	r3, #64	; 0x40
 8003216:	d067      	beq.n	80032e8 <HAL_TIM_ConfigClockSource+0x124>
 8003218:	2b40      	cmp	r3, #64	; 0x40
 800321a:	d80b      	bhi.n	8003234 <HAL_TIM_ConfigClockSource+0x70>
 800321c:	2b10      	cmp	r3, #16
 800321e:	d073      	beq.n	8003308 <HAL_TIM_ConfigClockSource+0x144>
 8003220:	2b10      	cmp	r3, #16
 8003222:	d802      	bhi.n	800322a <HAL_TIM_ConfigClockSource+0x66>
 8003224:	2b00      	cmp	r3, #0
 8003226:	d06f      	beq.n	8003308 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003228:	e078      	b.n	800331c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800322a:	2b20      	cmp	r3, #32
 800322c:	d06c      	beq.n	8003308 <HAL_TIM_ConfigClockSource+0x144>
 800322e:	2b30      	cmp	r3, #48	; 0x30
 8003230:	d06a      	beq.n	8003308 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003232:	e073      	b.n	800331c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003234:	2b70      	cmp	r3, #112	; 0x70
 8003236:	d00d      	beq.n	8003254 <HAL_TIM_ConfigClockSource+0x90>
 8003238:	2b70      	cmp	r3, #112	; 0x70
 800323a:	d804      	bhi.n	8003246 <HAL_TIM_ConfigClockSource+0x82>
 800323c:	2b50      	cmp	r3, #80	; 0x50
 800323e:	d033      	beq.n	80032a8 <HAL_TIM_ConfigClockSource+0xe4>
 8003240:	2b60      	cmp	r3, #96	; 0x60
 8003242:	d041      	beq.n	80032c8 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8003244:	e06a      	b.n	800331c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800324a:	d066      	beq.n	800331a <HAL_TIM_ConfigClockSource+0x156>
 800324c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003250:	d017      	beq.n	8003282 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003252:	e063      	b.n	800331c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6818      	ldr	r0, [r3, #0]
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	6899      	ldr	r1, [r3, #8]
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	f000 fbec 	bl	8003a40 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003276:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	609a      	str	r2, [r3, #8]
      break;
 8003280:	e04c      	b.n	800331c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6818      	ldr	r0, [r3, #0]
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	6899      	ldr	r1, [r3, #8]
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685a      	ldr	r2, [r3, #4]
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	f000 fbd5 	bl	8003a40 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032a4:	609a      	str	r2, [r3, #8]
      break;
 80032a6:	e039      	b.n	800331c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6818      	ldr	r0, [r3, #0]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	6859      	ldr	r1, [r3, #4]
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	461a      	mov	r2, r3
 80032b6:	f000 fb49 	bl	800394c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2150      	movs	r1, #80	; 0x50
 80032c0:	4618      	mov	r0, r3
 80032c2:	f000 fba2 	bl	8003a0a <TIM_ITRx_SetConfig>
      break;
 80032c6:	e029      	b.n	800331c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6818      	ldr	r0, [r3, #0]
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	6859      	ldr	r1, [r3, #4]
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	461a      	mov	r2, r3
 80032d6:	f000 fb68 	bl	80039aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2160      	movs	r1, #96	; 0x60
 80032e0:	4618      	mov	r0, r3
 80032e2:	f000 fb92 	bl	8003a0a <TIM_ITRx_SetConfig>
      break;
 80032e6:	e019      	b.n	800331c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6818      	ldr	r0, [r3, #0]
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	6859      	ldr	r1, [r3, #4]
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	461a      	mov	r2, r3
 80032f6:	f000 fb29 	bl	800394c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2140      	movs	r1, #64	; 0x40
 8003300:	4618      	mov	r0, r3
 8003302:	f000 fb82 	bl	8003a0a <TIM_ITRx_SetConfig>
      break;
 8003306:	e009      	b.n	800331c <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4619      	mov	r1, r3
 8003312:	4610      	mov	r0, r2
 8003314:	f000 fb79 	bl	8003a0a <TIM_ITRx_SetConfig>
        break;
 8003318:	e000      	b.n	800331c <HAL_TIM_ConfigClockSource+0x158>
      break;
 800331a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003336:	b480      	push	{r7}
 8003338:	b083      	sub	sp, #12
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800333e:	bf00      	nop
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr

0800334a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800334a:	b480      	push	{r7}
 800334c:	b083      	sub	sp, #12
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003352:	bf00      	nop
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr

0800335e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800335e:	b480      	push	{r7}
 8003360:	b083      	sub	sp, #12
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003372:	b480      	push	{r7}
 8003374:	b083      	sub	sp, #12
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800337a:	bf00      	nop
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
	...

08003388 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a2a      	ldr	r2, [pc, #168]	; (8003444 <TIM_Base_SetConfig+0xbc>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d003      	beq.n	80033a8 <TIM_Base_SetConfig+0x20>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033a6:	d108      	bne.n	80033ba <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a21      	ldr	r2, [pc, #132]	; (8003444 <TIM_Base_SetConfig+0xbc>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d00b      	beq.n	80033da <TIM_Base_SetConfig+0x52>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033c8:	d007      	beq.n	80033da <TIM_Base_SetConfig+0x52>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a1e      	ldr	r2, [pc, #120]	; (8003448 <TIM_Base_SetConfig+0xc0>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d003      	beq.n	80033da <TIM_Base_SetConfig+0x52>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a1d      	ldr	r2, [pc, #116]	; (800344c <TIM_Base_SetConfig+0xc4>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d108      	bne.n	80033ec <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	689a      	ldr	r2, [r3, #8]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a0c      	ldr	r2, [pc, #48]	; (8003444 <TIM_Base_SetConfig+0xbc>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d007      	beq.n	8003428 <TIM_Base_SetConfig+0xa0>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a0b      	ldr	r2, [pc, #44]	; (8003448 <TIM_Base_SetConfig+0xc0>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d003      	beq.n	8003428 <TIM_Base_SetConfig+0xa0>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a0a      	ldr	r2, [pc, #40]	; (800344c <TIM_Base_SetConfig+0xc4>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d103      	bne.n	8003430 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	691a      	ldr	r2, [r3, #16]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	615a      	str	r2, [r3, #20]
}
 8003436:	bf00      	nop
 8003438:	3714      	adds	r7, #20
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	40012c00 	.word	0x40012c00
 8003448:	40014000 	.word	0x40014000
 800344c:	40014400 	.word	0x40014400

08003450 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003450:	b480      	push	{r7}
 8003452:	b087      	sub	sp, #28
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	f023 0201 	bic.w	r2, r3, #1
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800347e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f023 0303 	bic.w	r3, r3, #3
 800348a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	4313      	orrs	r3, r2
 8003494:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	f023 0302 	bic.w	r3, r3, #2
 800349c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a24      	ldr	r2, [pc, #144]	; (800353c <TIM_OC1_SetConfig+0xec>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d007      	beq.n	80034c0 <TIM_OC1_SetConfig+0x70>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a23      	ldr	r2, [pc, #140]	; (8003540 <TIM_OC1_SetConfig+0xf0>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d003      	beq.n	80034c0 <TIM_OC1_SetConfig+0x70>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a22      	ldr	r2, [pc, #136]	; (8003544 <TIM_OC1_SetConfig+0xf4>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d10c      	bne.n	80034da <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	f023 0308 	bic.w	r3, r3, #8
 80034c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f023 0304 	bic.w	r3, r3, #4
 80034d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a17      	ldr	r2, [pc, #92]	; (800353c <TIM_OC1_SetConfig+0xec>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d007      	beq.n	80034f2 <TIM_OC1_SetConfig+0xa2>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a16      	ldr	r2, [pc, #88]	; (8003540 <TIM_OC1_SetConfig+0xf0>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d003      	beq.n	80034f2 <TIM_OC1_SetConfig+0xa2>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a15      	ldr	r2, [pc, #84]	; (8003544 <TIM_OC1_SetConfig+0xf4>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d111      	bne.n	8003516 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003500:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	4313      	orrs	r3, r2
 800350a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	4313      	orrs	r3, r2
 8003514:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	621a      	str	r2, [r3, #32]
}
 8003530:	bf00      	nop
 8003532:	371c      	adds	r7, #28
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	40012c00 	.word	0x40012c00
 8003540:	40014000 	.word	0x40014000
 8003544:	40014400 	.word	0x40014400

08003548 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003548:	b480      	push	{r7}
 800354a:	b087      	sub	sp, #28
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	f023 0210 	bic.w	r2, r3, #16
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003576:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800357a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003582:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	021b      	lsls	r3, r3, #8
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	4313      	orrs	r3, r2
 800358e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	f023 0320 	bic.w	r3, r3, #32
 8003596:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	011b      	lsls	r3, r3, #4
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a22      	ldr	r2, [pc, #136]	; (8003630 <TIM_OC2_SetConfig+0xe8>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d10d      	bne.n	80035c8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	011b      	lsls	r3, r3, #4
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	4313      	orrs	r3, r2
 80035be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a19      	ldr	r2, [pc, #100]	; (8003630 <TIM_OC2_SetConfig+0xe8>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d007      	beq.n	80035e0 <TIM_OC2_SetConfig+0x98>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a18      	ldr	r2, [pc, #96]	; (8003634 <TIM_OC2_SetConfig+0xec>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d003      	beq.n	80035e0 <TIM_OC2_SetConfig+0x98>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a17      	ldr	r2, [pc, #92]	; (8003638 <TIM_OC2_SetConfig+0xf0>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d113      	bne.n	8003608 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	4313      	orrs	r3, r2
 8003606:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	621a      	str	r2, [r3, #32]
}
 8003622:	bf00      	nop
 8003624:	371c      	adds	r7, #28
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	40012c00 	.word	0x40012c00
 8003634:	40014000 	.word	0x40014000
 8003638:	40014400 	.word	0x40014400

0800363c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800363c:	b480      	push	{r7}
 800363e:	b087      	sub	sp, #28
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	69db      	ldr	r3, [r3, #28]
 8003662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800366a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800366e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f023 0303 	bic.w	r3, r3, #3
 8003676:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	4313      	orrs	r3, r2
 8003680:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003688:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	021b      	lsls	r3, r3, #8
 8003690:	697a      	ldr	r2, [r7, #20]
 8003692:	4313      	orrs	r3, r2
 8003694:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a21      	ldr	r2, [pc, #132]	; (8003720 <TIM_OC3_SetConfig+0xe4>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d10d      	bne.n	80036ba <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	021b      	lsls	r3, r3, #8
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a18      	ldr	r2, [pc, #96]	; (8003720 <TIM_OC3_SetConfig+0xe4>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d007      	beq.n	80036d2 <TIM_OC3_SetConfig+0x96>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a17      	ldr	r2, [pc, #92]	; (8003724 <TIM_OC3_SetConfig+0xe8>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d003      	beq.n	80036d2 <TIM_OC3_SetConfig+0x96>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a16      	ldr	r2, [pc, #88]	; (8003728 <TIM_OC3_SetConfig+0xec>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d113      	bne.n	80036fa <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	011b      	lsls	r3, r3, #4
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	011b      	lsls	r3, r3, #4
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	685a      	ldr	r2, [r3, #4]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	621a      	str	r2, [r3, #32]
}
 8003714:	bf00      	nop
 8003716:	371c      	adds	r7, #28
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	40012c00 	.word	0x40012c00
 8003724:	40014000 	.word	0x40014000
 8003728:	40014400 	.word	0x40014400

0800372c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800372c:	b480      	push	{r7}
 800372e:	b087      	sub	sp, #28
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800375a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800375e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003766:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	021b      	lsls	r3, r3, #8
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	4313      	orrs	r3, r2
 8003772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800377a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	031b      	lsls	r3, r3, #12
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	4313      	orrs	r3, r2
 8003786:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a14      	ldr	r2, [pc, #80]	; (80037dc <TIM_OC4_SetConfig+0xb0>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d007      	beq.n	80037a0 <TIM_OC4_SetConfig+0x74>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a13      	ldr	r2, [pc, #76]	; (80037e0 <TIM_OC4_SetConfig+0xb4>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d003      	beq.n	80037a0 <TIM_OC4_SetConfig+0x74>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a12      	ldr	r2, [pc, #72]	; (80037e4 <TIM_OC4_SetConfig+0xb8>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d109      	bne.n	80037b4 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	019b      	lsls	r3, r3, #6
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	621a      	str	r2, [r3, #32]
}
 80037ce:	bf00      	nop
 80037d0:	371c      	adds	r7, #28
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	40012c00 	.word	0x40012c00
 80037e0:	40014000 	.word	0x40014000
 80037e4:	40014400 	.word	0x40014400

080037e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b087      	sub	sp, #28
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800381a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	4313      	orrs	r3, r2
 8003824:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800382c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	041b      	lsls	r3, r3, #16
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	4313      	orrs	r3, r2
 8003838:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a13      	ldr	r2, [pc, #76]	; (800388c <TIM_OC5_SetConfig+0xa4>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d007      	beq.n	8003852 <TIM_OC5_SetConfig+0x6a>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a12      	ldr	r2, [pc, #72]	; (8003890 <TIM_OC5_SetConfig+0xa8>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d003      	beq.n	8003852 <TIM_OC5_SetConfig+0x6a>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a11      	ldr	r2, [pc, #68]	; (8003894 <TIM_OC5_SetConfig+0xac>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d109      	bne.n	8003866 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003858:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	021b      	lsls	r3, r3, #8
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	4313      	orrs	r3, r2
 8003864:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	621a      	str	r2, [r3, #32]
}
 8003880:	bf00      	nop
 8003882:	371c      	adds	r7, #28
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr
 800388c:	40012c00 	.word	0x40012c00
 8003890:	40014000 	.word	0x40014000
 8003894:	40014400 	.word	0x40014400

08003898 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003898:	b480      	push	{r7}
 800389a:	b087      	sub	sp, #28
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	021b      	lsls	r3, r3, #8
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80038de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	051b      	lsls	r3, r3, #20
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a14      	ldr	r2, [pc, #80]	; (8003940 <TIM_OC6_SetConfig+0xa8>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d007      	beq.n	8003904 <TIM_OC6_SetConfig+0x6c>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a13      	ldr	r2, [pc, #76]	; (8003944 <TIM_OC6_SetConfig+0xac>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d003      	beq.n	8003904 <TIM_OC6_SetConfig+0x6c>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a12      	ldr	r2, [pc, #72]	; (8003948 <TIM_OC6_SetConfig+0xb0>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d109      	bne.n	8003918 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800390a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	029b      	lsls	r3, r3, #10
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	4313      	orrs	r3, r2
 8003916:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685a      	ldr	r2, [r3, #4]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	621a      	str	r2, [r3, #32]
}
 8003932:	bf00      	nop
 8003934:	371c      	adds	r7, #28
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	40012c00 	.word	0x40012c00
 8003944:	40014000 	.word	0x40014000
 8003948:	40014400 	.word	0x40014400

0800394c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800394c:	b480      	push	{r7}
 800394e:	b087      	sub	sp, #28
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6a1b      	ldr	r3, [r3, #32]
 800395c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	f023 0201 	bic.w	r2, r3, #1
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003976:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	011b      	lsls	r3, r3, #4
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	4313      	orrs	r3, r2
 8003980:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	f023 030a 	bic.w	r3, r3, #10
 8003988:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	4313      	orrs	r3, r2
 8003990:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	621a      	str	r2, [r3, #32]
}
 800399e:	bf00      	nop
 80039a0:	371c      	adds	r7, #28
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr

080039aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039aa:	b480      	push	{r7}
 80039ac:	b087      	sub	sp, #28
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	60f8      	str	r0, [r7, #12]
 80039b2:	60b9      	str	r1, [r7, #8]
 80039b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	f023 0210 	bic.w	r2, r3, #16
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6a1b      	ldr	r3, [r3, #32]
 80039cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	031b      	lsls	r3, r3, #12
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	4313      	orrs	r3, r2
 80039de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	011b      	lsls	r3, r3, #4
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	621a      	str	r2, [r3, #32]
}
 80039fe:	bf00      	nop
 8003a00:	371c      	adds	r7, #28
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b085      	sub	sp, #20
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
 8003a12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	f043 0307 	orr.w	r3, r3, #7
 8003a2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	609a      	str	r2, [r3, #8]
}
 8003a34:	bf00      	nop
 8003a36:	3714      	adds	r7, #20
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b087      	sub	sp, #28
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
 8003a4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	021a      	lsls	r2, r3, #8
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	431a      	orrs	r2, r3
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	697a      	ldr	r2, [r7, #20]
 8003a72:	609a      	str	r2, [r3, #8]
}
 8003a74:	bf00      	nop
 8003a76:	371c      	adds	r7, #28
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b087      	sub	sp, #28
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	f003 031f 	and.w	r3, r3, #31
 8003a92:	2201      	movs	r2, #1
 8003a94:	fa02 f303 	lsl.w	r3, r2, r3
 8003a98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6a1a      	ldr	r2, [r3, #32]
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	43db      	mvns	r3, r3
 8003aa2:	401a      	ands	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6a1a      	ldr	r2, [r3, #32]
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	f003 031f 	and.w	r3, r3, #31
 8003ab2:	6879      	ldr	r1, [r7, #4]
 8003ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab8:	431a      	orrs	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	621a      	str	r2, [r3, #32]
}
 8003abe:	bf00      	nop
 8003ac0:	371c      	adds	r7, #28
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
	...

08003acc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d101      	bne.n	8003ae4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	e04f      	b.n	8003b84 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2202      	movs	r2, #2
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a21      	ldr	r2, [pc, #132]	; (8003b90 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d108      	bne.n	8003b20 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003b14:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a14      	ldr	r2, [pc, #80]	; (8003b90 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d009      	beq.n	8003b58 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b4c:	d004      	beq.n	8003b58 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a10      	ldr	r2, [pc, #64]	; (8003b94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d10c      	bne.n	8003b72 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b5e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	68ba      	ldr	r2, [r7, #8]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68ba      	ldr	r2, [r7, #8]
 8003b70:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3714      	adds	r7, #20
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr
 8003b90:	40012c00 	.word	0x40012c00
 8003b94:	40014000 	.word	0x40014000

08003b98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003bd8:	bf00      	nop
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
	...

08003be4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bea:	f3ef 8305 	mrs	r3, IPSR
 8003bee:	60bb      	str	r3, [r7, #8]
  return(result);
 8003bf0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10f      	bne.n	8003c16 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bf6:	f3ef 8310 	mrs	r3, PRIMASK
 8003bfa:	607b      	str	r3, [r7, #4]
  return(result);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d105      	bne.n	8003c0e <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003c02:	f3ef 8311 	mrs	r3, BASEPRI
 8003c06:	603b      	str	r3, [r7, #0]
  return(result);
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d007      	beq.n	8003c1e <osKernelInitialize+0x3a>
 8003c0e:	4b0e      	ldr	r3, [pc, #56]	; (8003c48 <osKernelInitialize+0x64>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d103      	bne.n	8003c1e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003c16:	f06f 0305 	mvn.w	r3, #5
 8003c1a:	60fb      	str	r3, [r7, #12]
 8003c1c:	e00c      	b.n	8003c38 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003c1e:	4b0a      	ldr	r3, [pc, #40]	; (8003c48 <osKernelInitialize+0x64>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d105      	bne.n	8003c32 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003c26:	4b08      	ldr	r3, [pc, #32]	; (8003c48 <osKernelInitialize+0x64>)
 8003c28:	2201      	movs	r2, #1
 8003c2a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	60fb      	str	r3, [r7, #12]
 8003c30:	e002      	b.n	8003c38 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003c32:	f04f 33ff 	mov.w	r3, #4294967295
 8003c36:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003c38:	68fb      	ldr	r3, [r7, #12]
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3714      	adds	r7, #20
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	2000002c 	.word	0x2000002c

08003c4c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c52:	f3ef 8305 	mrs	r3, IPSR
 8003c56:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c58:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10f      	bne.n	8003c7e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c5e:	f3ef 8310 	mrs	r3, PRIMASK
 8003c62:	607b      	str	r3, [r7, #4]
  return(result);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d105      	bne.n	8003c76 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003c6a:	f3ef 8311 	mrs	r3, BASEPRI
 8003c6e:	603b      	str	r3, [r7, #0]
  return(result);
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d007      	beq.n	8003c86 <osKernelStart+0x3a>
 8003c76:	4b0f      	ldr	r3, [pc, #60]	; (8003cb4 <osKernelStart+0x68>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d103      	bne.n	8003c86 <osKernelStart+0x3a>
    stat = osErrorISR;
 8003c7e:	f06f 0305 	mvn.w	r3, #5
 8003c82:	60fb      	str	r3, [r7, #12]
 8003c84:	e010      	b.n	8003ca8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003c86:	4b0b      	ldr	r3, [pc, #44]	; (8003cb4 <osKernelStart+0x68>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d109      	bne.n	8003ca2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003c8e:	f7ff ffa1 	bl	8003bd4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003c92:	4b08      	ldr	r3, [pc, #32]	; (8003cb4 <osKernelStart+0x68>)
 8003c94:	2202      	movs	r2, #2
 8003c96:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003c98:	f001 f870 	bl	8004d7c <vTaskStartScheduler>
      stat = osOK;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	60fb      	str	r3, [r7, #12]
 8003ca0:	e002      	b.n	8003ca8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8003ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ca6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	2000002c 	.word	0x2000002c

08003cb8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b090      	sub	sp, #64	; 0x40
 8003cbc:	af04      	add	r7, sp, #16
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cc8:	f3ef 8305 	mrs	r3, IPSR
 8003ccc:	61fb      	str	r3, [r7, #28]
  return(result);
 8003cce:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f040 808f 	bne.w	8003df4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cd6:	f3ef 8310 	mrs	r3, PRIMASK
 8003cda:	61bb      	str	r3, [r7, #24]
  return(result);
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d105      	bne.n	8003cee <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003ce2:	f3ef 8311 	mrs	r3, BASEPRI
 8003ce6:	617b      	str	r3, [r7, #20]
  return(result);
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d003      	beq.n	8003cf6 <osThreadNew+0x3e>
 8003cee:	4b44      	ldr	r3, [pc, #272]	; (8003e00 <osThreadNew+0x148>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d07e      	beq.n	8003df4 <osThreadNew+0x13c>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d07b      	beq.n	8003df4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8003cfc:	2380      	movs	r3, #128	; 0x80
 8003cfe:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003d00:	2318      	movs	r3, #24
 8003d02:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8003d04:	2300      	movs	r3, #0
 8003d06:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8003d08:	f04f 33ff 	mov.w	r3, #4294967295
 8003d0c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d045      	beq.n	8003da0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d002      	beq.n	8003d22 <osThreadNew+0x6a>
        name = attr->name;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d002      	beq.n	8003d30 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d008      	beq.n	8003d48 <osThreadNew+0x90>
 8003d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d38:	2b38      	cmp	r3, #56	; 0x38
 8003d3a:	d805      	bhi.n	8003d48 <osThreadNew+0x90>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d001      	beq.n	8003d4c <osThreadNew+0x94>
        return (NULL);
 8003d48:	2300      	movs	r3, #0
 8003d4a:	e054      	b.n	8003df6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d003      	beq.n	8003d5c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	089b      	lsrs	r3, r3, #2
 8003d5a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00e      	beq.n	8003d82 <osThreadNew+0xca>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	2b5b      	cmp	r3, #91	; 0x5b
 8003d6a:	d90a      	bls.n	8003d82 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d006      	beq.n	8003d82 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	695b      	ldr	r3, [r3, #20]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d002      	beq.n	8003d82 <osThreadNew+0xca>
        mem = 1;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	623b      	str	r3, [r7, #32]
 8003d80:	e010      	b.n	8003da4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10c      	bne.n	8003da4 <osThreadNew+0xec>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d108      	bne.n	8003da4 <osThreadNew+0xec>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d104      	bne.n	8003da4 <osThreadNew+0xec>
          mem = 0;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	623b      	str	r3, [r7, #32]
 8003d9e:	e001      	b.n	8003da4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8003da0:	2300      	movs	r3, #0
 8003da2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003da4:	6a3b      	ldr	r3, [r7, #32]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d110      	bne.n	8003dcc <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003db2:	9202      	str	r2, [sp, #8]
 8003db4:	9301      	str	r3, [sp, #4]
 8003db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db8:	9300      	str	r3, [sp, #0]
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f000 fe09 	bl	80049d8 <xTaskCreateStatic>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	613b      	str	r3, [r7, #16]
 8003dca:	e013      	b.n	8003df4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8003dcc:	6a3b      	ldr	r3, [r7, #32]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d110      	bne.n	8003df4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	f107 0310 	add.w	r3, r7, #16
 8003dda:	9301      	str	r3, [sp, #4]
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dde:	9300      	str	r3, [sp, #0]
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f000 fe51 	bl	8004a8c <xTaskCreate>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d001      	beq.n	8003df4 <osThreadNew+0x13c>
          hTask = NULL;
 8003df0:	2300      	movs	r3, #0
 8003df2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003df4:	693b      	ldr	r3, [r7, #16]
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3730      	adds	r7, #48	; 0x30
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	2000002c 	.word	0x2000002c

08003e04 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e0c:	f3ef 8305 	mrs	r3, IPSR
 8003e10:	613b      	str	r3, [r7, #16]
  return(result);
 8003e12:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d10f      	bne.n	8003e38 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e18:	f3ef 8310 	mrs	r3, PRIMASK
 8003e1c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d105      	bne.n	8003e30 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003e24:	f3ef 8311 	mrs	r3, BASEPRI
 8003e28:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d007      	beq.n	8003e40 <osDelay+0x3c>
 8003e30:	4b0a      	ldr	r3, [pc, #40]	; (8003e5c <osDelay+0x58>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d103      	bne.n	8003e40 <osDelay+0x3c>
    stat = osErrorISR;
 8003e38:	f06f 0305 	mvn.w	r3, #5
 8003e3c:	617b      	str	r3, [r7, #20]
 8003e3e:	e007      	b.n	8003e50 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003e40:	2300      	movs	r3, #0
 8003e42:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d002      	beq.n	8003e50 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 ff62 	bl	8004d14 <vTaskDelay>
    }
  }

  return (stat);
 8003e50:	697b      	ldr	r3, [r7, #20]
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3718      	adds	r7, #24
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	2000002c 	.word	0x2000002c

08003e60 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	4a07      	ldr	r2, [pc, #28]	; (8003e8c <vApplicationGetIdleTaskMemory+0x2c>)
 8003e70:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	4a06      	ldr	r2, [pc, #24]	; (8003e90 <vApplicationGetIdleTaskMemory+0x30>)
 8003e76:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2280      	movs	r2, #128	; 0x80
 8003e7c:	601a      	str	r2, [r3, #0]
}
 8003e7e:	bf00      	nop
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	20000030 	.word	0x20000030
 8003e90:	2000008c 	.word	0x2000008c

08003e94 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	4a07      	ldr	r2, [pc, #28]	; (8003ec0 <vApplicationGetTimerTaskMemory+0x2c>)
 8003ea4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	4a06      	ldr	r2, [pc, #24]	; (8003ec4 <vApplicationGetTimerTaskMemory+0x30>)
 8003eaa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003eb2:	601a      	str	r2, [r3, #0]
}
 8003eb4:	bf00      	nop
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	2000028c 	.word	0x2000028c
 8003ec4:	200002e8 	.word	0x200002e8

08003ec8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f103 0208 	add.w	r2, r3, #8
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ee0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f103 0208 	add.w	r2, r3, #8
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f103 0208 	add.w	r2, r3, #8
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003efc:	bf00      	nop
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003f16:	bf00      	nop
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr

08003f22 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f22:	b480      	push	{r7}
 8003f24:	b085      	sub	sp, #20
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
 8003f2a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	689a      	ldr	r2, [r3, #8]
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	683a      	ldr	r2, [r7, #0]
 8003f46:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	683a      	ldr	r2, [r7, #0]
 8003f4c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	1c5a      	adds	r2, r3, #1
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	601a      	str	r2, [r3, #0]
}
 8003f5e:	bf00      	nop
 8003f60:	3714      	adds	r7, #20
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr

08003f6a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b085      	sub	sp, #20
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
 8003f72:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f80:	d103      	bne.n	8003f8a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	60fb      	str	r3, [r7, #12]
 8003f88:	e00c      	b.n	8003fa4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	3308      	adds	r3, #8
 8003f8e:	60fb      	str	r3, [r7, #12]
 8003f90:	e002      	b.n	8003f98 <vListInsert+0x2e>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68ba      	ldr	r2, [r7, #8]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d2f6      	bcs.n	8003f92 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	685a      	ldr	r2, [r3, #4]
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	683a      	ldr	r2, [r7, #0]
 8003fb2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	683a      	ldr	r2, [r7, #0]
 8003fbe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	1c5a      	adds	r2, r3, #1
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	601a      	str	r2, [r3, #0]
}
 8003fd0:	bf00      	nop
 8003fd2:	3714      	adds	r7, #20
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	6892      	ldr	r2, [r2, #8]
 8003ff2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	6852      	ldr	r2, [r2, #4]
 8003ffc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	429a      	cmp	r2, r3
 8004006:	d103      	bne.n	8004010 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689a      	ldr	r2, [r3, #8]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	1e5a      	subs	r2, r3, #1
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
}
 8004024:	4618      	mov	r0, r3
 8004026:	3714      	adds	r7, #20
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d109      	bne.n	8004058 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004048:	f383 8811 	msr	BASEPRI, r3
 800404c:	f3bf 8f6f 	isb	sy
 8004050:	f3bf 8f4f 	dsb	sy
 8004054:	60bb      	str	r3, [r7, #8]
 8004056:	e7fe      	b.n	8004056 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004058:	f002 f810 	bl	800607c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004064:	68f9      	ldr	r1, [r7, #12]
 8004066:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004068:	fb01 f303 	mul.w	r3, r1, r3
 800406c:	441a      	add	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004088:	3b01      	subs	r3, #1
 800408a:	68f9      	ldr	r1, [r7, #12]
 800408c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800408e:	fb01 f303 	mul.w	r3, r1, r3
 8004092:	441a      	add	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	22ff      	movs	r2, #255	; 0xff
 800409c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	22ff      	movs	r2, #255	; 0xff
 80040a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d114      	bne.n	80040d8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d01a      	beq.n	80040ec <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	3310      	adds	r3, #16
 80040ba:	4618      	mov	r0, r3
 80040bc:	f001 f8de 	bl	800527c <xTaskRemoveFromEventList>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d012      	beq.n	80040ec <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80040c6:	4b0d      	ldr	r3, [pc, #52]	; (80040fc <xQueueGenericReset+0xcc>)
 80040c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040cc:	601a      	str	r2, [r3, #0]
 80040ce:	f3bf 8f4f 	dsb	sy
 80040d2:	f3bf 8f6f 	isb	sy
 80040d6:	e009      	b.n	80040ec <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	3310      	adds	r3, #16
 80040dc:	4618      	mov	r0, r3
 80040de:	f7ff fef3 	bl	8003ec8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	3324      	adds	r3, #36	; 0x24
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7ff feee 	bl	8003ec8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80040ec:	f001 fff4 	bl	80060d8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80040f0:	2301      	movs	r3, #1
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	e000ed04 	.word	0xe000ed04

08004100 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004100:	b580      	push	{r7, lr}
 8004102:	b08e      	sub	sp, #56	; 0x38
 8004104:	af02      	add	r7, sp, #8
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
 800410c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d109      	bne.n	8004128 <xQueueGenericCreateStatic+0x28>
 8004114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004118:	f383 8811 	msr	BASEPRI, r3
 800411c:	f3bf 8f6f 	isb	sy
 8004120:	f3bf 8f4f 	dsb	sy
 8004124:	62bb      	str	r3, [r7, #40]	; 0x28
 8004126:	e7fe      	b.n	8004126 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d109      	bne.n	8004142 <xQueueGenericCreateStatic+0x42>
 800412e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004132:	f383 8811 	msr	BASEPRI, r3
 8004136:	f3bf 8f6f 	isb	sy
 800413a:	f3bf 8f4f 	dsb	sy
 800413e:	627b      	str	r3, [r7, #36]	; 0x24
 8004140:	e7fe      	b.n	8004140 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d002      	beq.n	800414e <xQueueGenericCreateStatic+0x4e>
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <xQueueGenericCreateStatic+0x52>
 800414e:	2301      	movs	r3, #1
 8004150:	e000      	b.n	8004154 <xQueueGenericCreateStatic+0x54>
 8004152:	2300      	movs	r3, #0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d109      	bne.n	800416c <xQueueGenericCreateStatic+0x6c>
 8004158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415c:	f383 8811 	msr	BASEPRI, r3
 8004160:	f3bf 8f6f 	isb	sy
 8004164:	f3bf 8f4f 	dsb	sy
 8004168:	623b      	str	r3, [r7, #32]
 800416a:	e7fe      	b.n	800416a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d102      	bne.n	8004178 <xQueueGenericCreateStatic+0x78>
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d101      	bne.n	800417c <xQueueGenericCreateStatic+0x7c>
 8004178:	2301      	movs	r3, #1
 800417a:	e000      	b.n	800417e <xQueueGenericCreateStatic+0x7e>
 800417c:	2300      	movs	r3, #0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d109      	bne.n	8004196 <xQueueGenericCreateStatic+0x96>
 8004182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004186:	f383 8811 	msr	BASEPRI, r3
 800418a:	f3bf 8f6f 	isb	sy
 800418e:	f3bf 8f4f 	dsb	sy
 8004192:	61fb      	str	r3, [r7, #28]
 8004194:	e7fe      	b.n	8004194 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004196:	2350      	movs	r3, #80	; 0x50
 8004198:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	2b50      	cmp	r3, #80	; 0x50
 800419e:	d009      	beq.n	80041b4 <xQueueGenericCreateStatic+0xb4>
 80041a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a4:	f383 8811 	msr	BASEPRI, r3
 80041a8:	f3bf 8f6f 	isb	sy
 80041ac:	f3bf 8f4f 	dsb	sy
 80041b0:	61bb      	str	r3, [r7, #24]
 80041b2:	e7fe      	b.n	80041b2 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80041b4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80041ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00d      	beq.n	80041dc <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80041c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80041c8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80041cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ce:	9300      	str	r3, [sp, #0]
 80041d0:	4613      	mov	r3, r2
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	68b9      	ldr	r1, [r7, #8]
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f000 f805 	bl	80041e6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80041dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80041de:	4618      	mov	r0, r3
 80041e0:	3730      	adds	r7, #48	; 0x30
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b084      	sub	sp, #16
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	60f8      	str	r0, [r7, #12]
 80041ee:	60b9      	str	r1, [r7, #8]
 80041f0:	607a      	str	r2, [r7, #4]
 80041f2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d103      	bne.n	8004202 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	601a      	str	r2, [r3, #0]
 8004200:	e002      	b.n	8004208 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	68ba      	ldr	r2, [r7, #8]
 8004212:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004214:	2101      	movs	r1, #1
 8004216:	69b8      	ldr	r0, [r7, #24]
 8004218:	f7ff ff0a 	bl	8004030 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	78fa      	ldrb	r2, [r7, #3]
 8004220:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004224:	bf00      	nop
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b08e      	sub	sp, #56	; 0x38
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
 8004238:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800423a:	2300      	movs	r3, #0
 800423c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004244:	2b00      	cmp	r3, #0
 8004246:	d109      	bne.n	800425c <xQueueGenericSend+0x30>
 8004248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424c:	f383 8811 	msr	BASEPRI, r3
 8004250:	f3bf 8f6f 	isb	sy
 8004254:	f3bf 8f4f 	dsb	sy
 8004258:	62bb      	str	r3, [r7, #40]	; 0x28
 800425a:	e7fe      	b.n	800425a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d103      	bne.n	800426a <xQueueGenericSend+0x3e>
 8004262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004266:	2b00      	cmp	r3, #0
 8004268:	d101      	bne.n	800426e <xQueueGenericSend+0x42>
 800426a:	2301      	movs	r3, #1
 800426c:	e000      	b.n	8004270 <xQueueGenericSend+0x44>
 800426e:	2300      	movs	r3, #0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d109      	bne.n	8004288 <xQueueGenericSend+0x5c>
 8004274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004278:	f383 8811 	msr	BASEPRI, r3
 800427c:	f3bf 8f6f 	isb	sy
 8004280:	f3bf 8f4f 	dsb	sy
 8004284:	627b      	str	r3, [r7, #36]	; 0x24
 8004286:	e7fe      	b.n	8004286 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	2b02      	cmp	r3, #2
 800428c:	d103      	bne.n	8004296 <xQueueGenericSend+0x6a>
 800428e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004292:	2b01      	cmp	r3, #1
 8004294:	d101      	bne.n	800429a <xQueueGenericSend+0x6e>
 8004296:	2301      	movs	r3, #1
 8004298:	e000      	b.n	800429c <xQueueGenericSend+0x70>
 800429a:	2300      	movs	r3, #0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d109      	bne.n	80042b4 <xQueueGenericSend+0x88>
 80042a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a4:	f383 8811 	msr	BASEPRI, r3
 80042a8:	f3bf 8f6f 	isb	sy
 80042ac:	f3bf 8f4f 	dsb	sy
 80042b0:	623b      	str	r3, [r7, #32]
 80042b2:	e7fe      	b.n	80042b2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80042b4:	f001 f998 	bl	80055e8 <xTaskGetSchedulerState>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d102      	bne.n	80042c4 <xQueueGenericSend+0x98>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d101      	bne.n	80042c8 <xQueueGenericSend+0x9c>
 80042c4:	2301      	movs	r3, #1
 80042c6:	e000      	b.n	80042ca <xQueueGenericSend+0x9e>
 80042c8:	2300      	movs	r3, #0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d109      	bne.n	80042e2 <xQueueGenericSend+0xb6>
 80042ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d2:	f383 8811 	msr	BASEPRI, r3
 80042d6:	f3bf 8f6f 	isb	sy
 80042da:	f3bf 8f4f 	dsb	sy
 80042de:	61fb      	str	r3, [r7, #28]
 80042e0:	e7fe      	b.n	80042e0 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80042e2:	f001 fecb 	bl	800607c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80042e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d302      	bcc.n	80042f8 <xQueueGenericSend+0xcc>
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d129      	bne.n	800434c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80042f8:	683a      	ldr	r2, [r7, #0]
 80042fa:	68b9      	ldr	r1, [r7, #8]
 80042fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042fe:	f000 f9ff 	bl	8004700 <prvCopyDataToQueue>
 8004302:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004308:	2b00      	cmp	r3, #0
 800430a:	d010      	beq.n	800432e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800430c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430e:	3324      	adds	r3, #36	; 0x24
 8004310:	4618      	mov	r0, r3
 8004312:	f000 ffb3 	bl	800527c <xTaskRemoveFromEventList>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d013      	beq.n	8004344 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800431c:	4b3f      	ldr	r3, [pc, #252]	; (800441c <xQueueGenericSend+0x1f0>)
 800431e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004322:	601a      	str	r2, [r3, #0]
 8004324:	f3bf 8f4f 	dsb	sy
 8004328:	f3bf 8f6f 	isb	sy
 800432c:	e00a      	b.n	8004344 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800432e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004330:	2b00      	cmp	r3, #0
 8004332:	d007      	beq.n	8004344 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004334:	4b39      	ldr	r3, [pc, #228]	; (800441c <xQueueGenericSend+0x1f0>)
 8004336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800433a:	601a      	str	r2, [r3, #0]
 800433c:	f3bf 8f4f 	dsb	sy
 8004340:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004344:	f001 fec8 	bl	80060d8 <vPortExitCritical>
				return pdPASS;
 8004348:	2301      	movs	r3, #1
 800434a:	e063      	b.n	8004414 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d103      	bne.n	800435a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004352:	f001 fec1 	bl	80060d8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004356:	2300      	movs	r3, #0
 8004358:	e05c      	b.n	8004414 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800435a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800435c:	2b00      	cmp	r3, #0
 800435e:	d106      	bne.n	800436e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004360:	f107 0314 	add.w	r3, r7, #20
 8004364:	4618      	mov	r0, r3
 8004366:	f000 ffeb 	bl	8005340 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800436a:	2301      	movs	r3, #1
 800436c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800436e:	f001 feb3 	bl	80060d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004372:	f000 fd67 	bl	8004e44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004376:	f001 fe81 	bl	800607c <vPortEnterCritical>
 800437a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004380:	b25b      	sxtb	r3, r3
 8004382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004386:	d103      	bne.n	8004390 <xQueueGenericSend+0x164>
 8004388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438a:	2200      	movs	r2, #0
 800438c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004392:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004396:	b25b      	sxtb	r3, r3
 8004398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800439c:	d103      	bne.n	80043a6 <xQueueGenericSend+0x17a>
 800439e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043a6:	f001 fe97 	bl	80060d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80043aa:	1d3a      	adds	r2, r7, #4
 80043ac:	f107 0314 	add.w	r3, r7, #20
 80043b0:	4611      	mov	r1, r2
 80043b2:	4618      	mov	r0, r3
 80043b4:	f000 ffda 	bl	800536c <xTaskCheckForTimeOut>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d124      	bne.n	8004408 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80043be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043c0:	f000 fa96 	bl	80048f0 <prvIsQueueFull>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d018      	beq.n	80043fc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80043ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043cc:	3310      	adds	r3, #16
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	4611      	mov	r1, r2
 80043d2:	4618      	mov	r0, r3
 80043d4:	f000 ff04 	bl	80051e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80043d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043da:	f000 fa21 	bl	8004820 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80043de:	f000 fd3f 	bl	8004e60 <xTaskResumeAll>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f47f af7c 	bne.w	80042e2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80043ea:	4b0c      	ldr	r3, [pc, #48]	; (800441c <xQueueGenericSend+0x1f0>)
 80043ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043f0:	601a      	str	r2, [r3, #0]
 80043f2:	f3bf 8f4f 	dsb	sy
 80043f6:	f3bf 8f6f 	isb	sy
 80043fa:	e772      	b.n	80042e2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80043fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043fe:	f000 fa0f 	bl	8004820 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004402:	f000 fd2d 	bl	8004e60 <xTaskResumeAll>
 8004406:	e76c      	b.n	80042e2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004408:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800440a:	f000 fa09 	bl	8004820 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800440e:	f000 fd27 	bl	8004e60 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004412:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004414:	4618      	mov	r0, r3
 8004416:	3738      	adds	r7, #56	; 0x38
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	e000ed04 	.word	0xe000ed04

08004420 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b08e      	sub	sp, #56	; 0x38
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]
 800442c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004434:	2b00      	cmp	r3, #0
 8004436:	d109      	bne.n	800444c <xQueueGenericSendFromISR+0x2c>
 8004438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443c:	f383 8811 	msr	BASEPRI, r3
 8004440:	f3bf 8f6f 	isb	sy
 8004444:	f3bf 8f4f 	dsb	sy
 8004448:	627b      	str	r3, [r7, #36]	; 0x24
 800444a:	e7fe      	b.n	800444a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d103      	bne.n	800445a <xQueueGenericSendFromISR+0x3a>
 8004452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <xQueueGenericSendFromISR+0x3e>
 800445a:	2301      	movs	r3, #1
 800445c:	e000      	b.n	8004460 <xQueueGenericSendFromISR+0x40>
 800445e:	2300      	movs	r3, #0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d109      	bne.n	8004478 <xQueueGenericSendFromISR+0x58>
 8004464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004468:	f383 8811 	msr	BASEPRI, r3
 800446c:	f3bf 8f6f 	isb	sy
 8004470:	f3bf 8f4f 	dsb	sy
 8004474:	623b      	str	r3, [r7, #32]
 8004476:	e7fe      	b.n	8004476 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	2b02      	cmp	r3, #2
 800447c:	d103      	bne.n	8004486 <xQueueGenericSendFromISR+0x66>
 800447e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004482:	2b01      	cmp	r3, #1
 8004484:	d101      	bne.n	800448a <xQueueGenericSendFromISR+0x6a>
 8004486:	2301      	movs	r3, #1
 8004488:	e000      	b.n	800448c <xQueueGenericSendFromISR+0x6c>
 800448a:	2300      	movs	r3, #0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d109      	bne.n	80044a4 <xQueueGenericSendFromISR+0x84>
 8004490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004494:	f383 8811 	msr	BASEPRI, r3
 8004498:	f3bf 8f6f 	isb	sy
 800449c:	f3bf 8f4f 	dsb	sy
 80044a0:	61fb      	str	r3, [r7, #28]
 80044a2:	e7fe      	b.n	80044a2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80044a4:	f001 fec6 	bl	8006234 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80044a8:	f3ef 8211 	mrs	r2, BASEPRI
 80044ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b0:	f383 8811 	msr	BASEPRI, r3
 80044b4:	f3bf 8f6f 	isb	sy
 80044b8:	f3bf 8f4f 	dsb	sy
 80044bc:	61ba      	str	r2, [r7, #24]
 80044be:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80044c0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80044c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80044c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d302      	bcc.n	80044d6 <xQueueGenericSendFromISR+0xb6>
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d12c      	bne.n	8004530 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80044d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80044e0:	683a      	ldr	r2, [r7, #0]
 80044e2:	68b9      	ldr	r1, [r7, #8]
 80044e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044e6:	f000 f90b 	bl	8004700 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80044ea:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80044ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f2:	d112      	bne.n	800451a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d016      	beq.n	800452a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fe:	3324      	adds	r3, #36	; 0x24
 8004500:	4618      	mov	r0, r3
 8004502:	f000 febb 	bl	800527c <xTaskRemoveFromEventList>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00e      	beq.n	800452a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00b      	beq.n	800452a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2201      	movs	r2, #1
 8004516:	601a      	str	r2, [r3, #0]
 8004518:	e007      	b.n	800452a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800451a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800451e:	3301      	adds	r3, #1
 8004520:	b2db      	uxtb	r3, r3
 8004522:	b25a      	sxtb	r2, r3
 8004524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004526:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800452a:	2301      	movs	r3, #1
 800452c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800452e:	e001      	b.n	8004534 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004530:	2300      	movs	r3, #0
 8004532:	637b      	str	r3, [r7, #52]	; 0x34
 8004534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004536:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800453e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004540:	4618      	mov	r0, r3
 8004542:	3738      	adds	r7, #56	; 0x38
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b08c      	sub	sp, #48	; 0x30
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004554:	2300      	movs	r3, #0
 8004556:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800455c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455e:	2b00      	cmp	r3, #0
 8004560:	d109      	bne.n	8004576 <xQueueReceive+0x2e>
	__asm volatile
 8004562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004566:	f383 8811 	msr	BASEPRI, r3
 800456a:	f3bf 8f6f 	isb	sy
 800456e:	f3bf 8f4f 	dsb	sy
 8004572:	623b      	str	r3, [r7, #32]
 8004574:	e7fe      	b.n	8004574 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d103      	bne.n	8004584 <xQueueReceive+0x3c>
 800457c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004580:	2b00      	cmp	r3, #0
 8004582:	d101      	bne.n	8004588 <xQueueReceive+0x40>
 8004584:	2301      	movs	r3, #1
 8004586:	e000      	b.n	800458a <xQueueReceive+0x42>
 8004588:	2300      	movs	r3, #0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d109      	bne.n	80045a2 <xQueueReceive+0x5a>
 800458e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004592:	f383 8811 	msr	BASEPRI, r3
 8004596:	f3bf 8f6f 	isb	sy
 800459a:	f3bf 8f4f 	dsb	sy
 800459e:	61fb      	str	r3, [r7, #28]
 80045a0:	e7fe      	b.n	80045a0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045a2:	f001 f821 	bl	80055e8 <xTaskGetSchedulerState>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d102      	bne.n	80045b2 <xQueueReceive+0x6a>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <xQueueReceive+0x6e>
 80045b2:	2301      	movs	r3, #1
 80045b4:	e000      	b.n	80045b8 <xQueueReceive+0x70>
 80045b6:	2300      	movs	r3, #0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d109      	bne.n	80045d0 <xQueueReceive+0x88>
 80045bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c0:	f383 8811 	msr	BASEPRI, r3
 80045c4:	f3bf 8f6f 	isb	sy
 80045c8:	f3bf 8f4f 	dsb	sy
 80045cc:	61bb      	str	r3, [r7, #24]
 80045ce:	e7fe      	b.n	80045ce <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80045d0:	f001 fd54 	bl	800607c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80045da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d01f      	beq.n	8004620 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80045e0:	68b9      	ldr	r1, [r7, #8]
 80045e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045e4:	f000 f8f6 	bl	80047d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80045e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ea:	1e5a      	subs	r2, r3, #1
 80045ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ee:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00f      	beq.n	8004618 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fa:	3310      	adds	r3, #16
 80045fc:	4618      	mov	r0, r3
 80045fe:	f000 fe3d 	bl	800527c <xTaskRemoveFromEventList>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d007      	beq.n	8004618 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004608:	4b3c      	ldr	r3, [pc, #240]	; (80046fc <xQueueReceive+0x1b4>)
 800460a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800460e:	601a      	str	r2, [r3, #0]
 8004610:	f3bf 8f4f 	dsb	sy
 8004614:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004618:	f001 fd5e 	bl	80060d8 <vPortExitCritical>
				return pdPASS;
 800461c:	2301      	movs	r3, #1
 800461e:	e069      	b.n	80046f4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d103      	bne.n	800462e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004626:	f001 fd57 	bl	80060d8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800462a:	2300      	movs	r3, #0
 800462c:	e062      	b.n	80046f4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800462e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004630:	2b00      	cmp	r3, #0
 8004632:	d106      	bne.n	8004642 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004634:	f107 0310 	add.w	r3, r7, #16
 8004638:	4618      	mov	r0, r3
 800463a:	f000 fe81 	bl	8005340 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800463e:	2301      	movs	r3, #1
 8004640:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004642:	f001 fd49 	bl	80060d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004646:	f000 fbfd 	bl	8004e44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800464a:	f001 fd17 	bl	800607c <vPortEnterCritical>
 800464e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004650:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004654:	b25b      	sxtb	r3, r3
 8004656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800465a:	d103      	bne.n	8004664 <xQueueReceive+0x11c>
 800465c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800465e:	2200      	movs	r2, #0
 8004660:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004666:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800466a:	b25b      	sxtb	r3, r3
 800466c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004670:	d103      	bne.n	800467a <xQueueReceive+0x132>
 8004672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004674:	2200      	movs	r2, #0
 8004676:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800467a:	f001 fd2d 	bl	80060d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800467e:	1d3a      	adds	r2, r7, #4
 8004680:	f107 0310 	add.w	r3, r7, #16
 8004684:	4611      	mov	r1, r2
 8004686:	4618      	mov	r0, r3
 8004688:	f000 fe70 	bl	800536c <xTaskCheckForTimeOut>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d123      	bne.n	80046da <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004692:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004694:	f000 f916 	bl	80048c4 <prvIsQueueEmpty>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d017      	beq.n	80046ce <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800469e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a0:	3324      	adds	r3, #36	; 0x24
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	4611      	mov	r1, r2
 80046a6:	4618      	mov	r0, r3
 80046a8:	f000 fd9a 	bl	80051e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80046ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046ae:	f000 f8b7 	bl	8004820 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80046b2:	f000 fbd5 	bl	8004e60 <xTaskResumeAll>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d189      	bne.n	80045d0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80046bc:	4b0f      	ldr	r3, [pc, #60]	; (80046fc <xQueueReceive+0x1b4>)
 80046be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046c2:	601a      	str	r2, [r3, #0]
 80046c4:	f3bf 8f4f 	dsb	sy
 80046c8:	f3bf 8f6f 	isb	sy
 80046cc:	e780      	b.n	80045d0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80046ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046d0:	f000 f8a6 	bl	8004820 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80046d4:	f000 fbc4 	bl	8004e60 <xTaskResumeAll>
 80046d8:	e77a      	b.n	80045d0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80046da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046dc:	f000 f8a0 	bl	8004820 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80046e0:	f000 fbbe 	bl	8004e60 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046e6:	f000 f8ed 	bl	80048c4 <prvIsQueueEmpty>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f43f af6f 	beq.w	80045d0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80046f2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3730      	adds	r7, #48	; 0x30
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	e000ed04 	.word	0xe000ed04

08004700 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800470c:	2300      	movs	r3, #0
 800470e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004714:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10d      	bne.n	800473a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d14d      	bne.n	80047c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	4618      	mov	r0, r3
 800472c:	f000 ff7a 	bl	8005624 <xTaskPriorityDisinherit>
 8004730:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	609a      	str	r2, [r3, #8]
 8004738:	e043      	b.n	80047c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d119      	bne.n	8004774 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6858      	ldr	r0, [r3, #4]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004748:	461a      	mov	r2, r3
 800474a:	68b9      	ldr	r1, [r7, #8]
 800474c:	f001 ffaa 	bl	80066a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	685a      	ldr	r2, [r3, #4]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004758:	441a      	add	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	685a      	ldr	r2, [r3, #4]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	429a      	cmp	r2, r3
 8004768:	d32b      	bcc.n	80047c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	605a      	str	r2, [r3, #4]
 8004772:	e026      	b.n	80047c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	68d8      	ldr	r0, [r3, #12]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477c:	461a      	mov	r2, r3
 800477e:	68b9      	ldr	r1, [r7, #8]
 8004780:	f001 ff90 	bl	80066a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	68da      	ldr	r2, [r3, #12]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478c:	425b      	negs	r3, r3
 800478e:	441a      	add	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	68da      	ldr	r2, [r3, #12]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	429a      	cmp	r2, r3
 800479e:	d207      	bcs.n	80047b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	689a      	ldr	r2, [r3, #8]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a8:	425b      	negs	r3, r3
 80047aa:	441a      	add	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d105      	bne.n	80047c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d002      	beq.n	80047c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	3b01      	subs	r3, #1
 80047c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	1c5a      	adds	r2, r3, #1
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80047ca:	697b      	ldr	r3, [r7, #20]
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3718      	adds	r7, #24
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d018      	beq.n	8004818 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	68da      	ldr	r2, [r3, #12]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ee:	441a      	add	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68da      	ldr	r2, [r3, #12]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d303      	bcc.n	8004808 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	68d9      	ldr	r1, [r3, #12]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004810:	461a      	mov	r2, r3
 8004812:	6838      	ldr	r0, [r7, #0]
 8004814:	f001 ff46 	bl	80066a4 <memcpy>
	}
}
 8004818:	bf00      	nop
 800481a:	3708      	adds	r7, #8
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004828:	f001 fc28 	bl	800607c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004832:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004834:	e011      	b.n	800485a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483a:	2b00      	cmp	r3, #0
 800483c:	d012      	beq.n	8004864 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	3324      	adds	r3, #36	; 0x24
 8004842:	4618      	mov	r0, r3
 8004844:	f000 fd1a 	bl	800527c <xTaskRemoveFromEventList>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d001      	beq.n	8004852 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800484e:	f000 fded 	bl	800542c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004852:	7bfb      	ldrb	r3, [r7, #15]
 8004854:	3b01      	subs	r3, #1
 8004856:	b2db      	uxtb	r3, r3
 8004858:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800485a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800485e:	2b00      	cmp	r3, #0
 8004860:	dce9      	bgt.n	8004836 <prvUnlockQueue+0x16>
 8004862:	e000      	b.n	8004866 <prvUnlockQueue+0x46>
					break;
 8004864:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	22ff      	movs	r2, #255	; 0xff
 800486a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800486e:	f001 fc33 	bl	80060d8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004872:	f001 fc03 	bl	800607c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800487c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800487e:	e011      	b.n	80048a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d012      	beq.n	80048ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	3310      	adds	r3, #16
 800488c:	4618      	mov	r0, r3
 800488e:	f000 fcf5 	bl	800527c <xTaskRemoveFromEventList>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d001      	beq.n	800489c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004898:	f000 fdc8 	bl	800542c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800489c:	7bbb      	ldrb	r3, [r7, #14]
 800489e:	3b01      	subs	r3, #1
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80048a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	dce9      	bgt.n	8004880 <prvUnlockQueue+0x60>
 80048ac:	e000      	b.n	80048b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80048ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	22ff      	movs	r2, #255	; 0xff
 80048b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80048b8:	f001 fc0e 	bl	80060d8 <vPortExitCritical>
}
 80048bc:	bf00      	nop
 80048be:	3710      	adds	r7, #16
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80048cc:	f001 fbd6 	bl	800607c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d102      	bne.n	80048de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80048d8:	2301      	movs	r3, #1
 80048da:	60fb      	str	r3, [r7, #12]
 80048dc:	e001      	b.n	80048e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80048de:	2300      	movs	r3, #0
 80048e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80048e2:	f001 fbf9 	bl	80060d8 <vPortExitCritical>

	return xReturn;
 80048e6:	68fb      	ldr	r3, [r7, #12]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3710      	adds	r7, #16
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80048f8:	f001 fbc0 	bl	800607c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004904:	429a      	cmp	r2, r3
 8004906:	d102      	bne.n	800490e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004908:	2301      	movs	r3, #1
 800490a:	60fb      	str	r3, [r7, #12]
 800490c:	e001      	b.n	8004912 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800490e:	2300      	movs	r3, #0
 8004910:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004912:	f001 fbe1 	bl	80060d8 <vPortExitCritical>

	return xReturn;
 8004916:	68fb      	ldr	r3, [r7, #12]
}
 8004918:	4618      	mov	r0, r3
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800492a:	2300      	movs	r3, #0
 800492c:	60fb      	str	r3, [r7, #12]
 800492e:	e014      	b.n	800495a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004930:	4a0e      	ldr	r2, [pc, #56]	; (800496c <vQueueAddToRegistry+0x4c>)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d10b      	bne.n	8004954 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800493c:	490b      	ldr	r1, [pc, #44]	; (800496c <vQueueAddToRegistry+0x4c>)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	683a      	ldr	r2, [r7, #0]
 8004942:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004946:	4a09      	ldr	r2, [pc, #36]	; (800496c <vQueueAddToRegistry+0x4c>)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	00db      	lsls	r3, r3, #3
 800494c:	4413      	add	r3, r2
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004952:	e005      	b.n	8004960 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	3301      	adds	r3, #1
 8004958:	60fb      	str	r3, [r7, #12]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2b07      	cmp	r3, #7
 800495e:	d9e7      	bls.n	8004930 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004960:	bf00      	nop
 8004962:	3714      	adds	r7, #20
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr
 800496c:	200019d8 	.word	0x200019d8

08004970 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004970:	b580      	push	{r7, lr}
 8004972:	b086      	sub	sp, #24
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004980:	f001 fb7c 	bl	800607c <vPortEnterCritical>
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800498a:	b25b      	sxtb	r3, r3
 800498c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004990:	d103      	bne.n	800499a <vQueueWaitForMessageRestricted+0x2a>
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049a0:	b25b      	sxtb	r3, r3
 80049a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a6:	d103      	bne.n	80049b0 <vQueueWaitForMessageRestricted+0x40>
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049b0:	f001 fb92 	bl	80060d8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d106      	bne.n	80049ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	3324      	adds	r3, #36	; 0x24
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	68b9      	ldr	r1, [r7, #8]
 80049c4:	4618      	mov	r0, r3
 80049c6:	f000 fc2f 	bl	8005228 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80049ca:	6978      	ldr	r0, [r7, #20]
 80049cc:	f7ff ff28 	bl	8004820 <prvUnlockQueue>
	}
 80049d0:	bf00      	nop
 80049d2:	3718      	adds	r7, #24
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b08e      	sub	sp, #56	; 0x38
 80049dc:	af04      	add	r7, sp, #16
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
 80049e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80049e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d109      	bne.n	8004a00 <xTaskCreateStatic+0x28>
 80049ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f0:	f383 8811 	msr	BASEPRI, r3
 80049f4:	f3bf 8f6f 	isb	sy
 80049f8:	f3bf 8f4f 	dsb	sy
 80049fc:	623b      	str	r3, [r7, #32]
 80049fe:	e7fe      	b.n	80049fe <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d109      	bne.n	8004a1a <xTaskCreateStatic+0x42>
 8004a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0a:	f383 8811 	msr	BASEPRI, r3
 8004a0e:	f3bf 8f6f 	isb	sy
 8004a12:	f3bf 8f4f 	dsb	sy
 8004a16:	61fb      	str	r3, [r7, #28]
 8004a18:	e7fe      	b.n	8004a18 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004a1a:	235c      	movs	r3, #92	; 0x5c
 8004a1c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	2b5c      	cmp	r3, #92	; 0x5c
 8004a22:	d009      	beq.n	8004a38 <xTaskCreateStatic+0x60>
 8004a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a28:	f383 8811 	msr	BASEPRI, r3
 8004a2c:	f3bf 8f6f 	isb	sy
 8004a30:	f3bf 8f4f 	dsb	sy
 8004a34:	61bb      	str	r3, [r7, #24]
 8004a36:	e7fe      	b.n	8004a36 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004a38:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d01e      	beq.n	8004a7e <xTaskCreateStatic+0xa6>
 8004a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d01b      	beq.n	8004a7e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a48:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a4e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a52:	2202      	movs	r2, #2
 8004a54:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004a58:	2300      	movs	r3, #0
 8004a5a:	9303      	str	r3, [sp, #12]
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5e:	9302      	str	r3, [sp, #8]
 8004a60:	f107 0314 	add.w	r3, r7, #20
 8004a64:	9301      	str	r3, [sp, #4]
 8004a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a68:	9300      	str	r3, [sp, #0]
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	68b9      	ldr	r1, [r7, #8]
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f000 f850 	bl	8004b16 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a78:	f000 f8dc 	bl	8004c34 <prvAddNewTaskToReadyList>
 8004a7c:	e001      	b.n	8004a82 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004a82:	697b      	ldr	r3, [r7, #20]
	}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3728      	adds	r7, #40	; 0x28
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b08c      	sub	sp, #48	; 0x30
 8004a90:	af04      	add	r7, sp, #16
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	603b      	str	r3, [r7, #0]
 8004a98:	4613      	mov	r3, r2
 8004a9a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004a9c:	88fb      	ldrh	r3, [r7, #6]
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f001 fc05 	bl	80062b0 <pvPortMalloc>
 8004aa6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00e      	beq.n	8004acc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004aae:	205c      	movs	r0, #92	; 0x5c
 8004ab0:	f001 fbfe 	bl	80062b0 <pvPortMalloc>
 8004ab4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d003      	beq.n	8004ac4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	631a      	str	r2, [r3, #48]	; 0x30
 8004ac2:	e005      	b.n	8004ad0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004ac4:	6978      	ldr	r0, [r7, #20]
 8004ac6:	f001 fcb5 	bl	8006434 <vPortFree>
 8004aca:	e001      	b.n	8004ad0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004acc:	2300      	movs	r3, #0
 8004ace:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d017      	beq.n	8004b06 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004ade:	88fa      	ldrh	r2, [r7, #6]
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	9303      	str	r3, [sp, #12]
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	9302      	str	r3, [sp, #8]
 8004ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aea:	9301      	str	r3, [sp, #4]
 8004aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aee:	9300      	str	r3, [sp, #0]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	68b9      	ldr	r1, [r7, #8]
 8004af4:	68f8      	ldr	r0, [r7, #12]
 8004af6:	f000 f80e 	bl	8004b16 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004afa:	69f8      	ldr	r0, [r7, #28]
 8004afc:	f000 f89a 	bl	8004c34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004b00:	2301      	movs	r3, #1
 8004b02:	61bb      	str	r3, [r7, #24]
 8004b04:	e002      	b.n	8004b0c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004b06:	f04f 33ff 	mov.w	r3, #4294967295
 8004b0a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004b0c:	69bb      	ldr	r3, [r7, #24]
	}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3720      	adds	r7, #32
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b088      	sub	sp, #32
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	60f8      	str	r0, [r7, #12]
 8004b1e:	60b9      	str	r1, [r7, #8]
 8004b20:	607a      	str	r2, [r7, #4]
 8004b22:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b26:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	21a5      	movs	r1, #165	; 0xa5
 8004b30:	f001 fdc3 	bl	80066ba <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	4413      	add	r3, r2
 8004b44:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	f023 0307 	bic.w	r3, r3, #7
 8004b4c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	f003 0307 	and.w	r3, r3, #7
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d009      	beq.n	8004b6c <prvInitialiseNewTask+0x56>
 8004b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5c:	f383 8811 	msr	BASEPRI, r3
 8004b60:	f3bf 8f6f 	isb	sy
 8004b64:	f3bf 8f4f 	dsb	sy
 8004b68:	617b      	str	r3, [r7, #20]
 8004b6a:	e7fe      	b.n	8004b6a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d01f      	beq.n	8004bb2 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b72:	2300      	movs	r3, #0
 8004b74:	61fb      	str	r3, [r7, #28]
 8004b76:	e012      	b.n	8004b9e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004b78:	68ba      	ldr	r2, [r7, #8]
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	7819      	ldrb	r1, [r3, #0]
 8004b80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	4413      	add	r3, r2
 8004b86:	3334      	adds	r3, #52	; 0x34
 8004b88:	460a      	mov	r2, r1
 8004b8a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004b8c:	68ba      	ldr	r2, [r7, #8]
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	4413      	add	r3, r2
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d006      	beq.n	8004ba6 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	61fb      	str	r3, [r7, #28]
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	2b0f      	cmp	r3, #15
 8004ba2:	d9e9      	bls.n	8004b78 <prvInitialiseNewTask+0x62>
 8004ba4:	e000      	b.n	8004ba8 <prvInitialiseNewTask+0x92>
			{
				break;
 8004ba6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004bb0:	e003      	b.n	8004bba <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bbc:	2b37      	cmp	r3, #55	; 0x37
 8004bbe:	d901      	bls.n	8004bc4 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004bc0:	2337      	movs	r3, #55	; 0x37
 8004bc2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bc8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd8:	3304      	adds	r3, #4
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7ff f994 	bl	8003f08 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be2:	3318      	adds	r3, #24
 8004be4:	4618      	mov	r0, r3
 8004be6:	f7ff f98f 	bl	8003f08 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bfe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c02:	2200      	movs	r2, #0
 8004c04:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c0e:	683a      	ldr	r2, [r7, #0]
 8004c10:	68f9      	ldr	r1, [r7, #12]
 8004c12:	69b8      	ldr	r0, [r7, #24]
 8004c14:	f001 f90c 	bl	8005e30 <pxPortInitialiseStack>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d002      	beq.n	8004c2a <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c2a:	bf00      	nop
 8004c2c:	3720      	adds	r7, #32
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
	...

08004c34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004c3c:	f001 fa1e 	bl	800607c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004c40:	4b2d      	ldr	r3, [pc, #180]	; (8004cf8 <prvAddNewTaskToReadyList+0xc4>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	3301      	adds	r3, #1
 8004c46:	4a2c      	ldr	r2, [pc, #176]	; (8004cf8 <prvAddNewTaskToReadyList+0xc4>)
 8004c48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004c4a:	4b2c      	ldr	r3, [pc, #176]	; (8004cfc <prvAddNewTaskToReadyList+0xc8>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d109      	bne.n	8004c66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004c52:	4a2a      	ldr	r2, [pc, #168]	; (8004cfc <prvAddNewTaskToReadyList+0xc8>)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004c58:	4b27      	ldr	r3, [pc, #156]	; (8004cf8 <prvAddNewTaskToReadyList+0xc4>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d110      	bne.n	8004c82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004c60:	f000 fc08 	bl	8005474 <prvInitialiseTaskLists>
 8004c64:	e00d      	b.n	8004c82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004c66:	4b26      	ldr	r3, [pc, #152]	; (8004d00 <prvAddNewTaskToReadyList+0xcc>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d109      	bne.n	8004c82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004c6e:	4b23      	ldr	r3, [pc, #140]	; (8004cfc <prvAddNewTaskToReadyList+0xc8>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d802      	bhi.n	8004c82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004c7c:	4a1f      	ldr	r2, [pc, #124]	; (8004cfc <prvAddNewTaskToReadyList+0xc8>)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004c82:	4b20      	ldr	r3, [pc, #128]	; (8004d04 <prvAddNewTaskToReadyList+0xd0>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	3301      	adds	r3, #1
 8004c88:	4a1e      	ldr	r2, [pc, #120]	; (8004d04 <prvAddNewTaskToReadyList+0xd0>)
 8004c8a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004c8c:	4b1d      	ldr	r3, [pc, #116]	; (8004d04 <prvAddNewTaskToReadyList+0xd0>)
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c98:	4b1b      	ldr	r3, [pc, #108]	; (8004d08 <prvAddNewTaskToReadyList+0xd4>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d903      	bls.n	8004ca8 <prvAddNewTaskToReadyList+0x74>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca4:	4a18      	ldr	r2, [pc, #96]	; (8004d08 <prvAddNewTaskToReadyList+0xd4>)
 8004ca6:	6013      	str	r3, [r2, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cac:	4613      	mov	r3, r2
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	4413      	add	r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	4a15      	ldr	r2, [pc, #84]	; (8004d0c <prvAddNewTaskToReadyList+0xd8>)
 8004cb6:	441a      	add	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	3304      	adds	r3, #4
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	4610      	mov	r0, r2
 8004cc0:	f7ff f92f 	bl	8003f22 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004cc4:	f001 fa08 	bl	80060d8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004cc8:	4b0d      	ldr	r3, [pc, #52]	; (8004d00 <prvAddNewTaskToReadyList+0xcc>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00e      	beq.n	8004cee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004cd0:	4b0a      	ldr	r3, [pc, #40]	; (8004cfc <prvAddNewTaskToReadyList+0xc8>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d207      	bcs.n	8004cee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004cde:	4b0c      	ldr	r3, [pc, #48]	; (8004d10 <prvAddNewTaskToReadyList+0xdc>)
 8004ce0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ce4:	601a      	str	r2, [r3, #0]
 8004ce6:	f3bf 8f4f 	dsb	sy
 8004cea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004cee:	bf00      	nop
 8004cf0:	3708      	adds	r7, #8
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	20000bbc 	.word	0x20000bbc
 8004cfc:	200006e8 	.word	0x200006e8
 8004d00:	20000bc8 	.word	0x20000bc8
 8004d04:	20000bd8 	.word	0x20000bd8
 8004d08:	20000bc4 	.word	0x20000bc4
 8004d0c:	200006ec 	.word	0x200006ec
 8004d10:	e000ed04 	.word	0xe000ed04

08004d14 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d016      	beq.n	8004d54 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004d26:	4b13      	ldr	r3, [pc, #76]	; (8004d74 <vTaskDelay+0x60>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d009      	beq.n	8004d42 <vTaskDelay+0x2e>
 8004d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d32:	f383 8811 	msr	BASEPRI, r3
 8004d36:	f3bf 8f6f 	isb	sy
 8004d3a:	f3bf 8f4f 	dsb	sy
 8004d3e:	60bb      	str	r3, [r7, #8]
 8004d40:	e7fe      	b.n	8004d40 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004d42:	f000 f87f 	bl	8004e44 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004d46:	2100      	movs	r1, #0
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f000 fcd7 	bl	80056fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004d4e:	f000 f887 	bl	8004e60 <xTaskResumeAll>
 8004d52:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d107      	bne.n	8004d6a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004d5a:	4b07      	ldr	r3, [pc, #28]	; (8004d78 <vTaskDelay+0x64>)
 8004d5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d60:	601a      	str	r2, [r3, #0]
 8004d62:	f3bf 8f4f 	dsb	sy
 8004d66:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004d6a:	bf00      	nop
 8004d6c:	3710      	adds	r7, #16
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	20000be4 	.word	0x20000be4
 8004d78:	e000ed04 	.word	0xe000ed04

08004d7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b08a      	sub	sp, #40	; 0x28
 8004d80:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004d82:	2300      	movs	r3, #0
 8004d84:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004d86:	2300      	movs	r3, #0
 8004d88:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004d8a:	463a      	mov	r2, r7
 8004d8c:	1d39      	adds	r1, r7, #4
 8004d8e:	f107 0308 	add.w	r3, r7, #8
 8004d92:	4618      	mov	r0, r3
 8004d94:	f7ff f864 	bl	8003e60 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004d98:	6839      	ldr	r1, [r7, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68ba      	ldr	r2, [r7, #8]
 8004d9e:	9202      	str	r2, [sp, #8]
 8004da0:	9301      	str	r3, [sp, #4]
 8004da2:	2300      	movs	r3, #0
 8004da4:	9300      	str	r3, [sp, #0]
 8004da6:	2300      	movs	r3, #0
 8004da8:	460a      	mov	r2, r1
 8004daa:	4920      	ldr	r1, [pc, #128]	; (8004e2c <vTaskStartScheduler+0xb0>)
 8004dac:	4820      	ldr	r0, [pc, #128]	; (8004e30 <vTaskStartScheduler+0xb4>)
 8004dae:	f7ff fe13 	bl	80049d8 <xTaskCreateStatic>
 8004db2:	4602      	mov	r2, r0
 8004db4:	4b1f      	ldr	r3, [pc, #124]	; (8004e34 <vTaskStartScheduler+0xb8>)
 8004db6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004db8:	4b1e      	ldr	r3, [pc, #120]	; (8004e34 <vTaskStartScheduler+0xb8>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d002      	beq.n	8004dc6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	617b      	str	r3, [r7, #20]
 8004dc4:	e001      	b.n	8004dca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d102      	bne.n	8004dd6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004dd0:	f000 fce8 	bl	80057a4 <xTimerCreateTimerTask>
 8004dd4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d115      	bne.n	8004e08 <vTaskStartScheduler+0x8c>
 8004ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de0:	f383 8811 	msr	BASEPRI, r3
 8004de4:	f3bf 8f6f 	isb	sy
 8004de8:	f3bf 8f4f 	dsb	sy
 8004dec:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004dee:	4b12      	ldr	r3, [pc, #72]	; (8004e38 <vTaskStartScheduler+0xbc>)
 8004df0:	f04f 32ff 	mov.w	r2, #4294967295
 8004df4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004df6:	4b11      	ldr	r3, [pc, #68]	; (8004e3c <vTaskStartScheduler+0xc0>)
 8004df8:	2201      	movs	r2, #1
 8004dfa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004dfc:	4b10      	ldr	r3, [pc, #64]	; (8004e40 <vTaskStartScheduler+0xc4>)
 8004dfe:	2200      	movs	r2, #0
 8004e00:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004e02:	f001 f89d 	bl	8005f40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004e06:	e00d      	b.n	8004e24 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e0e:	d109      	bne.n	8004e24 <vTaskStartScheduler+0xa8>
 8004e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e14:	f383 8811 	msr	BASEPRI, r3
 8004e18:	f3bf 8f6f 	isb	sy
 8004e1c:	f3bf 8f4f 	dsb	sy
 8004e20:	60fb      	str	r3, [r7, #12]
 8004e22:	e7fe      	b.n	8004e22 <vTaskStartScheduler+0xa6>
}
 8004e24:	bf00      	nop
 8004e26:	3718      	adds	r7, #24
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	080066f8 	.word	0x080066f8
 8004e30:	08005445 	.word	0x08005445
 8004e34:	20000be0 	.word	0x20000be0
 8004e38:	20000bdc 	.word	0x20000bdc
 8004e3c:	20000bc8 	.word	0x20000bc8
 8004e40:	20000bc0 	.word	0x20000bc0

08004e44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004e44:	b480      	push	{r7}
 8004e46:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004e48:	4b04      	ldr	r3, [pc, #16]	; (8004e5c <vTaskSuspendAll+0x18>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	4a03      	ldr	r2, [pc, #12]	; (8004e5c <vTaskSuspendAll+0x18>)
 8004e50:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004e52:	bf00      	nop
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr
 8004e5c:	20000be4 	.word	0x20000be4

08004e60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004e66:	2300      	movs	r3, #0
 8004e68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004e6e:	4b41      	ldr	r3, [pc, #260]	; (8004f74 <xTaskResumeAll+0x114>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d109      	bne.n	8004e8a <xTaskResumeAll+0x2a>
 8004e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7a:	f383 8811 	msr	BASEPRI, r3
 8004e7e:	f3bf 8f6f 	isb	sy
 8004e82:	f3bf 8f4f 	dsb	sy
 8004e86:	603b      	str	r3, [r7, #0]
 8004e88:	e7fe      	b.n	8004e88 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004e8a:	f001 f8f7 	bl	800607c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004e8e:	4b39      	ldr	r3, [pc, #228]	; (8004f74 <xTaskResumeAll+0x114>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	3b01      	subs	r3, #1
 8004e94:	4a37      	ldr	r2, [pc, #220]	; (8004f74 <xTaskResumeAll+0x114>)
 8004e96:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e98:	4b36      	ldr	r3, [pc, #216]	; (8004f74 <xTaskResumeAll+0x114>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d162      	bne.n	8004f66 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004ea0:	4b35      	ldr	r3, [pc, #212]	; (8004f78 <xTaskResumeAll+0x118>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d05e      	beq.n	8004f66 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ea8:	e02f      	b.n	8004f0a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004eaa:	4b34      	ldr	r3, [pc, #208]	; (8004f7c <xTaskResumeAll+0x11c>)
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	3318      	adds	r3, #24
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7ff f890 	bl	8003fdc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	3304      	adds	r3, #4
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f7ff f88b 	bl	8003fdc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eca:	4b2d      	ldr	r3, [pc, #180]	; (8004f80 <xTaskResumeAll+0x120>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d903      	bls.n	8004eda <xTaskResumeAll+0x7a>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed6:	4a2a      	ldr	r2, [pc, #168]	; (8004f80 <xTaskResumeAll+0x120>)
 8004ed8:	6013      	str	r3, [r2, #0]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ede:	4613      	mov	r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	4413      	add	r3, r2
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	4a27      	ldr	r2, [pc, #156]	; (8004f84 <xTaskResumeAll+0x124>)
 8004ee8:	441a      	add	r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	3304      	adds	r3, #4
 8004eee:	4619      	mov	r1, r3
 8004ef0:	4610      	mov	r0, r2
 8004ef2:	f7ff f816 	bl	8003f22 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004efa:	4b23      	ldr	r3, [pc, #140]	; (8004f88 <xTaskResumeAll+0x128>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d302      	bcc.n	8004f0a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004f04:	4b21      	ldr	r3, [pc, #132]	; (8004f8c <xTaskResumeAll+0x12c>)
 8004f06:	2201      	movs	r2, #1
 8004f08:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f0a:	4b1c      	ldr	r3, [pc, #112]	; (8004f7c <xTaskResumeAll+0x11c>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1cb      	bne.n	8004eaa <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d001      	beq.n	8004f1c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004f18:	f000 fb46 	bl	80055a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004f1c:	4b1c      	ldr	r3, [pc, #112]	; (8004f90 <xTaskResumeAll+0x130>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d010      	beq.n	8004f4a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004f28:	f000 f846 	bl	8004fb8 <xTaskIncrementTick>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d002      	beq.n	8004f38 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004f32:	4b16      	ldr	r3, [pc, #88]	; (8004f8c <xTaskResumeAll+0x12c>)
 8004f34:	2201      	movs	r2, #1
 8004f36:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1f1      	bne.n	8004f28 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004f44:	4b12      	ldr	r3, [pc, #72]	; (8004f90 <xTaskResumeAll+0x130>)
 8004f46:	2200      	movs	r2, #0
 8004f48:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004f4a:	4b10      	ldr	r3, [pc, #64]	; (8004f8c <xTaskResumeAll+0x12c>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d009      	beq.n	8004f66 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004f52:	2301      	movs	r3, #1
 8004f54:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004f56:	4b0f      	ldr	r3, [pc, #60]	; (8004f94 <xTaskResumeAll+0x134>)
 8004f58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f5c:	601a      	str	r2, [r3, #0]
 8004f5e:	f3bf 8f4f 	dsb	sy
 8004f62:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f66:	f001 f8b7 	bl	80060d8 <vPortExitCritical>

	return xAlreadyYielded;
 8004f6a:	68bb      	ldr	r3, [r7, #8]
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3710      	adds	r7, #16
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	20000be4 	.word	0x20000be4
 8004f78:	20000bbc 	.word	0x20000bbc
 8004f7c:	20000b7c 	.word	0x20000b7c
 8004f80:	20000bc4 	.word	0x20000bc4
 8004f84:	200006ec 	.word	0x200006ec
 8004f88:	200006e8 	.word	0x200006e8
 8004f8c:	20000bd0 	.word	0x20000bd0
 8004f90:	20000bcc 	.word	0x20000bcc
 8004f94:	e000ed04 	.word	0xe000ed04

08004f98 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004f9e:	4b05      	ldr	r3, [pc, #20]	; (8004fb4 <xTaskGetTickCount+0x1c>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004fa4:	687b      	ldr	r3, [r7, #4]
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	370c      	adds	r7, #12
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	20000bc0 	.word	0x20000bc0

08004fb8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b086      	sub	sp, #24
 8004fbc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fc2:	4b4e      	ldr	r3, [pc, #312]	; (80050fc <xTaskIncrementTick+0x144>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	f040 8088 	bne.w	80050dc <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004fcc:	4b4c      	ldr	r3, [pc, #304]	; (8005100 <xTaskIncrementTick+0x148>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004fd4:	4a4a      	ldr	r2, [pc, #296]	; (8005100 <xTaskIncrementTick+0x148>)
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d11f      	bne.n	8005020 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004fe0:	4b48      	ldr	r3, [pc, #288]	; (8005104 <xTaskIncrementTick+0x14c>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d009      	beq.n	8004ffe <xTaskIncrementTick+0x46>
 8004fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fee:	f383 8811 	msr	BASEPRI, r3
 8004ff2:	f3bf 8f6f 	isb	sy
 8004ff6:	f3bf 8f4f 	dsb	sy
 8004ffa:	603b      	str	r3, [r7, #0]
 8004ffc:	e7fe      	b.n	8004ffc <xTaskIncrementTick+0x44>
 8004ffe:	4b41      	ldr	r3, [pc, #260]	; (8005104 <xTaskIncrementTick+0x14c>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	60fb      	str	r3, [r7, #12]
 8005004:	4b40      	ldr	r3, [pc, #256]	; (8005108 <xTaskIncrementTick+0x150>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a3e      	ldr	r2, [pc, #248]	; (8005104 <xTaskIncrementTick+0x14c>)
 800500a:	6013      	str	r3, [r2, #0]
 800500c:	4a3e      	ldr	r2, [pc, #248]	; (8005108 <xTaskIncrementTick+0x150>)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6013      	str	r3, [r2, #0]
 8005012:	4b3e      	ldr	r3, [pc, #248]	; (800510c <xTaskIncrementTick+0x154>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	3301      	adds	r3, #1
 8005018:	4a3c      	ldr	r2, [pc, #240]	; (800510c <xTaskIncrementTick+0x154>)
 800501a:	6013      	str	r3, [r2, #0]
 800501c:	f000 fac4 	bl	80055a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005020:	4b3b      	ldr	r3, [pc, #236]	; (8005110 <xTaskIncrementTick+0x158>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	429a      	cmp	r2, r3
 8005028:	d349      	bcc.n	80050be <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800502a:	4b36      	ldr	r3, [pc, #216]	; (8005104 <xTaskIncrementTick+0x14c>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d104      	bne.n	800503e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005034:	4b36      	ldr	r3, [pc, #216]	; (8005110 <xTaskIncrementTick+0x158>)
 8005036:	f04f 32ff 	mov.w	r2, #4294967295
 800503a:	601a      	str	r2, [r3, #0]
					break;
 800503c:	e03f      	b.n	80050be <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800503e:	4b31      	ldr	r3, [pc, #196]	; (8005104 <xTaskIncrementTick+0x14c>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	429a      	cmp	r2, r3
 8005054:	d203      	bcs.n	800505e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005056:	4a2e      	ldr	r2, [pc, #184]	; (8005110 <xTaskIncrementTick+0x158>)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800505c:	e02f      	b.n	80050be <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	3304      	adds	r3, #4
 8005062:	4618      	mov	r0, r3
 8005064:	f7fe ffba 	bl	8003fdc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800506c:	2b00      	cmp	r3, #0
 800506e:	d004      	beq.n	800507a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	3318      	adds	r3, #24
 8005074:	4618      	mov	r0, r3
 8005076:	f7fe ffb1 	bl	8003fdc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800507e:	4b25      	ldr	r3, [pc, #148]	; (8005114 <xTaskIncrementTick+0x15c>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	429a      	cmp	r2, r3
 8005084:	d903      	bls.n	800508e <xTaskIncrementTick+0xd6>
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508a:	4a22      	ldr	r2, [pc, #136]	; (8005114 <xTaskIncrementTick+0x15c>)
 800508c:	6013      	str	r3, [r2, #0]
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005092:	4613      	mov	r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4413      	add	r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4a1f      	ldr	r2, [pc, #124]	; (8005118 <xTaskIncrementTick+0x160>)
 800509c:	441a      	add	r2, r3
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	3304      	adds	r3, #4
 80050a2:	4619      	mov	r1, r3
 80050a4:	4610      	mov	r0, r2
 80050a6:	f7fe ff3c 	bl	8003f22 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ae:	4b1b      	ldr	r3, [pc, #108]	; (800511c <xTaskIncrementTick+0x164>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d3b8      	bcc.n	800502a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80050b8:	2301      	movs	r3, #1
 80050ba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050bc:	e7b5      	b.n	800502a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80050be:	4b17      	ldr	r3, [pc, #92]	; (800511c <xTaskIncrementTick+0x164>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050c4:	4914      	ldr	r1, [pc, #80]	; (8005118 <xTaskIncrementTick+0x160>)
 80050c6:	4613      	mov	r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	4413      	add	r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	440b      	add	r3, r1
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d907      	bls.n	80050e6 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80050d6:	2301      	movs	r3, #1
 80050d8:	617b      	str	r3, [r7, #20]
 80050da:	e004      	b.n	80050e6 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80050dc:	4b10      	ldr	r3, [pc, #64]	; (8005120 <xTaskIncrementTick+0x168>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	3301      	adds	r3, #1
 80050e2:	4a0f      	ldr	r2, [pc, #60]	; (8005120 <xTaskIncrementTick+0x168>)
 80050e4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80050e6:	4b0f      	ldr	r3, [pc, #60]	; (8005124 <xTaskIncrementTick+0x16c>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d001      	beq.n	80050f2 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80050ee:	2301      	movs	r3, #1
 80050f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80050f2:	697b      	ldr	r3, [r7, #20]
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3718      	adds	r7, #24
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	20000be4 	.word	0x20000be4
 8005100:	20000bc0 	.word	0x20000bc0
 8005104:	20000b74 	.word	0x20000b74
 8005108:	20000b78 	.word	0x20000b78
 800510c:	20000bd4 	.word	0x20000bd4
 8005110:	20000bdc 	.word	0x20000bdc
 8005114:	20000bc4 	.word	0x20000bc4
 8005118:	200006ec 	.word	0x200006ec
 800511c:	200006e8 	.word	0x200006e8
 8005120:	20000bcc 	.word	0x20000bcc
 8005124:	20000bd0 	.word	0x20000bd0

08005128 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800512e:	4b27      	ldr	r3, [pc, #156]	; (80051cc <vTaskSwitchContext+0xa4>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d003      	beq.n	800513e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005136:	4b26      	ldr	r3, [pc, #152]	; (80051d0 <vTaskSwitchContext+0xa8>)
 8005138:	2201      	movs	r2, #1
 800513a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800513c:	e040      	b.n	80051c0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800513e:	4b24      	ldr	r3, [pc, #144]	; (80051d0 <vTaskSwitchContext+0xa8>)
 8005140:	2200      	movs	r2, #0
 8005142:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005144:	4b23      	ldr	r3, [pc, #140]	; (80051d4 <vTaskSwitchContext+0xac>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	60fb      	str	r3, [r7, #12]
 800514a:	e00f      	b.n	800516c <vTaskSwitchContext+0x44>
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d109      	bne.n	8005166 <vTaskSwitchContext+0x3e>
 8005152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005156:	f383 8811 	msr	BASEPRI, r3
 800515a:	f3bf 8f6f 	isb	sy
 800515e:	f3bf 8f4f 	dsb	sy
 8005162:	607b      	str	r3, [r7, #4]
 8005164:	e7fe      	b.n	8005164 <vTaskSwitchContext+0x3c>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	3b01      	subs	r3, #1
 800516a:	60fb      	str	r3, [r7, #12]
 800516c:	491a      	ldr	r1, [pc, #104]	; (80051d8 <vTaskSwitchContext+0xb0>)
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	4613      	mov	r3, r2
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	4413      	add	r3, r2
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	440b      	add	r3, r1
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d0e5      	beq.n	800514c <vTaskSwitchContext+0x24>
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	4613      	mov	r3, r2
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	4413      	add	r3, r2
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	4a13      	ldr	r2, [pc, #76]	; (80051d8 <vTaskSwitchContext+0xb0>)
 800518c:	4413      	add	r3, r2
 800518e:	60bb      	str	r3, [r7, #8]
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	605a      	str	r2, [r3, #4]
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	3308      	adds	r3, #8
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d104      	bne.n	80051b0 <vTaskSwitchContext+0x88>
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	605a      	str	r2, [r3, #4]
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	4a09      	ldr	r2, [pc, #36]	; (80051dc <vTaskSwitchContext+0xb4>)
 80051b8:	6013      	str	r3, [r2, #0]
 80051ba:	4a06      	ldr	r2, [pc, #24]	; (80051d4 <vTaskSwitchContext+0xac>)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6013      	str	r3, [r2, #0]
}
 80051c0:	bf00      	nop
 80051c2:	3714      	adds	r7, #20
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr
 80051cc:	20000be4 	.word	0x20000be4
 80051d0:	20000bd0 	.word	0x20000bd0
 80051d4:	20000bc4 	.word	0x20000bc4
 80051d8:	200006ec 	.word	0x200006ec
 80051dc:	200006e8 	.word	0x200006e8

080051e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d109      	bne.n	8005204 <vTaskPlaceOnEventList+0x24>
 80051f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f4:	f383 8811 	msr	BASEPRI, r3
 80051f8:	f3bf 8f6f 	isb	sy
 80051fc:	f3bf 8f4f 	dsb	sy
 8005200:	60fb      	str	r3, [r7, #12]
 8005202:	e7fe      	b.n	8005202 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005204:	4b07      	ldr	r3, [pc, #28]	; (8005224 <vTaskPlaceOnEventList+0x44>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	3318      	adds	r3, #24
 800520a:	4619      	mov	r1, r3
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f7fe feac 	bl	8003f6a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005212:	2101      	movs	r1, #1
 8005214:	6838      	ldr	r0, [r7, #0]
 8005216:	f000 fa71 	bl	80056fc <prvAddCurrentTaskToDelayedList>
}
 800521a:	bf00      	nop
 800521c:	3710      	adds	r7, #16
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	200006e8 	.word	0x200006e8

08005228 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005228:	b580      	push	{r7, lr}
 800522a:	b086      	sub	sp, #24
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d109      	bne.n	800524e <vTaskPlaceOnEventListRestricted+0x26>
 800523a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523e:	f383 8811 	msr	BASEPRI, r3
 8005242:	f3bf 8f6f 	isb	sy
 8005246:	f3bf 8f4f 	dsb	sy
 800524a:	617b      	str	r3, [r7, #20]
 800524c:	e7fe      	b.n	800524c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800524e:	4b0a      	ldr	r3, [pc, #40]	; (8005278 <vTaskPlaceOnEventListRestricted+0x50>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	3318      	adds	r3, #24
 8005254:	4619      	mov	r1, r3
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f7fe fe63 	bl	8003f22 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d002      	beq.n	8005268 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8005262:	f04f 33ff 	mov.w	r3, #4294967295
 8005266:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005268:	6879      	ldr	r1, [r7, #4]
 800526a:	68b8      	ldr	r0, [r7, #8]
 800526c:	f000 fa46 	bl	80056fc <prvAddCurrentTaskToDelayedList>
	}
 8005270:	bf00      	nop
 8005272:	3718      	adds	r7, #24
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	200006e8 	.word	0x200006e8

0800527c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b086      	sub	sp, #24
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d109      	bne.n	80052a6 <xTaskRemoveFromEventList+0x2a>
 8005292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005296:	f383 8811 	msr	BASEPRI, r3
 800529a:	f3bf 8f6f 	isb	sy
 800529e:	f3bf 8f4f 	dsb	sy
 80052a2:	60fb      	str	r3, [r7, #12]
 80052a4:	e7fe      	b.n	80052a4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	3318      	adds	r3, #24
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7fe fe96 	bl	8003fdc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052b0:	4b1d      	ldr	r3, [pc, #116]	; (8005328 <xTaskRemoveFromEventList+0xac>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d11d      	bne.n	80052f4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	3304      	adds	r3, #4
 80052bc:	4618      	mov	r0, r3
 80052be:	f7fe fe8d 	bl	8003fdc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052c6:	4b19      	ldr	r3, [pc, #100]	; (800532c <xTaskRemoveFromEventList+0xb0>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d903      	bls.n	80052d6 <xTaskRemoveFromEventList+0x5a>
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d2:	4a16      	ldr	r2, [pc, #88]	; (800532c <xTaskRemoveFromEventList+0xb0>)
 80052d4:	6013      	str	r3, [r2, #0]
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052da:	4613      	mov	r3, r2
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	4413      	add	r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	4a13      	ldr	r2, [pc, #76]	; (8005330 <xTaskRemoveFromEventList+0xb4>)
 80052e4:	441a      	add	r2, r3
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	3304      	adds	r3, #4
 80052ea:	4619      	mov	r1, r3
 80052ec:	4610      	mov	r0, r2
 80052ee:	f7fe fe18 	bl	8003f22 <vListInsertEnd>
 80052f2:	e005      	b.n	8005300 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	3318      	adds	r3, #24
 80052f8:	4619      	mov	r1, r3
 80052fa:	480e      	ldr	r0, [pc, #56]	; (8005334 <xTaskRemoveFromEventList+0xb8>)
 80052fc:	f7fe fe11 	bl	8003f22 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005304:	4b0c      	ldr	r3, [pc, #48]	; (8005338 <xTaskRemoveFromEventList+0xbc>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530a:	429a      	cmp	r2, r3
 800530c:	d905      	bls.n	800531a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800530e:	2301      	movs	r3, #1
 8005310:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005312:	4b0a      	ldr	r3, [pc, #40]	; (800533c <xTaskRemoveFromEventList+0xc0>)
 8005314:	2201      	movs	r2, #1
 8005316:	601a      	str	r2, [r3, #0]
 8005318:	e001      	b.n	800531e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800531a:	2300      	movs	r3, #0
 800531c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800531e:	697b      	ldr	r3, [r7, #20]
}
 8005320:	4618      	mov	r0, r3
 8005322:	3718      	adds	r7, #24
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	20000be4 	.word	0x20000be4
 800532c:	20000bc4 	.word	0x20000bc4
 8005330:	200006ec 	.word	0x200006ec
 8005334:	20000b7c 	.word	0x20000b7c
 8005338:	200006e8 	.word	0x200006e8
 800533c:	20000bd0 	.word	0x20000bd0

08005340 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005348:	4b06      	ldr	r3, [pc, #24]	; (8005364 <vTaskInternalSetTimeOutState+0x24>)
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005350:	4b05      	ldr	r3, [pc, #20]	; (8005368 <vTaskInternalSetTimeOutState+0x28>)
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	605a      	str	r2, [r3, #4]
}
 8005358:	bf00      	nop
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr
 8005364:	20000bd4 	.word	0x20000bd4
 8005368:	20000bc0 	.word	0x20000bc0

0800536c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b088      	sub	sp, #32
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d109      	bne.n	8005390 <xTaskCheckForTimeOut+0x24>
 800537c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005380:	f383 8811 	msr	BASEPRI, r3
 8005384:	f3bf 8f6f 	isb	sy
 8005388:	f3bf 8f4f 	dsb	sy
 800538c:	613b      	str	r3, [r7, #16]
 800538e:	e7fe      	b.n	800538e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d109      	bne.n	80053aa <xTaskCheckForTimeOut+0x3e>
 8005396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539a:	f383 8811 	msr	BASEPRI, r3
 800539e:	f3bf 8f6f 	isb	sy
 80053a2:	f3bf 8f4f 	dsb	sy
 80053a6:	60fb      	str	r3, [r7, #12]
 80053a8:	e7fe      	b.n	80053a8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80053aa:	f000 fe67 	bl	800607c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80053ae:	4b1d      	ldr	r3, [pc, #116]	; (8005424 <xTaskCheckForTimeOut+0xb8>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	69ba      	ldr	r2, [r7, #24]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c6:	d102      	bne.n	80053ce <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80053c8:	2300      	movs	r3, #0
 80053ca:	61fb      	str	r3, [r7, #28]
 80053cc:	e023      	b.n	8005416 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	4b15      	ldr	r3, [pc, #84]	; (8005428 <xTaskCheckForTimeOut+0xbc>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d007      	beq.n	80053ea <xTaskCheckForTimeOut+0x7e>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	69ba      	ldr	r2, [r7, #24]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d302      	bcc.n	80053ea <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80053e4:	2301      	movs	r3, #1
 80053e6:	61fb      	str	r3, [r7, #28]
 80053e8:	e015      	b.n	8005416 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	697a      	ldr	r2, [r7, #20]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d20b      	bcs.n	800540c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	1ad2      	subs	r2, r2, r3
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f7ff ff9d 	bl	8005340 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005406:	2300      	movs	r3, #0
 8005408:	61fb      	str	r3, [r7, #28]
 800540a:	e004      	b.n	8005416 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	2200      	movs	r2, #0
 8005410:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005412:	2301      	movs	r3, #1
 8005414:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005416:	f000 fe5f 	bl	80060d8 <vPortExitCritical>

	return xReturn;
 800541a:	69fb      	ldr	r3, [r7, #28]
}
 800541c:	4618      	mov	r0, r3
 800541e:	3720      	adds	r7, #32
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	20000bc0 	.word	0x20000bc0
 8005428:	20000bd4 	.word	0x20000bd4

0800542c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800542c:	b480      	push	{r7}
 800542e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005430:	4b03      	ldr	r3, [pc, #12]	; (8005440 <vTaskMissedYield+0x14>)
 8005432:	2201      	movs	r2, #1
 8005434:	601a      	str	r2, [r3, #0]
}
 8005436:	bf00      	nop
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr
 8005440:	20000bd0 	.word	0x20000bd0

08005444 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b082      	sub	sp, #8
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800544c:	f000 f852 	bl	80054f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005450:	4b06      	ldr	r3, [pc, #24]	; (800546c <prvIdleTask+0x28>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d9f9      	bls.n	800544c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005458:	4b05      	ldr	r3, [pc, #20]	; (8005470 <prvIdleTask+0x2c>)
 800545a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800545e:	601a      	str	r2, [r3, #0]
 8005460:	f3bf 8f4f 	dsb	sy
 8005464:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005468:	e7f0      	b.n	800544c <prvIdleTask+0x8>
 800546a:	bf00      	nop
 800546c:	200006ec 	.word	0x200006ec
 8005470:	e000ed04 	.word	0xe000ed04

08005474 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800547a:	2300      	movs	r3, #0
 800547c:	607b      	str	r3, [r7, #4]
 800547e:	e00c      	b.n	800549a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	4613      	mov	r3, r2
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	4413      	add	r3, r2
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	4a12      	ldr	r2, [pc, #72]	; (80054d4 <prvInitialiseTaskLists+0x60>)
 800548c:	4413      	add	r3, r2
 800548e:	4618      	mov	r0, r3
 8005490:	f7fe fd1a 	bl	8003ec8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	3301      	adds	r3, #1
 8005498:	607b      	str	r3, [r7, #4]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2b37      	cmp	r3, #55	; 0x37
 800549e:	d9ef      	bls.n	8005480 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80054a0:	480d      	ldr	r0, [pc, #52]	; (80054d8 <prvInitialiseTaskLists+0x64>)
 80054a2:	f7fe fd11 	bl	8003ec8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80054a6:	480d      	ldr	r0, [pc, #52]	; (80054dc <prvInitialiseTaskLists+0x68>)
 80054a8:	f7fe fd0e 	bl	8003ec8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80054ac:	480c      	ldr	r0, [pc, #48]	; (80054e0 <prvInitialiseTaskLists+0x6c>)
 80054ae:	f7fe fd0b 	bl	8003ec8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80054b2:	480c      	ldr	r0, [pc, #48]	; (80054e4 <prvInitialiseTaskLists+0x70>)
 80054b4:	f7fe fd08 	bl	8003ec8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80054b8:	480b      	ldr	r0, [pc, #44]	; (80054e8 <prvInitialiseTaskLists+0x74>)
 80054ba:	f7fe fd05 	bl	8003ec8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80054be:	4b0b      	ldr	r3, [pc, #44]	; (80054ec <prvInitialiseTaskLists+0x78>)
 80054c0:	4a05      	ldr	r2, [pc, #20]	; (80054d8 <prvInitialiseTaskLists+0x64>)
 80054c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80054c4:	4b0a      	ldr	r3, [pc, #40]	; (80054f0 <prvInitialiseTaskLists+0x7c>)
 80054c6:	4a05      	ldr	r2, [pc, #20]	; (80054dc <prvInitialiseTaskLists+0x68>)
 80054c8:	601a      	str	r2, [r3, #0]
}
 80054ca:	bf00      	nop
 80054cc:	3708      	adds	r7, #8
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	200006ec 	.word	0x200006ec
 80054d8:	20000b4c 	.word	0x20000b4c
 80054dc:	20000b60 	.word	0x20000b60
 80054e0:	20000b7c 	.word	0x20000b7c
 80054e4:	20000b90 	.word	0x20000b90
 80054e8:	20000ba8 	.word	0x20000ba8
 80054ec:	20000b74 	.word	0x20000b74
 80054f0:	20000b78 	.word	0x20000b78

080054f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80054fa:	e019      	b.n	8005530 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80054fc:	f000 fdbe 	bl	800607c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005500:	4b0f      	ldr	r3, [pc, #60]	; (8005540 <prvCheckTasksWaitingTermination+0x4c>)
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	3304      	adds	r3, #4
 800550c:	4618      	mov	r0, r3
 800550e:	f7fe fd65 	bl	8003fdc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005512:	4b0c      	ldr	r3, [pc, #48]	; (8005544 <prvCheckTasksWaitingTermination+0x50>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	3b01      	subs	r3, #1
 8005518:	4a0a      	ldr	r2, [pc, #40]	; (8005544 <prvCheckTasksWaitingTermination+0x50>)
 800551a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800551c:	4b0a      	ldr	r3, [pc, #40]	; (8005548 <prvCheckTasksWaitingTermination+0x54>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	3b01      	subs	r3, #1
 8005522:	4a09      	ldr	r2, [pc, #36]	; (8005548 <prvCheckTasksWaitingTermination+0x54>)
 8005524:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005526:	f000 fdd7 	bl	80060d8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 f80e 	bl	800554c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005530:	4b05      	ldr	r3, [pc, #20]	; (8005548 <prvCheckTasksWaitingTermination+0x54>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1e1      	bne.n	80054fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005538:	bf00      	nop
 800553a:	3708      	adds	r7, #8
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	20000b90 	.word	0x20000b90
 8005544:	20000bbc 	.word	0x20000bbc
 8005548:	20000ba4 	.word	0x20000ba4

0800554c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800555a:	2b00      	cmp	r3, #0
 800555c:	d108      	bne.n	8005570 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005562:	4618      	mov	r0, r3
 8005564:	f000 ff66 	bl	8006434 <vPortFree>
				vPortFree( pxTCB );
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 ff63 	bl	8006434 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800556e:	e017      	b.n	80055a0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005576:	2b01      	cmp	r3, #1
 8005578:	d103      	bne.n	8005582 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 ff5a 	bl	8006434 <vPortFree>
	}
 8005580:	e00e      	b.n	80055a0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005588:	2b02      	cmp	r3, #2
 800558a:	d009      	beq.n	80055a0 <prvDeleteTCB+0x54>
 800558c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005590:	f383 8811 	msr	BASEPRI, r3
 8005594:	f3bf 8f6f 	isb	sy
 8005598:	f3bf 8f4f 	dsb	sy
 800559c:	60fb      	str	r3, [r7, #12]
 800559e:	e7fe      	b.n	800559e <prvDeleteTCB+0x52>
	}
 80055a0:	bf00      	nop
 80055a2:	3710      	adds	r7, #16
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055ae:	4b0c      	ldr	r3, [pc, #48]	; (80055e0 <prvResetNextTaskUnblockTime+0x38>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d104      	bne.n	80055c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80055b8:	4b0a      	ldr	r3, [pc, #40]	; (80055e4 <prvResetNextTaskUnblockTime+0x3c>)
 80055ba:	f04f 32ff 	mov.w	r2, #4294967295
 80055be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80055c0:	e008      	b.n	80055d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055c2:	4b07      	ldr	r3, [pc, #28]	; (80055e0 <prvResetNextTaskUnblockTime+0x38>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	4a04      	ldr	r2, [pc, #16]	; (80055e4 <prvResetNextTaskUnblockTime+0x3c>)
 80055d2:	6013      	str	r3, [r2, #0]
}
 80055d4:	bf00      	nop
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr
 80055e0:	20000b74 	.word	0x20000b74
 80055e4:	20000bdc 	.word	0x20000bdc

080055e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80055ee:	4b0b      	ldr	r3, [pc, #44]	; (800561c <xTaskGetSchedulerState+0x34>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d102      	bne.n	80055fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80055f6:	2301      	movs	r3, #1
 80055f8:	607b      	str	r3, [r7, #4]
 80055fa:	e008      	b.n	800560e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055fc:	4b08      	ldr	r3, [pc, #32]	; (8005620 <xTaskGetSchedulerState+0x38>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d102      	bne.n	800560a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005604:	2302      	movs	r3, #2
 8005606:	607b      	str	r3, [r7, #4]
 8005608:	e001      	b.n	800560e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800560a:	2300      	movs	r3, #0
 800560c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800560e:	687b      	ldr	r3, [r7, #4]
	}
 8005610:	4618      	mov	r0, r3
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr
 800561c:	20000bc8 	.word	0x20000bc8
 8005620:	20000be4 	.word	0x20000be4

08005624 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005624:	b580      	push	{r7, lr}
 8005626:	b086      	sub	sp, #24
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005630:	2300      	movs	r3, #0
 8005632:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d054      	beq.n	80056e4 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800563a:	4b2d      	ldr	r3, [pc, #180]	; (80056f0 <xTaskPriorityDisinherit+0xcc>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	693a      	ldr	r2, [r7, #16]
 8005640:	429a      	cmp	r2, r3
 8005642:	d009      	beq.n	8005658 <xTaskPriorityDisinherit+0x34>
 8005644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005648:	f383 8811 	msr	BASEPRI, r3
 800564c:	f3bf 8f6f 	isb	sy
 8005650:	f3bf 8f4f 	dsb	sy
 8005654:	60fb      	str	r3, [r7, #12]
 8005656:	e7fe      	b.n	8005656 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800565c:	2b00      	cmp	r3, #0
 800565e:	d109      	bne.n	8005674 <xTaskPriorityDisinherit+0x50>
 8005660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005664:	f383 8811 	msr	BASEPRI, r3
 8005668:	f3bf 8f6f 	isb	sy
 800566c:	f3bf 8f4f 	dsb	sy
 8005670:	60bb      	str	r3, [r7, #8]
 8005672:	e7fe      	b.n	8005672 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005678:	1e5a      	subs	r2, r3, #1
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005686:	429a      	cmp	r2, r3
 8005688:	d02c      	beq.n	80056e4 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800568e:	2b00      	cmp	r3, #0
 8005690:	d128      	bne.n	80056e4 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	3304      	adds	r3, #4
 8005696:	4618      	mov	r0, r3
 8005698:	f7fe fca0 	bl	8003fdc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b4:	4b0f      	ldr	r3, [pc, #60]	; (80056f4 <xTaskPriorityDisinherit+0xd0>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d903      	bls.n	80056c4 <xTaskPriorityDisinherit+0xa0>
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c0:	4a0c      	ldr	r2, [pc, #48]	; (80056f4 <xTaskPriorityDisinherit+0xd0>)
 80056c2:	6013      	str	r3, [r2, #0]
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056c8:	4613      	mov	r3, r2
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	4413      	add	r3, r2
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	4a09      	ldr	r2, [pc, #36]	; (80056f8 <xTaskPriorityDisinherit+0xd4>)
 80056d2:	441a      	add	r2, r3
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	3304      	adds	r3, #4
 80056d8:	4619      	mov	r1, r3
 80056da:	4610      	mov	r0, r2
 80056dc:	f7fe fc21 	bl	8003f22 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80056e0:	2301      	movs	r3, #1
 80056e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80056e4:	697b      	ldr	r3, [r7, #20]
	}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3718      	adds	r7, #24
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	200006e8 	.word	0x200006e8
 80056f4:	20000bc4 	.word	0x20000bc4
 80056f8:	200006ec 	.word	0x200006ec

080056fc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005706:	4b21      	ldr	r3, [pc, #132]	; (800578c <prvAddCurrentTaskToDelayedList+0x90>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800570c:	4b20      	ldr	r3, [pc, #128]	; (8005790 <prvAddCurrentTaskToDelayedList+0x94>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	3304      	adds	r3, #4
 8005712:	4618      	mov	r0, r3
 8005714:	f7fe fc62 	bl	8003fdc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800571e:	d10a      	bne.n	8005736 <prvAddCurrentTaskToDelayedList+0x3a>
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d007      	beq.n	8005736 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005726:	4b1a      	ldr	r3, [pc, #104]	; (8005790 <prvAddCurrentTaskToDelayedList+0x94>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	3304      	adds	r3, #4
 800572c:	4619      	mov	r1, r3
 800572e:	4819      	ldr	r0, [pc, #100]	; (8005794 <prvAddCurrentTaskToDelayedList+0x98>)
 8005730:	f7fe fbf7 	bl	8003f22 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005734:	e026      	b.n	8005784 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4413      	add	r3, r2
 800573c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800573e:	4b14      	ldr	r3, [pc, #80]	; (8005790 <prvAddCurrentTaskToDelayedList+0x94>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68ba      	ldr	r2, [r7, #8]
 8005744:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005746:	68ba      	ldr	r2, [r7, #8]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	429a      	cmp	r2, r3
 800574c:	d209      	bcs.n	8005762 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800574e:	4b12      	ldr	r3, [pc, #72]	; (8005798 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	4b0f      	ldr	r3, [pc, #60]	; (8005790 <prvAddCurrentTaskToDelayedList+0x94>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	3304      	adds	r3, #4
 8005758:	4619      	mov	r1, r3
 800575a:	4610      	mov	r0, r2
 800575c:	f7fe fc05 	bl	8003f6a <vListInsert>
}
 8005760:	e010      	b.n	8005784 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005762:	4b0e      	ldr	r3, [pc, #56]	; (800579c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	4b0a      	ldr	r3, [pc, #40]	; (8005790 <prvAddCurrentTaskToDelayedList+0x94>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	3304      	adds	r3, #4
 800576c:	4619      	mov	r1, r3
 800576e:	4610      	mov	r0, r2
 8005770:	f7fe fbfb 	bl	8003f6a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005774:	4b0a      	ldr	r3, [pc, #40]	; (80057a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68ba      	ldr	r2, [r7, #8]
 800577a:	429a      	cmp	r2, r3
 800577c:	d202      	bcs.n	8005784 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800577e:	4a08      	ldr	r2, [pc, #32]	; (80057a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	6013      	str	r3, [r2, #0]
}
 8005784:	bf00      	nop
 8005786:	3710      	adds	r7, #16
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}
 800578c:	20000bc0 	.word	0x20000bc0
 8005790:	200006e8 	.word	0x200006e8
 8005794:	20000ba8 	.word	0x20000ba8
 8005798:	20000b78 	.word	0x20000b78
 800579c:	20000b74 	.word	0x20000b74
 80057a0:	20000bdc 	.word	0x20000bdc

080057a4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b08a      	sub	sp, #40	; 0x28
 80057a8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80057aa:	2300      	movs	r3, #0
 80057ac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80057ae:	f000 faff 	bl	8005db0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80057b2:	4b1c      	ldr	r3, [pc, #112]	; (8005824 <xTimerCreateTimerTask+0x80>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d021      	beq.n	80057fe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80057ba:	2300      	movs	r3, #0
 80057bc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80057be:	2300      	movs	r3, #0
 80057c0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80057c2:	1d3a      	adds	r2, r7, #4
 80057c4:	f107 0108 	add.w	r1, r7, #8
 80057c8:	f107 030c 	add.w	r3, r7, #12
 80057cc:	4618      	mov	r0, r3
 80057ce:	f7fe fb61 	bl	8003e94 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80057d2:	6879      	ldr	r1, [r7, #4]
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	9202      	str	r2, [sp, #8]
 80057da:	9301      	str	r3, [sp, #4]
 80057dc:	2302      	movs	r3, #2
 80057de:	9300      	str	r3, [sp, #0]
 80057e0:	2300      	movs	r3, #0
 80057e2:	460a      	mov	r2, r1
 80057e4:	4910      	ldr	r1, [pc, #64]	; (8005828 <xTimerCreateTimerTask+0x84>)
 80057e6:	4811      	ldr	r0, [pc, #68]	; (800582c <xTimerCreateTimerTask+0x88>)
 80057e8:	f7ff f8f6 	bl	80049d8 <xTaskCreateStatic>
 80057ec:	4602      	mov	r2, r0
 80057ee:	4b10      	ldr	r3, [pc, #64]	; (8005830 <xTimerCreateTimerTask+0x8c>)
 80057f0:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80057f2:	4b0f      	ldr	r3, [pc, #60]	; (8005830 <xTimerCreateTimerTask+0x8c>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d001      	beq.n	80057fe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80057fa:	2301      	movs	r3, #1
 80057fc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d109      	bne.n	8005818 <xTimerCreateTimerTask+0x74>
 8005804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005808:	f383 8811 	msr	BASEPRI, r3
 800580c:	f3bf 8f6f 	isb	sy
 8005810:	f3bf 8f4f 	dsb	sy
 8005814:	613b      	str	r3, [r7, #16]
 8005816:	e7fe      	b.n	8005816 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005818:	697b      	ldr	r3, [r7, #20]
}
 800581a:	4618      	mov	r0, r3
 800581c:	3718      	adds	r7, #24
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	20000c18 	.word	0x20000c18
 8005828:	08006700 	.word	0x08006700
 800582c:	08005965 	.word	0x08005965
 8005830:	20000c1c 	.word	0x20000c1c

08005834 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b08a      	sub	sp, #40	; 0x28
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
 8005840:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005842:	2300      	movs	r3, #0
 8005844:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d109      	bne.n	8005860 <xTimerGenericCommand+0x2c>
 800584c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005850:	f383 8811 	msr	BASEPRI, r3
 8005854:	f3bf 8f6f 	isb	sy
 8005858:	f3bf 8f4f 	dsb	sy
 800585c:	623b      	str	r3, [r7, #32]
 800585e:	e7fe      	b.n	800585e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005860:	4b19      	ldr	r3, [pc, #100]	; (80058c8 <xTimerGenericCommand+0x94>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d02a      	beq.n	80058be <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	2b05      	cmp	r3, #5
 8005878:	dc18      	bgt.n	80058ac <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800587a:	f7ff feb5 	bl	80055e8 <xTaskGetSchedulerState>
 800587e:	4603      	mov	r3, r0
 8005880:	2b02      	cmp	r3, #2
 8005882:	d109      	bne.n	8005898 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005884:	4b10      	ldr	r3, [pc, #64]	; (80058c8 <xTimerGenericCommand+0x94>)
 8005886:	6818      	ldr	r0, [r3, #0]
 8005888:	f107 0110 	add.w	r1, r7, #16
 800588c:	2300      	movs	r3, #0
 800588e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005890:	f7fe fccc 	bl	800422c <xQueueGenericSend>
 8005894:	6278      	str	r0, [r7, #36]	; 0x24
 8005896:	e012      	b.n	80058be <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005898:	4b0b      	ldr	r3, [pc, #44]	; (80058c8 <xTimerGenericCommand+0x94>)
 800589a:	6818      	ldr	r0, [r3, #0]
 800589c:	f107 0110 	add.w	r1, r7, #16
 80058a0:	2300      	movs	r3, #0
 80058a2:	2200      	movs	r2, #0
 80058a4:	f7fe fcc2 	bl	800422c <xQueueGenericSend>
 80058a8:	6278      	str	r0, [r7, #36]	; 0x24
 80058aa:	e008      	b.n	80058be <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80058ac:	4b06      	ldr	r3, [pc, #24]	; (80058c8 <xTimerGenericCommand+0x94>)
 80058ae:	6818      	ldr	r0, [r3, #0]
 80058b0:	f107 0110 	add.w	r1, r7, #16
 80058b4:	2300      	movs	r3, #0
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	f7fe fdb2 	bl	8004420 <xQueueGenericSendFromISR>
 80058bc:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80058be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3728      	adds	r7, #40	; 0x28
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	20000c18 	.word	0x20000c18

080058cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b088      	sub	sp, #32
 80058d0:	af02      	add	r7, sp, #8
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058d6:	4b22      	ldr	r3, [pc, #136]	; (8005960 <prvProcessExpiredTimer+0x94>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	3304      	adds	r3, #4
 80058e4:	4618      	mov	r0, r3
 80058e6:	f7fe fb79 	bl	8003fdc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058f0:	f003 0304 	and.w	r3, r3, #4
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d021      	beq.n	800593c <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	699a      	ldr	r2, [r3, #24]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	18d1      	adds	r1, r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	683a      	ldr	r2, [r7, #0]
 8005904:	6978      	ldr	r0, [r7, #20]
 8005906:	f000 f8d1 	bl	8005aac <prvInsertTimerInActiveList>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d01e      	beq.n	800594e <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005910:	2300      	movs	r3, #0
 8005912:	9300      	str	r3, [sp, #0]
 8005914:	2300      	movs	r3, #0
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	2100      	movs	r1, #0
 800591a:	6978      	ldr	r0, [r7, #20]
 800591c:	f7ff ff8a 	bl	8005834 <xTimerGenericCommand>
 8005920:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d112      	bne.n	800594e <prvProcessExpiredTimer+0x82>
 8005928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592c:	f383 8811 	msr	BASEPRI, r3
 8005930:	f3bf 8f6f 	isb	sy
 8005934:	f3bf 8f4f 	dsb	sy
 8005938:	60fb      	str	r3, [r7, #12]
 800593a:	e7fe      	b.n	800593a <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005942:	f023 0301 	bic.w	r3, r3, #1
 8005946:	b2da      	uxtb	r2, r3
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	6a1b      	ldr	r3, [r3, #32]
 8005952:	6978      	ldr	r0, [r7, #20]
 8005954:	4798      	blx	r3
}
 8005956:	bf00      	nop
 8005958:	3718      	adds	r7, #24
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	20000c10 	.word	0x20000c10

08005964 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800596c:	f107 0308 	add.w	r3, r7, #8
 8005970:	4618      	mov	r0, r3
 8005972:	f000 f857 	bl	8005a24 <prvGetNextExpireTime>
 8005976:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	4619      	mov	r1, r3
 800597c:	68f8      	ldr	r0, [r7, #12]
 800597e:	f000 f803 	bl	8005988 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005982:	f000 f8d5 	bl	8005b30 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005986:	e7f1      	b.n	800596c <prvTimerTask+0x8>

08005988 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005992:	f7ff fa57 	bl	8004e44 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005996:	f107 0308 	add.w	r3, r7, #8
 800599a:	4618      	mov	r0, r3
 800599c:	f000 f866 	bl	8005a6c <prvSampleTimeNow>
 80059a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d130      	bne.n	8005a0a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d10a      	bne.n	80059c4 <prvProcessTimerOrBlockTask+0x3c>
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d806      	bhi.n	80059c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80059b6:	f7ff fa53 	bl	8004e60 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80059ba:	68f9      	ldr	r1, [r7, #12]
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f7ff ff85 	bl	80058cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80059c2:	e024      	b.n	8005a0e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d008      	beq.n	80059dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80059ca:	4b13      	ldr	r3, [pc, #76]	; (8005a18 <prvProcessTimerOrBlockTask+0x90>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d101      	bne.n	80059d8 <prvProcessTimerOrBlockTask+0x50>
 80059d4:	2301      	movs	r3, #1
 80059d6:	e000      	b.n	80059da <prvProcessTimerOrBlockTask+0x52>
 80059d8:	2300      	movs	r3, #0
 80059da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80059dc:	4b0f      	ldr	r3, [pc, #60]	; (8005a1c <prvProcessTimerOrBlockTask+0x94>)
 80059de:	6818      	ldr	r0, [r3, #0]
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	683a      	ldr	r2, [r7, #0]
 80059e8:	4619      	mov	r1, r3
 80059ea:	f7fe ffc1 	bl	8004970 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80059ee:	f7ff fa37 	bl	8004e60 <xTaskResumeAll>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d10a      	bne.n	8005a0e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80059f8:	4b09      	ldr	r3, [pc, #36]	; (8005a20 <prvProcessTimerOrBlockTask+0x98>)
 80059fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059fe:	601a      	str	r2, [r3, #0]
 8005a00:	f3bf 8f4f 	dsb	sy
 8005a04:	f3bf 8f6f 	isb	sy
}
 8005a08:	e001      	b.n	8005a0e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005a0a:	f7ff fa29 	bl	8004e60 <xTaskResumeAll>
}
 8005a0e:	bf00      	nop
 8005a10:	3710      	adds	r7, #16
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	20000c14 	.word	0x20000c14
 8005a1c:	20000c18 	.word	0x20000c18
 8005a20:	e000ed04 	.word	0xe000ed04

08005a24 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005a2c:	4b0e      	ldr	r3, [pc, #56]	; (8005a68 <prvGetNextExpireTime+0x44>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <prvGetNextExpireTime+0x16>
 8005a36:	2201      	movs	r2, #1
 8005a38:	e000      	b.n	8005a3c <prvGetNextExpireTime+0x18>
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d105      	bne.n	8005a54 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a48:	4b07      	ldr	r3, [pc, #28]	; (8005a68 <prvGetNextExpireTime+0x44>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	60fb      	str	r3, [r7, #12]
 8005a52:	e001      	b.n	8005a58 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005a54:	2300      	movs	r3, #0
 8005a56:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005a58:	68fb      	ldr	r3, [r7, #12]
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3714      	adds	r7, #20
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr
 8005a66:	bf00      	nop
 8005a68:	20000c10 	.word	0x20000c10

08005a6c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005a74:	f7ff fa90 	bl	8004f98 <xTaskGetTickCount>
 8005a78:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005a7a:	4b0b      	ldr	r3, [pc, #44]	; (8005aa8 <prvSampleTimeNow+0x3c>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d205      	bcs.n	8005a90 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005a84:	f000 f930 	bl	8005ce8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	601a      	str	r2, [r3, #0]
 8005a8e:	e002      	b.n	8005a96 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005a96:	4a04      	ldr	r2, [pc, #16]	; (8005aa8 <prvSampleTimeNow+0x3c>)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3710      	adds	r7, #16
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	20000c20 	.word	0x20000c20

08005aac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b086      	sub	sp, #24
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	607a      	str	r2, [r7, #4]
 8005ab8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005aba:	2300      	movs	r3, #0
 8005abc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	68ba      	ldr	r2, [r7, #8]
 8005ac2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005aca:	68ba      	ldr	r2, [r7, #8]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d812      	bhi.n	8005af8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	1ad2      	subs	r2, r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d302      	bcc.n	8005ae6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	617b      	str	r3, [r7, #20]
 8005ae4:	e01b      	b.n	8005b1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005ae6:	4b10      	ldr	r3, [pc, #64]	; (8005b28 <prvInsertTimerInActiveList+0x7c>)
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	3304      	adds	r3, #4
 8005aee:	4619      	mov	r1, r3
 8005af0:	4610      	mov	r0, r2
 8005af2:	f7fe fa3a 	bl	8003f6a <vListInsert>
 8005af6:	e012      	b.n	8005b1e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d206      	bcs.n	8005b0e <prvInsertTimerInActiveList+0x62>
 8005b00:	68ba      	ldr	r2, [r7, #8]
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d302      	bcc.n	8005b0e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	617b      	str	r3, [r7, #20]
 8005b0c:	e007      	b.n	8005b1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005b0e:	4b07      	ldr	r3, [pc, #28]	; (8005b2c <prvInsertTimerInActiveList+0x80>)
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	3304      	adds	r3, #4
 8005b16:	4619      	mov	r1, r3
 8005b18:	4610      	mov	r0, r2
 8005b1a:	f7fe fa26 	bl	8003f6a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005b1e:	697b      	ldr	r3, [r7, #20]
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3718      	adds	r7, #24
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	20000c14 	.word	0x20000c14
 8005b2c:	20000c10 	.word	0x20000c10

08005b30 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b08e      	sub	sp, #56	; 0x38
 8005b34:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005b36:	e0c6      	b.n	8005cc6 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	da17      	bge.n	8005b6e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005b3e:	1d3b      	adds	r3, r7, #4
 8005b40:	3304      	adds	r3, #4
 8005b42:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d109      	bne.n	8005b5e <prvProcessReceivedCommands+0x2e>
 8005b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b4e:	f383 8811 	msr	BASEPRI, r3
 8005b52:	f3bf 8f6f 	isb	sy
 8005b56:	f3bf 8f4f 	dsb	sy
 8005b5a:	61fb      	str	r3, [r7, #28]
 8005b5c:	e7fe      	b.n	8005b5c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b64:	6850      	ldr	r0, [r2, #4]
 8005b66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b68:	6892      	ldr	r2, [r2, #8]
 8005b6a:	4611      	mov	r1, r2
 8005b6c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f2c0 80a7 	blt.w	8005cc4 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d004      	beq.n	8005b8c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b84:	3304      	adds	r3, #4
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7fe fa28 	bl	8003fdc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005b8c:	463b      	mov	r3, r7
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f7ff ff6c 	bl	8005a6c <prvSampleTimeNow>
 8005b94:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2b09      	cmp	r3, #9
 8005b9a:	f200 8094 	bhi.w	8005cc6 <prvProcessReceivedCommands+0x196>
 8005b9e:	a201      	add	r2, pc, #4	; (adr r2, 8005ba4 <prvProcessReceivedCommands+0x74>)
 8005ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba4:	08005bcd 	.word	0x08005bcd
 8005ba8:	08005bcd 	.word	0x08005bcd
 8005bac:	08005bcd 	.word	0x08005bcd
 8005bb0:	08005c3f 	.word	0x08005c3f
 8005bb4:	08005c53 	.word	0x08005c53
 8005bb8:	08005c9b 	.word	0x08005c9b
 8005bbc:	08005bcd 	.word	0x08005bcd
 8005bc0:	08005bcd 	.word	0x08005bcd
 8005bc4:	08005c3f 	.word	0x08005c3f
 8005bc8:	08005c53 	.word	0x08005c53
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bd2:	f043 0301 	orr.w	r3, r3, #1
 8005bd6:	b2da      	uxtb	r2, r3
 8005bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005bde:	68ba      	ldr	r2, [r7, #8]
 8005be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be2:	699b      	ldr	r3, [r3, #24]
 8005be4:	18d1      	adds	r1, r2, r3
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bec:	f7ff ff5e 	bl	8005aac <prvInsertTimerInActiveList>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d067      	beq.n	8005cc6 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf8:	6a1b      	ldr	r3, [r3, #32]
 8005bfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bfc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c04:	f003 0304 	and.w	r3, r3, #4
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d05c      	beq.n	8005cc6 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005c0c:	68ba      	ldr	r2, [r7, #8]
 8005c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c10:	699b      	ldr	r3, [r3, #24]
 8005c12:	441a      	add	r2, r3
 8005c14:	2300      	movs	r3, #0
 8005c16:	9300      	str	r3, [sp, #0]
 8005c18:	2300      	movs	r3, #0
 8005c1a:	2100      	movs	r1, #0
 8005c1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c1e:	f7ff fe09 	bl	8005834 <xTimerGenericCommand>
 8005c22:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005c24:	6a3b      	ldr	r3, [r7, #32]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d14d      	bne.n	8005cc6 <prvProcessReceivedCommands+0x196>
 8005c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2e:	f383 8811 	msr	BASEPRI, r3
 8005c32:	f3bf 8f6f 	isb	sy
 8005c36:	f3bf 8f4f 	dsb	sy
 8005c3a:	61bb      	str	r3, [r7, #24]
 8005c3c:	e7fe      	b.n	8005c3c <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c44:	f023 0301 	bic.w	r3, r3, #1
 8005c48:	b2da      	uxtb	r2, r3
 8005c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005c50:	e039      	b.n	8005cc6 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c58:	f043 0301 	orr.w	r3, r3, #1
 8005c5c:	b2da      	uxtb	r2, r3
 8005c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005c64:	68ba      	ldr	r2, [r7, #8]
 8005c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c68:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d109      	bne.n	8005c86 <prvProcessReceivedCommands+0x156>
 8005c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c76:	f383 8811 	msr	BASEPRI, r3
 8005c7a:	f3bf 8f6f 	isb	sy
 8005c7e:	f3bf 8f4f 	dsb	sy
 8005c82:	617b      	str	r3, [r7, #20]
 8005c84:	e7fe      	b.n	8005c84 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c88:	699a      	ldr	r2, [r3, #24]
 8005c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8c:	18d1      	adds	r1, r2, r3
 8005c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c94:	f7ff ff0a 	bl	8005aac <prvInsertTimerInActiveList>
					break;
 8005c98:	e015      	b.n	8005cc6 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ca0:	f003 0302 	and.w	r3, r3, #2
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d103      	bne.n	8005cb0 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8005ca8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005caa:	f000 fbc3 	bl	8006434 <vPortFree>
 8005cae:	e00a      	b.n	8005cc6 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cb6:	f023 0301 	bic.w	r3, r3, #1
 8005cba:	b2da      	uxtb	r2, r3
 8005cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005cc2:	e000      	b.n	8005cc6 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005cc4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005cc6:	4b07      	ldr	r3, [pc, #28]	; (8005ce4 <prvProcessReceivedCommands+0x1b4>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	1d39      	adds	r1, r7, #4
 8005ccc:	2200      	movs	r2, #0
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7fe fc3a 	bl	8004548 <xQueueReceive>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	f47f af2e 	bne.w	8005b38 <prvProcessReceivedCommands+0x8>
	}
}
 8005cdc:	bf00      	nop
 8005cde:	3730      	adds	r7, #48	; 0x30
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	20000c18 	.word	0x20000c18

08005ce8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b088      	sub	sp, #32
 8005cec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005cee:	e047      	b.n	8005d80 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005cf0:	4b2d      	ldr	r3, [pc, #180]	; (8005da8 <prvSwitchTimerLists+0xc0>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cfa:	4b2b      	ldr	r3, [pc, #172]	; (8005da8 <prvSwitchTimerLists+0xc0>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	3304      	adds	r3, #4
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f7fe f967 	bl	8003fdc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6a1b      	ldr	r3, [r3, #32]
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d1c:	f003 0304 	and.w	r3, r3, #4
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d02d      	beq.n	8005d80 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	699b      	ldr	r3, [r3, #24]
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005d2e:	68ba      	ldr	r2, [r7, #8]
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d90e      	bls.n	8005d54 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	68ba      	ldr	r2, [r7, #8]
 8005d3a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005d42:	4b19      	ldr	r3, [pc, #100]	; (8005da8 <prvSwitchTimerLists+0xc0>)
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	3304      	adds	r3, #4
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	4610      	mov	r0, r2
 8005d4e:	f7fe f90c 	bl	8003f6a <vListInsert>
 8005d52:	e015      	b.n	8005d80 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005d54:	2300      	movs	r3, #0
 8005d56:	9300      	str	r3, [sp, #0]
 8005d58:	2300      	movs	r3, #0
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	2100      	movs	r1, #0
 8005d5e:	68f8      	ldr	r0, [r7, #12]
 8005d60:	f7ff fd68 	bl	8005834 <xTimerGenericCommand>
 8005d64:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d109      	bne.n	8005d80 <prvSwitchTimerLists+0x98>
 8005d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d70:	f383 8811 	msr	BASEPRI, r3
 8005d74:	f3bf 8f6f 	isb	sy
 8005d78:	f3bf 8f4f 	dsb	sy
 8005d7c:	603b      	str	r3, [r7, #0]
 8005d7e:	e7fe      	b.n	8005d7e <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005d80:	4b09      	ldr	r3, [pc, #36]	; (8005da8 <prvSwitchTimerLists+0xc0>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1b2      	bne.n	8005cf0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005d8a:	4b07      	ldr	r3, [pc, #28]	; (8005da8 <prvSwitchTimerLists+0xc0>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005d90:	4b06      	ldr	r3, [pc, #24]	; (8005dac <prvSwitchTimerLists+0xc4>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a04      	ldr	r2, [pc, #16]	; (8005da8 <prvSwitchTimerLists+0xc0>)
 8005d96:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005d98:	4a04      	ldr	r2, [pc, #16]	; (8005dac <prvSwitchTimerLists+0xc4>)
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	6013      	str	r3, [r2, #0]
}
 8005d9e:	bf00      	nop
 8005da0:	3718      	adds	r7, #24
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	20000c10 	.word	0x20000c10
 8005dac:	20000c14 	.word	0x20000c14

08005db0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005db6:	f000 f961 	bl	800607c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005dba:	4b15      	ldr	r3, [pc, #84]	; (8005e10 <prvCheckForValidListAndQueue+0x60>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d120      	bne.n	8005e04 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005dc2:	4814      	ldr	r0, [pc, #80]	; (8005e14 <prvCheckForValidListAndQueue+0x64>)
 8005dc4:	f7fe f880 	bl	8003ec8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005dc8:	4813      	ldr	r0, [pc, #76]	; (8005e18 <prvCheckForValidListAndQueue+0x68>)
 8005dca:	f7fe f87d 	bl	8003ec8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005dce:	4b13      	ldr	r3, [pc, #76]	; (8005e1c <prvCheckForValidListAndQueue+0x6c>)
 8005dd0:	4a10      	ldr	r2, [pc, #64]	; (8005e14 <prvCheckForValidListAndQueue+0x64>)
 8005dd2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005dd4:	4b12      	ldr	r3, [pc, #72]	; (8005e20 <prvCheckForValidListAndQueue+0x70>)
 8005dd6:	4a10      	ldr	r2, [pc, #64]	; (8005e18 <prvCheckForValidListAndQueue+0x68>)
 8005dd8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005dda:	2300      	movs	r3, #0
 8005ddc:	9300      	str	r3, [sp, #0]
 8005dde:	4b11      	ldr	r3, [pc, #68]	; (8005e24 <prvCheckForValidListAndQueue+0x74>)
 8005de0:	4a11      	ldr	r2, [pc, #68]	; (8005e28 <prvCheckForValidListAndQueue+0x78>)
 8005de2:	2110      	movs	r1, #16
 8005de4:	200a      	movs	r0, #10
 8005de6:	f7fe f98b 	bl	8004100 <xQueueGenericCreateStatic>
 8005dea:	4602      	mov	r2, r0
 8005dec:	4b08      	ldr	r3, [pc, #32]	; (8005e10 <prvCheckForValidListAndQueue+0x60>)
 8005dee:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005df0:	4b07      	ldr	r3, [pc, #28]	; (8005e10 <prvCheckForValidListAndQueue+0x60>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d005      	beq.n	8005e04 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005df8:	4b05      	ldr	r3, [pc, #20]	; (8005e10 <prvCheckForValidListAndQueue+0x60>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	490b      	ldr	r1, [pc, #44]	; (8005e2c <prvCheckForValidListAndQueue+0x7c>)
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f7fe fd8e 	bl	8004920 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e04:	f000 f968 	bl	80060d8 <vPortExitCritical>
}
 8005e08:	bf00      	nop
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	20000c18 	.word	0x20000c18
 8005e14:	20000be8 	.word	0x20000be8
 8005e18:	20000bfc 	.word	0x20000bfc
 8005e1c:	20000c10 	.word	0x20000c10
 8005e20:	20000c14 	.word	0x20000c14
 8005e24:	20000cc4 	.word	0x20000cc4
 8005e28:	20000c24 	.word	0x20000c24
 8005e2c:	08006708 	.word	0x08006708

08005e30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005e30:	b480      	push	{r7}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	3b04      	subs	r3, #4
 8005e40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005e48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	3b04      	subs	r3, #4
 8005e4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	f023 0201 	bic.w	r2, r3, #1
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	3b04      	subs	r3, #4
 8005e5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005e60:	4a0c      	ldr	r2, [pc, #48]	; (8005e94 <pxPortInitialiseStack+0x64>)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	3b14      	subs	r3, #20
 8005e6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	3b04      	subs	r3, #4
 8005e76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f06f 0202 	mvn.w	r2, #2
 8005e7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	3b20      	subs	r3, #32
 8005e84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005e86:	68fb      	ldr	r3, [r7, #12]
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3714      	adds	r7, #20
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr
 8005e94:	08005e99 	.word	0x08005e99

08005e98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005ea2:	4b11      	ldr	r3, [pc, #68]	; (8005ee8 <prvTaskExitError+0x50>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eaa:	d009      	beq.n	8005ec0 <prvTaskExitError+0x28>
 8005eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb0:	f383 8811 	msr	BASEPRI, r3
 8005eb4:	f3bf 8f6f 	isb	sy
 8005eb8:	f3bf 8f4f 	dsb	sy
 8005ebc:	60fb      	str	r3, [r7, #12]
 8005ebe:	e7fe      	b.n	8005ebe <prvTaskExitError+0x26>
 8005ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec4:	f383 8811 	msr	BASEPRI, r3
 8005ec8:	f3bf 8f6f 	isb	sy
 8005ecc:	f3bf 8f4f 	dsb	sy
 8005ed0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005ed2:	bf00      	nop
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d0fc      	beq.n	8005ed4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005eda:	bf00      	nop
 8005edc:	3714      	adds	r7, #20
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr
 8005ee6:	bf00      	nop
 8005ee8:	2000000c 	.word	0x2000000c
 8005eec:	00000000 	.word	0x00000000

08005ef0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005ef0:	4b07      	ldr	r3, [pc, #28]	; (8005f10 <pxCurrentTCBConst2>)
 8005ef2:	6819      	ldr	r1, [r3, #0]
 8005ef4:	6808      	ldr	r0, [r1, #0]
 8005ef6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005efa:	f380 8809 	msr	PSP, r0
 8005efe:	f3bf 8f6f 	isb	sy
 8005f02:	f04f 0000 	mov.w	r0, #0
 8005f06:	f380 8811 	msr	BASEPRI, r0
 8005f0a:	4770      	bx	lr
 8005f0c:	f3af 8000 	nop.w

08005f10 <pxCurrentTCBConst2>:
 8005f10:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005f14:	bf00      	nop
 8005f16:	bf00      	nop

08005f18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005f18:	4808      	ldr	r0, [pc, #32]	; (8005f3c <prvPortStartFirstTask+0x24>)
 8005f1a:	6800      	ldr	r0, [r0, #0]
 8005f1c:	6800      	ldr	r0, [r0, #0]
 8005f1e:	f380 8808 	msr	MSP, r0
 8005f22:	f04f 0000 	mov.w	r0, #0
 8005f26:	f380 8814 	msr	CONTROL, r0
 8005f2a:	b662      	cpsie	i
 8005f2c:	b661      	cpsie	f
 8005f2e:	f3bf 8f4f 	dsb	sy
 8005f32:	f3bf 8f6f 	isb	sy
 8005f36:	df00      	svc	0
 8005f38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005f3a:	bf00      	nop
 8005f3c:	e000ed08 	.word	0xe000ed08

08005f40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b086      	sub	sp, #24
 8005f44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005f46:	4b44      	ldr	r3, [pc, #272]	; (8006058 <xPortStartScheduler+0x118>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a44      	ldr	r2, [pc, #272]	; (800605c <xPortStartScheduler+0x11c>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d109      	bne.n	8005f64 <xPortStartScheduler+0x24>
 8005f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f54:	f383 8811 	msr	BASEPRI, r3
 8005f58:	f3bf 8f6f 	isb	sy
 8005f5c:	f3bf 8f4f 	dsb	sy
 8005f60:	613b      	str	r3, [r7, #16]
 8005f62:	e7fe      	b.n	8005f62 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005f64:	4b3c      	ldr	r3, [pc, #240]	; (8006058 <xPortStartScheduler+0x118>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a3d      	ldr	r2, [pc, #244]	; (8006060 <xPortStartScheduler+0x120>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d109      	bne.n	8005f82 <xPortStartScheduler+0x42>
 8005f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f72:	f383 8811 	msr	BASEPRI, r3
 8005f76:	f3bf 8f6f 	isb	sy
 8005f7a:	f3bf 8f4f 	dsb	sy
 8005f7e:	60fb      	str	r3, [r7, #12]
 8005f80:	e7fe      	b.n	8005f80 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005f82:	4b38      	ldr	r3, [pc, #224]	; (8006064 <xPortStartScheduler+0x124>)
 8005f84:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	22ff      	movs	r2, #255	; 0xff
 8005f92:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005f9c:	78fb      	ldrb	r3, [r7, #3]
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005fa4:	b2da      	uxtb	r2, r3
 8005fa6:	4b30      	ldr	r3, [pc, #192]	; (8006068 <xPortStartScheduler+0x128>)
 8005fa8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005faa:	4b30      	ldr	r3, [pc, #192]	; (800606c <xPortStartScheduler+0x12c>)
 8005fac:	2207      	movs	r2, #7
 8005fae:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005fb0:	e009      	b.n	8005fc6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005fb2:	4b2e      	ldr	r3, [pc, #184]	; (800606c <xPortStartScheduler+0x12c>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	3b01      	subs	r3, #1
 8005fb8:	4a2c      	ldr	r2, [pc, #176]	; (800606c <xPortStartScheduler+0x12c>)
 8005fba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005fbc:	78fb      	ldrb	r3, [r7, #3]
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	005b      	lsls	r3, r3, #1
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005fc6:	78fb      	ldrb	r3, [r7, #3]
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fce:	2b80      	cmp	r3, #128	; 0x80
 8005fd0:	d0ef      	beq.n	8005fb2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005fd2:	4b26      	ldr	r3, [pc, #152]	; (800606c <xPortStartScheduler+0x12c>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f1c3 0307 	rsb	r3, r3, #7
 8005fda:	2b04      	cmp	r3, #4
 8005fdc:	d009      	beq.n	8005ff2 <xPortStartScheduler+0xb2>
 8005fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe2:	f383 8811 	msr	BASEPRI, r3
 8005fe6:	f3bf 8f6f 	isb	sy
 8005fea:	f3bf 8f4f 	dsb	sy
 8005fee:	60bb      	str	r3, [r7, #8]
 8005ff0:	e7fe      	b.n	8005ff0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005ff2:	4b1e      	ldr	r3, [pc, #120]	; (800606c <xPortStartScheduler+0x12c>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	021b      	lsls	r3, r3, #8
 8005ff8:	4a1c      	ldr	r2, [pc, #112]	; (800606c <xPortStartScheduler+0x12c>)
 8005ffa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005ffc:	4b1b      	ldr	r3, [pc, #108]	; (800606c <xPortStartScheduler+0x12c>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006004:	4a19      	ldr	r2, [pc, #100]	; (800606c <xPortStartScheduler+0x12c>)
 8006006:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	b2da      	uxtb	r2, r3
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006010:	4b17      	ldr	r3, [pc, #92]	; (8006070 <xPortStartScheduler+0x130>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a16      	ldr	r2, [pc, #88]	; (8006070 <xPortStartScheduler+0x130>)
 8006016:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800601a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800601c:	4b14      	ldr	r3, [pc, #80]	; (8006070 <xPortStartScheduler+0x130>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a13      	ldr	r2, [pc, #76]	; (8006070 <xPortStartScheduler+0x130>)
 8006022:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006026:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006028:	f000 f8d6 	bl	80061d8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800602c:	4b11      	ldr	r3, [pc, #68]	; (8006074 <xPortStartScheduler+0x134>)
 800602e:	2200      	movs	r2, #0
 8006030:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006032:	f000 f8f5 	bl	8006220 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006036:	4b10      	ldr	r3, [pc, #64]	; (8006078 <xPortStartScheduler+0x138>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a0f      	ldr	r2, [pc, #60]	; (8006078 <xPortStartScheduler+0x138>)
 800603c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006040:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006042:	f7ff ff69 	bl	8005f18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006046:	f7ff f86f 	bl	8005128 <vTaskSwitchContext>
	prvTaskExitError();
 800604a:	f7ff ff25 	bl	8005e98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3718      	adds	r7, #24
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}
 8006058:	e000ed00 	.word	0xe000ed00
 800605c:	410fc271 	.word	0x410fc271
 8006060:	410fc270 	.word	0x410fc270
 8006064:	e000e400 	.word	0xe000e400
 8006068:	20000d14 	.word	0x20000d14
 800606c:	20000d18 	.word	0x20000d18
 8006070:	e000ed20 	.word	0xe000ed20
 8006074:	2000000c 	.word	0x2000000c
 8006078:	e000ef34 	.word	0xe000ef34

0800607c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006086:	f383 8811 	msr	BASEPRI, r3
 800608a:	f3bf 8f6f 	isb	sy
 800608e:	f3bf 8f4f 	dsb	sy
 8006092:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006094:	4b0e      	ldr	r3, [pc, #56]	; (80060d0 <vPortEnterCritical+0x54>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	3301      	adds	r3, #1
 800609a:	4a0d      	ldr	r2, [pc, #52]	; (80060d0 <vPortEnterCritical+0x54>)
 800609c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800609e:	4b0c      	ldr	r3, [pc, #48]	; (80060d0 <vPortEnterCritical+0x54>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d10e      	bne.n	80060c4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80060a6:	4b0b      	ldr	r3, [pc, #44]	; (80060d4 <vPortEnterCritical+0x58>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d009      	beq.n	80060c4 <vPortEnterCritical+0x48>
 80060b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b4:	f383 8811 	msr	BASEPRI, r3
 80060b8:	f3bf 8f6f 	isb	sy
 80060bc:	f3bf 8f4f 	dsb	sy
 80060c0:	603b      	str	r3, [r7, #0]
 80060c2:	e7fe      	b.n	80060c2 <vPortEnterCritical+0x46>
	}
}
 80060c4:	bf00      	nop
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr
 80060d0:	2000000c 	.word	0x2000000c
 80060d4:	e000ed04 	.word	0xe000ed04

080060d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80060de:	4b11      	ldr	r3, [pc, #68]	; (8006124 <vPortExitCritical+0x4c>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d109      	bne.n	80060fa <vPortExitCritical+0x22>
 80060e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ea:	f383 8811 	msr	BASEPRI, r3
 80060ee:	f3bf 8f6f 	isb	sy
 80060f2:	f3bf 8f4f 	dsb	sy
 80060f6:	607b      	str	r3, [r7, #4]
 80060f8:	e7fe      	b.n	80060f8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80060fa:	4b0a      	ldr	r3, [pc, #40]	; (8006124 <vPortExitCritical+0x4c>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	3b01      	subs	r3, #1
 8006100:	4a08      	ldr	r2, [pc, #32]	; (8006124 <vPortExitCritical+0x4c>)
 8006102:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006104:	4b07      	ldr	r3, [pc, #28]	; (8006124 <vPortExitCritical+0x4c>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d104      	bne.n	8006116 <vPortExitCritical+0x3e>
 800610c:	2300      	movs	r3, #0
 800610e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006116:	bf00      	nop
 8006118:	370c      	adds	r7, #12
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	2000000c 	.word	0x2000000c
	...

08006130 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006130:	f3ef 8009 	mrs	r0, PSP
 8006134:	f3bf 8f6f 	isb	sy
 8006138:	4b15      	ldr	r3, [pc, #84]	; (8006190 <pxCurrentTCBConst>)
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	f01e 0f10 	tst.w	lr, #16
 8006140:	bf08      	it	eq
 8006142:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006146:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800614a:	6010      	str	r0, [r2, #0]
 800614c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006150:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006154:	f380 8811 	msr	BASEPRI, r0
 8006158:	f3bf 8f4f 	dsb	sy
 800615c:	f3bf 8f6f 	isb	sy
 8006160:	f7fe ffe2 	bl	8005128 <vTaskSwitchContext>
 8006164:	f04f 0000 	mov.w	r0, #0
 8006168:	f380 8811 	msr	BASEPRI, r0
 800616c:	bc09      	pop	{r0, r3}
 800616e:	6819      	ldr	r1, [r3, #0]
 8006170:	6808      	ldr	r0, [r1, #0]
 8006172:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006176:	f01e 0f10 	tst.w	lr, #16
 800617a:	bf08      	it	eq
 800617c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006180:	f380 8809 	msr	PSP, r0
 8006184:	f3bf 8f6f 	isb	sy
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop
 800618c:	f3af 8000 	nop.w

08006190 <pxCurrentTCBConst>:
 8006190:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006194:	bf00      	nop
 8006196:	bf00      	nop

08006198 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
	__asm volatile
 800619e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a2:	f383 8811 	msr	BASEPRI, r3
 80061a6:	f3bf 8f6f 	isb	sy
 80061aa:	f3bf 8f4f 	dsb	sy
 80061ae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80061b0:	f7fe ff02 	bl	8004fb8 <xTaskIncrementTick>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d003      	beq.n	80061c2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80061ba:	4b06      	ldr	r3, [pc, #24]	; (80061d4 <SysTick_Handler+0x3c>)
 80061bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061c0:	601a      	str	r2, [r3, #0]
 80061c2:	2300      	movs	r3, #0
 80061c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80061cc:	bf00      	nop
 80061ce:	3708      	adds	r7, #8
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	e000ed04 	.word	0xe000ed04

080061d8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80061d8:	b480      	push	{r7}
 80061da:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80061dc:	4b0b      	ldr	r3, [pc, #44]	; (800620c <vPortSetupTimerInterrupt+0x34>)
 80061de:	2200      	movs	r2, #0
 80061e0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80061e2:	4b0b      	ldr	r3, [pc, #44]	; (8006210 <vPortSetupTimerInterrupt+0x38>)
 80061e4:	2200      	movs	r2, #0
 80061e6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80061e8:	4b0a      	ldr	r3, [pc, #40]	; (8006214 <vPortSetupTimerInterrupt+0x3c>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a0a      	ldr	r2, [pc, #40]	; (8006218 <vPortSetupTimerInterrupt+0x40>)
 80061ee:	fba2 2303 	umull	r2, r3, r2, r3
 80061f2:	099b      	lsrs	r3, r3, #6
 80061f4:	4a09      	ldr	r2, [pc, #36]	; (800621c <vPortSetupTimerInterrupt+0x44>)
 80061f6:	3b01      	subs	r3, #1
 80061f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80061fa:	4b04      	ldr	r3, [pc, #16]	; (800620c <vPortSetupTimerInterrupt+0x34>)
 80061fc:	2207      	movs	r2, #7
 80061fe:	601a      	str	r2, [r3, #0]
}
 8006200:	bf00      	nop
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop
 800620c:	e000e010 	.word	0xe000e010
 8006210:	e000e018 	.word	0xe000e018
 8006214:	20000000 	.word	0x20000000
 8006218:	10624dd3 	.word	0x10624dd3
 800621c:	e000e014 	.word	0xe000e014

08006220 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006220:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006230 <vPortEnableVFP+0x10>
 8006224:	6801      	ldr	r1, [r0, #0]
 8006226:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800622a:	6001      	str	r1, [r0, #0]
 800622c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800622e:	bf00      	nop
 8006230:	e000ed88 	.word	0xe000ed88

08006234 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006234:	b480      	push	{r7}
 8006236:	b085      	sub	sp, #20
 8006238:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800623a:	f3ef 8305 	mrs	r3, IPSR
 800623e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2b0f      	cmp	r3, #15
 8006244:	d913      	bls.n	800626e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006246:	4a16      	ldr	r2, [pc, #88]	; (80062a0 <vPortValidateInterruptPriority+0x6c>)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	4413      	add	r3, r2
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006250:	4b14      	ldr	r3, [pc, #80]	; (80062a4 <vPortValidateInterruptPriority+0x70>)
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	7afa      	ldrb	r2, [r7, #11]
 8006256:	429a      	cmp	r2, r3
 8006258:	d209      	bcs.n	800626e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800625a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800625e:	f383 8811 	msr	BASEPRI, r3
 8006262:	f3bf 8f6f 	isb	sy
 8006266:	f3bf 8f4f 	dsb	sy
 800626a:	607b      	str	r3, [r7, #4]
 800626c:	e7fe      	b.n	800626c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800626e:	4b0e      	ldr	r3, [pc, #56]	; (80062a8 <vPortValidateInterruptPriority+0x74>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006276:	4b0d      	ldr	r3, [pc, #52]	; (80062ac <vPortValidateInterruptPriority+0x78>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	429a      	cmp	r2, r3
 800627c:	d909      	bls.n	8006292 <vPortValidateInterruptPriority+0x5e>
 800627e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006282:	f383 8811 	msr	BASEPRI, r3
 8006286:	f3bf 8f6f 	isb	sy
 800628a:	f3bf 8f4f 	dsb	sy
 800628e:	603b      	str	r3, [r7, #0]
 8006290:	e7fe      	b.n	8006290 <vPortValidateInterruptPriority+0x5c>
	}
 8006292:	bf00      	nop
 8006294:	3714      	adds	r7, #20
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	e000e3f0 	.word	0xe000e3f0
 80062a4:	20000d14 	.word	0x20000d14
 80062a8:	e000ed0c 	.word	0xe000ed0c
 80062ac:	20000d18 	.word	0x20000d18

080062b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b08a      	sub	sp, #40	; 0x28
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80062b8:	2300      	movs	r3, #0
 80062ba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80062bc:	f7fe fdc2 	bl	8004e44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80062c0:	4b57      	ldr	r3, [pc, #348]	; (8006420 <pvPortMalloc+0x170>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d101      	bne.n	80062cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80062c8:	f000 f90c 	bl	80064e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80062cc:	4b55      	ldr	r3, [pc, #340]	; (8006424 <pvPortMalloc+0x174>)
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4013      	ands	r3, r2
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f040 808c 	bne.w	80063f2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d01c      	beq.n	800631a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80062e0:	2208      	movs	r2, #8
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4413      	add	r3, r2
 80062e6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f003 0307 	and.w	r3, r3, #7
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d013      	beq.n	800631a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f023 0307 	bic.w	r3, r3, #7
 80062f8:	3308      	adds	r3, #8
 80062fa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f003 0307 	and.w	r3, r3, #7
 8006302:	2b00      	cmp	r3, #0
 8006304:	d009      	beq.n	800631a <pvPortMalloc+0x6a>
 8006306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800630a:	f383 8811 	msr	BASEPRI, r3
 800630e:	f3bf 8f6f 	isb	sy
 8006312:	f3bf 8f4f 	dsb	sy
 8006316:	617b      	str	r3, [r7, #20]
 8006318:	e7fe      	b.n	8006318 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d068      	beq.n	80063f2 <pvPortMalloc+0x142>
 8006320:	4b41      	ldr	r3, [pc, #260]	; (8006428 <pvPortMalloc+0x178>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	429a      	cmp	r2, r3
 8006328:	d863      	bhi.n	80063f2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800632a:	4b40      	ldr	r3, [pc, #256]	; (800642c <pvPortMalloc+0x17c>)
 800632c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800632e:	4b3f      	ldr	r3, [pc, #252]	; (800642c <pvPortMalloc+0x17c>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006334:	e004      	b.n	8006340 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006338:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800633a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	429a      	cmp	r2, r3
 8006348:	d903      	bls.n	8006352 <pvPortMalloc+0xa2>
 800634a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d1f1      	bne.n	8006336 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006352:	4b33      	ldr	r3, [pc, #204]	; (8006420 <pvPortMalloc+0x170>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006358:	429a      	cmp	r2, r3
 800635a:	d04a      	beq.n	80063f2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800635c:	6a3b      	ldr	r3, [r7, #32]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2208      	movs	r2, #8
 8006362:	4413      	add	r3, r2
 8006364:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	6a3b      	ldr	r3, [r7, #32]
 800636c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800636e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006370:	685a      	ldr	r2, [r3, #4]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	1ad2      	subs	r2, r2, r3
 8006376:	2308      	movs	r3, #8
 8006378:	005b      	lsls	r3, r3, #1
 800637a:	429a      	cmp	r2, r3
 800637c:	d91e      	bls.n	80063bc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800637e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4413      	add	r3, r2
 8006384:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	f003 0307 	and.w	r3, r3, #7
 800638c:	2b00      	cmp	r3, #0
 800638e:	d009      	beq.n	80063a4 <pvPortMalloc+0xf4>
 8006390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006394:	f383 8811 	msr	BASEPRI, r3
 8006398:	f3bf 8f6f 	isb	sy
 800639c:	f3bf 8f4f 	dsb	sy
 80063a0:	613b      	str	r3, [r7, #16]
 80063a2:	e7fe      	b.n	80063a2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80063a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a6:	685a      	ldr	r2, [r3, #4]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	1ad2      	subs	r2, r2, r3
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80063b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80063b6:	69b8      	ldr	r0, [r7, #24]
 80063b8:	f000 f8f6 	bl	80065a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80063bc:	4b1a      	ldr	r3, [pc, #104]	; (8006428 <pvPortMalloc+0x178>)
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	4a18      	ldr	r2, [pc, #96]	; (8006428 <pvPortMalloc+0x178>)
 80063c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80063ca:	4b17      	ldr	r3, [pc, #92]	; (8006428 <pvPortMalloc+0x178>)
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	4b18      	ldr	r3, [pc, #96]	; (8006430 <pvPortMalloc+0x180>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d203      	bcs.n	80063de <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80063d6:	4b14      	ldr	r3, [pc, #80]	; (8006428 <pvPortMalloc+0x178>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a15      	ldr	r2, [pc, #84]	; (8006430 <pvPortMalloc+0x180>)
 80063dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80063de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e0:	685a      	ldr	r2, [r3, #4]
 80063e2:	4b10      	ldr	r3, [pc, #64]	; (8006424 <pvPortMalloc+0x174>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	431a      	orrs	r2, r3
 80063e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80063ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ee:	2200      	movs	r2, #0
 80063f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80063f2:	f7fe fd35 	bl	8004e60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	f003 0307 	and.w	r3, r3, #7
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d009      	beq.n	8006414 <pvPortMalloc+0x164>
 8006400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006404:	f383 8811 	msr	BASEPRI, r3
 8006408:	f3bf 8f6f 	isb	sy
 800640c:	f3bf 8f4f 	dsb	sy
 8006410:	60fb      	str	r3, [r7, #12]
 8006412:	e7fe      	b.n	8006412 <pvPortMalloc+0x162>
	return pvReturn;
 8006414:	69fb      	ldr	r3, [r7, #28]
}
 8006416:	4618      	mov	r0, r3
 8006418:	3728      	adds	r7, #40	; 0x28
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	200018dc 	.word	0x200018dc
 8006424:	200018e8 	.word	0x200018e8
 8006428:	200018e0 	.word	0x200018e0
 800642c:	200018d4 	.word	0x200018d4
 8006430:	200018e4 	.word	0x200018e4

08006434 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b086      	sub	sp, #24
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d046      	beq.n	80064d4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006446:	2308      	movs	r3, #8
 8006448:	425b      	negs	r3, r3
 800644a:	697a      	ldr	r2, [r7, #20]
 800644c:	4413      	add	r3, r2
 800644e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	685a      	ldr	r2, [r3, #4]
 8006458:	4b20      	ldr	r3, [pc, #128]	; (80064dc <vPortFree+0xa8>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4013      	ands	r3, r2
 800645e:	2b00      	cmp	r3, #0
 8006460:	d109      	bne.n	8006476 <vPortFree+0x42>
 8006462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006466:	f383 8811 	msr	BASEPRI, r3
 800646a:	f3bf 8f6f 	isb	sy
 800646e:	f3bf 8f4f 	dsb	sy
 8006472:	60fb      	str	r3, [r7, #12]
 8006474:	e7fe      	b.n	8006474 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d009      	beq.n	8006492 <vPortFree+0x5e>
 800647e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006482:	f383 8811 	msr	BASEPRI, r3
 8006486:	f3bf 8f6f 	isb	sy
 800648a:	f3bf 8f4f 	dsb	sy
 800648e:	60bb      	str	r3, [r7, #8]
 8006490:	e7fe      	b.n	8006490 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	685a      	ldr	r2, [r3, #4]
 8006496:	4b11      	ldr	r3, [pc, #68]	; (80064dc <vPortFree+0xa8>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4013      	ands	r3, r2
 800649c:	2b00      	cmp	r3, #0
 800649e:	d019      	beq.n	80064d4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d115      	bne.n	80064d4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	685a      	ldr	r2, [r3, #4]
 80064ac:	4b0b      	ldr	r3, [pc, #44]	; (80064dc <vPortFree+0xa8>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	43db      	mvns	r3, r3
 80064b2:	401a      	ands	r2, r3
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80064b8:	f7fe fcc4 	bl	8004e44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	685a      	ldr	r2, [r3, #4]
 80064c0:	4b07      	ldr	r3, [pc, #28]	; (80064e0 <vPortFree+0xac>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4413      	add	r3, r2
 80064c6:	4a06      	ldr	r2, [pc, #24]	; (80064e0 <vPortFree+0xac>)
 80064c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80064ca:	6938      	ldr	r0, [r7, #16]
 80064cc:	f000 f86c 	bl	80065a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80064d0:	f7fe fcc6 	bl	8004e60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80064d4:	bf00      	nop
 80064d6:	3718      	adds	r7, #24
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	200018e8 	.word	0x200018e8
 80064e0:	200018e0 	.word	0x200018e0

080064e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80064e4:	b480      	push	{r7}
 80064e6:	b085      	sub	sp, #20
 80064e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80064ea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80064ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80064f0:	4b27      	ldr	r3, [pc, #156]	; (8006590 <prvHeapInit+0xac>)
 80064f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f003 0307 	and.w	r3, r3, #7
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00c      	beq.n	8006518 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	3307      	adds	r3, #7
 8006502:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f023 0307 	bic.w	r3, r3, #7
 800650a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800650c:	68ba      	ldr	r2, [r7, #8]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	4a1f      	ldr	r2, [pc, #124]	; (8006590 <prvHeapInit+0xac>)
 8006514:	4413      	add	r3, r2
 8006516:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800651c:	4a1d      	ldr	r2, [pc, #116]	; (8006594 <prvHeapInit+0xb0>)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006522:	4b1c      	ldr	r3, [pc, #112]	; (8006594 <prvHeapInit+0xb0>)
 8006524:	2200      	movs	r2, #0
 8006526:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	68ba      	ldr	r2, [r7, #8]
 800652c:	4413      	add	r3, r2
 800652e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006530:	2208      	movs	r2, #8
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	1a9b      	subs	r3, r3, r2
 8006536:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f023 0307 	bic.w	r3, r3, #7
 800653e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	4a15      	ldr	r2, [pc, #84]	; (8006598 <prvHeapInit+0xb4>)
 8006544:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006546:	4b14      	ldr	r3, [pc, #80]	; (8006598 <prvHeapInit+0xb4>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2200      	movs	r2, #0
 800654c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800654e:	4b12      	ldr	r3, [pc, #72]	; (8006598 <prvHeapInit+0xb4>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	2200      	movs	r2, #0
 8006554:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	1ad2      	subs	r2, r2, r3
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006564:	4b0c      	ldr	r3, [pc, #48]	; (8006598 <prvHeapInit+0xb4>)
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	4a0a      	ldr	r2, [pc, #40]	; (800659c <prvHeapInit+0xb8>)
 8006572:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	4a09      	ldr	r2, [pc, #36]	; (80065a0 <prvHeapInit+0xbc>)
 800657a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800657c:	4b09      	ldr	r3, [pc, #36]	; (80065a4 <prvHeapInit+0xc0>)
 800657e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006582:	601a      	str	r2, [r3, #0]
}
 8006584:	bf00      	nop
 8006586:	3714      	adds	r7, #20
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr
 8006590:	20000d1c 	.word	0x20000d1c
 8006594:	200018d4 	.word	0x200018d4
 8006598:	200018dc 	.word	0x200018dc
 800659c:	200018e4 	.word	0x200018e4
 80065a0:	200018e0 	.word	0x200018e0
 80065a4:	200018e8 	.word	0x200018e8

080065a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80065a8:	b480      	push	{r7}
 80065aa:	b085      	sub	sp, #20
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80065b0:	4b28      	ldr	r3, [pc, #160]	; (8006654 <prvInsertBlockIntoFreeList+0xac>)
 80065b2:	60fb      	str	r3, [r7, #12]
 80065b4:	e002      	b.n	80065bc <prvInsertBlockIntoFreeList+0x14>
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	60fb      	str	r3, [r7, #12]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d8f7      	bhi.n	80065b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	68ba      	ldr	r2, [r7, #8]
 80065d0:	4413      	add	r3, r2
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d108      	bne.n	80065ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	685a      	ldr	r2, [r3, #4]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	441a      	add	r2, r3
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	68ba      	ldr	r2, [r7, #8]
 80065f4:	441a      	add	r2, r3
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d118      	bne.n	8006630 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	4b15      	ldr	r3, [pc, #84]	; (8006658 <prvInsertBlockIntoFreeList+0xb0>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	429a      	cmp	r2, r3
 8006608:	d00d      	beq.n	8006626 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	685a      	ldr	r2, [r3, #4]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	441a      	add	r2, r3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	601a      	str	r2, [r3, #0]
 8006624:	e008      	b.n	8006638 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006626:	4b0c      	ldr	r3, [pc, #48]	; (8006658 <prvInsertBlockIntoFreeList+0xb0>)
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	601a      	str	r2, [r3, #0]
 800662e:	e003      	b.n	8006638 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	429a      	cmp	r2, r3
 800663e:	d002      	beq.n	8006646 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006646:	bf00      	nop
 8006648:	3714      	adds	r7, #20
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	200018d4 	.word	0x200018d4
 8006658:	200018dc 	.word	0x200018dc

0800665c <__libc_init_array>:
 800665c:	b570      	push	{r4, r5, r6, lr}
 800665e:	4e0d      	ldr	r6, [pc, #52]	; (8006694 <__libc_init_array+0x38>)
 8006660:	4c0d      	ldr	r4, [pc, #52]	; (8006698 <__libc_init_array+0x3c>)
 8006662:	1ba4      	subs	r4, r4, r6
 8006664:	10a4      	asrs	r4, r4, #2
 8006666:	2500      	movs	r5, #0
 8006668:	42a5      	cmp	r5, r4
 800666a:	d109      	bne.n	8006680 <__libc_init_array+0x24>
 800666c:	4e0b      	ldr	r6, [pc, #44]	; (800669c <__libc_init_array+0x40>)
 800666e:	4c0c      	ldr	r4, [pc, #48]	; (80066a0 <__libc_init_array+0x44>)
 8006670:	f000 f82c 	bl	80066cc <_init>
 8006674:	1ba4      	subs	r4, r4, r6
 8006676:	10a4      	asrs	r4, r4, #2
 8006678:	2500      	movs	r5, #0
 800667a:	42a5      	cmp	r5, r4
 800667c:	d105      	bne.n	800668a <__libc_init_array+0x2e>
 800667e:	bd70      	pop	{r4, r5, r6, pc}
 8006680:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006684:	4798      	blx	r3
 8006686:	3501      	adds	r5, #1
 8006688:	e7ee      	b.n	8006668 <__libc_init_array+0xc>
 800668a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800668e:	4798      	blx	r3
 8006690:	3501      	adds	r5, #1
 8006692:	e7f2      	b.n	800667a <__libc_init_array+0x1e>
 8006694:	0800677c 	.word	0x0800677c
 8006698:	0800677c 	.word	0x0800677c
 800669c:	0800677c 	.word	0x0800677c
 80066a0:	08006780 	.word	0x08006780

080066a4 <memcpy>:
 80066a4:	b510      	push	{r4, lr}
 80066a6:	1e43      	subs	r3, r0, #1
 80066a8:	440a      	add	r2, r1
 80066aa:	4291      	cmp	r1, r2
 80066ac:	d100      	bne.n	80066b0 <memcpy+0xc>
 80066ae:	bd10      	pop	{r4, pc}
 80066b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066b8:	e7f7      	b.n	80066aa <memcpy+0x6>

080066ba <memset>:
 80066ba:	4402      	add	r2, r0
 80066bc:	4603      	mov	r3, r0
 80066be:	4293      	cmp	r3, r2
 80066c0:	d100      	bne.n	80066c4 <memset+0xa>
 80066c2:	4770      	bx	lr
 80066c4:	f803 1b01 	strb.w	r1, [r3], #1
 80066c8:	e7f9      	b.n	80066be <memset+0x4>
	...

080066cc <_init>:
 80066cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ce:	bf00      	nop
 80066d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066d2:	bc08      	pop	{r3}
 80066d4:	469e      	mov	lr, r3
 80066d6:	4770      	bx	lr

080066d8 <_fini>:
 80066d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066da:	bf00      	nop
 80066dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066de:	bc08      	pop	{r3}
 80066e0:	469e      	mov	lr, r3
 80066e2:	4770      	bx	lr
